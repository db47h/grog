// Code generated by apigen; DO NOT EDIT
{{- if .Tags }}

// +build {{ .Tags }}
{{end}}
package gl

/*
{{- /* Generate C stubs */ -}}
{{- $api := .API }}
{{- $fnPrefix := "" }}
{{- if eq $api "gl"}}
{{- $fnPrefix = "grog_"}}
#cgo LDFLAGS: -lGL -ldl
#cgo CFLAGS: -I./glad/include

#include "glad/src/glad.c"
{{- end}}
{{- if eq $api "gles2"}}
#cgo LDFLAGS: -lGLESv2
#include <GLES2/gl2.h>
{{- end}}
*/
import "C"
import (
    {{- if eq $api "gl" }}
    "fmt"
    {{- end }}
    "unsafe"
)

// GL constants.
//
const (
{{- range .Enums}}
	{{ .GoName }} = {{ .Value }}
{{- end}}
)

// OpenGL Functions.
//

// Init initializes OpenGL[ES].
//
{{- if eq $api "gl" }}
func Init() error {
	status := int(C.gladLoadGL())
	if status == 0 {
		return fmt.Errorf("failed to initialize OpenGL")
	}
	return nil
}
{{- else}}
func Init() error {
    return nil
}
{{- end }}

{{- range .Commands}}
{{- $ret := .Type.GoName true }}

func {{.GoName}} (
    {{- range $i, $e := .Params}}
    {{- if gt $i 0}}, {{end}}
    {{- $e.Name }} {{$e.Type.GoName false -}}
    {{- end -}}
) {{ $ret }} {
    {{if $ret}}return {{.Type.ToGo }}({{end -}}
    C.{{$fnPrefix}}{{.Name}}(
        {{- range $i, $e := .Params}}
        {{- if gt $i 0}}, {{end}}
        {{- $e.Type.ToC $e.Name}}
        {{- end -}}
    )
    {{- if $ret}}){{- end}}
}
{{- end }}
