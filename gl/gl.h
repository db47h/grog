// Code generated by gogl (https://github.com/db47h/gogl); DO NOT EDIT

#ifndef _GROG_GL_H_

#ifdef GOTAG_gles2

#include <GLES2/gl2.h>

#ifndef GLAPI
# define GLAPI extern
#endif

#else /* GL */

#if defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__) && !defined(__SCITECH_SNAP__)
#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN 1
#endif
#ifndef NOMINMAX
#define NOMINMAX 1
#endif
#include <windows.h>
#endif

#ifndef APIENTRY
#define APIENTRY
#endif
#ifndef APIENTRYP
#define APIENTRYP APIENTRY *
#endif

#ifndef GLAPIENTRY
#define GLAPIENTRY APIENTRY
#endif

#ifndef GLAPI
# define GLAPI extern
#endif

#if defined(_WIN32)
typedef signed   char          int8_t;
typedef unsigned char          uint8_t;
typedef signed   short int     int16_t;
typedef unsigned short int     uint16_t;
typedef __int32                int32_t;
typedef unsigned __int32       uint32_t;
typedef __int64                int64_t;
typedef unsigned __int64       uint64_t;
#ifdef _WIN64
typedef signed   long long int intptr_t;
typedef unsigned long long int uintptr_t;
#else
typedef signed   long  int     intptr_t;
typedef unsigned long  int     uintptr_t;
#endif
#else
#include <stdint.h>
#endif

typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef void GLvoid;
typedef int8_t GLbyte;
typedef uint8_t GLubyte;
typedef int16_t GLshort;
typedef uint16_t GLushort;
typedef int GLint;
typedef unsigned int GLuint;
typedef int32_t GLclampx;
typedef int GLsizei;
typedef float GLfloat;
typedef float GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void *GLeglClientBufferEXT;
typedef void *GLeglImageOES;
typedef char GLchar;
typedef char GLcharARB;
#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef unsigned int GLhandleARB;
#endif
typedef uint16_t GLhalf;
typedef uint16_t GLhalfARB;
typedef int32_t GLfixed;
typedef intptr_t GLintptr;
typedef intptr_t GLintptrARB;
typedef intptr_t GLsizeiptr;
typedef intptr_t GLsizeiptrARB;
typedef int64_t GLint64;
typedef int64_t GLint64EXT;
typedef uint64_t GLuint64;
typedef uint64_t GLuint64EXT;
typedef struct __GLsync *GLsync;
struct _cl_context;
struct _cl_event;
typedef void (APIENTRY *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (APIENTRY *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (APIENTRY *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (APIENTRY *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
typedef unsigned short GLhalfNV;
typedef GLintptr GLvdpauSurfaceNV;
typedef void (APIENTRY *GLVULKANPROCNV)(void);

#define GL_2D 0x0600
#define GL_2_BYTES 0x1407
#define GL_3D 0x0601
#define GL_3D_COLOR 0x0602
#define GL_3D_COLOR_TEXTURE 0x0603
#define GL_3_BYTES 0x1408
#define GL_4D_COLOR_TEXTURE 0x0604
#define GL_4_BYTES 0x1409
#define GL_ACCUM 0x0100
#define GL_ACCUM_ALPHA_BITS 0x0D5B
#define GL_ACCUM_BLUE_BITS 0x0D5A
#define GL_ACCUM_BUFFER_BIT 0x00000200
#define GL_ACCUM_CLEAR_VALUE 0x0B80
#define GL_ACCUM_GREEN_BITS 0x0D59
#define GL_ACCUM_RED_BITS 0x0D58
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_ACTIVE_UNIFORMS 0x8B86
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#define GL_ADD 0x0104
#define GL_ADD_SIGNED 0x8574
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_ALIASED_POINT_SIZE_RANGE 0x846D
#define GL_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_ALPHA 0x1906
#define GL_ALPHA12 0x803D
#define GL_ALPHA16 0x803E
#define GL_ALPHA4 0x803B
#define GL_ALPHA8 0x803C
#define GL_ALPHA_BIAS 0x0D1D
#define GL_ALPHA_BITS 0x0D55
#define GL_ALPHA_INTEGER 0x8D97
#define GL_ALPHA_SCALE 0x0D1C
#define GL_ALPHA_TEST 0x0BC0
#define GL_ALPHA_TEST_FUNC 0x0BC1
#define GL_ALPHA_TEST_REF 0x0BC2
#define GL_ALWAYS 0x0207
#define GL_AMBIENT 0x1200
#define GL_AMBIENT_AND_DIFFUSE 0x1602
#define GL_AND 0x1501
#define GL_AND_INVERTED 0x1504
#define GL_AND_REVERSE 0x1502
#define GL_ARRAY_BUFFER 0x8892
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_ATTACHED_SHADERS 0x8B85
#define GL_ATTRIB_STACK_DEPTH 0x0BB0
#define GL_AUTO_NORMAL 0x0D80
#define GL_AUX0 0x0409
#define GL_AUX1 0x040A
#define GL_AUX2 0x040B
#define GL_AUX3 0x040C
#define GL_AUX_BUFFERS 0x0C00
#define GL_BACK 0x0405
#define GL_BACK_LEFT 0x0402
#define GL_BACK_RIGHT 0x0403
#define GL_BGR 0x80E0
#define GL_BGRA 0x80E1
#define GL_BGRA_INTEGER 0x8D9B
#define GL_BGR_INTEGER 0x8D9A
#define GL_BITMAP 0x1A00
#define GL_BITMAP_TOKEN 0x0704
#define GL_BLEND 0x0BE2
#define GL_BLEND_COLOR 0x8005
#define GL_BLEND_DST 0x0BE0
#define GL_BLEND_DST_ALPHA 0x80CA
#define GL_BLEND_DST_RGB 0x80C8
#define GL_BLEND_EQUATION 0x8009
#define GL_BLEND_EQUATION_ALPHA 0x883D
#define GL_BLEND_EQUATION_RGB 0x8009
#define GL_BLEND_SRC 0x0BE1
#define GL_BLEND_SRC_ALPHA 0x80CB
#define GL_BLEND_SRC_RGB 0x80C9
#define GL_BLUE 0x1905
#define GL_BLUE_BIAS 0x0D1B
#define GL_BLUE_BITS 0x0D54
#define GL_BLUE_INTEGER 0x8D96
#define GL_BLUE_SCALE 0x0D1A
#define GL_BOOL 0x8B56
#define GL_BOOL_VEC2 0x8B57
#define GL_BOOL_VEC3 0x8B58
#define GL_BOOL_VEC4 0x8B59
#define GL_BUFFER_ACCESS 0x88BB
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#define GL_BUFFER_MAPPED 0x88BC
#define GL_BUFFER_MAP_LENGTH 0x9120
#define GL_BUFFER_MAP_OFFSET 0x9121
#define GL_BUFFER_MAP_POINTER 0x88BD
#define GL_BUFFER_SIZE 0x8764
#define GL_BUFFER_USAGE 0x8765
#define GL_BYTE 0x1400
#define GL_C3F_V3F 0x2A24
#define GL_C4F_N3F_V3F 0x2A26
#define GL_C4UB_V2F 0x2A22
#define GL_C4UB_V3F 0x2A23
#define GL_CCW 0x0901
#define GL_CLAMP 0x2900
#define GL_CLAMP_FRAGMENT_COLOR 0x891B
#define GL_CLAMP_READ_COLOR 0x891C
#define GL_CLAMP_TO_BORDER 0x812D
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_CLAMP_VERTEX_COLOR 0x891A
#define GL_CLEAR 0x1500
#define GL_CLIENT_ACTIVE_TEXTURE 0x84E1
#define GL_CLIENT_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1
#define GL_CLIENT_PIXEL_STORE_BIT 0x00000001
#define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002
#define GL_CLIP_DISTANCE0 0x3000
#define GL_CLIP_DISTANCE1 0x3001
#define GL_CLIP_DISTANCE2 0x3002
#define GL_CLIP_DISTANCE3 0x3003
#define GL_CLIP_DISTANCE4 0x3004
#define GL_CLIP_DISTANCE5 0x3005
#define GL_CLIP_DISTANCE6 0x3006
#define GL_CLIP_DISTANCE7 0x3007
#define GL_CLIP_PLANE0 0x3000
#define GL_CLIP_PLANE1 0x3001
#define GL_CLIP_PLANE2 0x3002
#define GL_CLIP_PLANE3 0x3003
#define GL_CLIP_PLANE4 0x3004
#define GL_CLIP_PLANE5 0x3005
#define GL_COEFF 0x0A00
#define GL_COLOR 0x1800
#define GL_COLOR_ARRAY 0x8076
#define GL_COLOR_ARRAY_BUFFER_BINDING 0x8898
#define GL_COLOR_ARRAY_POINTER 0x8090
#define GL_COLOR_ARRAY_SIZE 0x8081
#define GL_COLOR_ARRAY_STRIDE 0x8083
#define GL_COLOR_ARRAY_TYPE 0x8082
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_COLOR_ATTACHMENT16 0x8CF0
#define GL_COLOR_ATTACHMENT17 0x8CF1
#define GL_COLOR_ATTACHMENT18 0x8CF2
#define GL_COLOR_ATTACHMENT19 0x8CF3
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_COLOR_ATTACHMENT20 0x8CF4
#define GL_COLOR_ATTACHMENT21 0x8CF5
#define GL_COLOR_ATTACHMENT22 0x8CF6
#define GL_COLOR_ATTACHMENT23 0x8CF7
#define GL_COLOR_ATTACHMENT24 0x8CF8
#define GL_COLOR_ATTACHMENT25 0x8CF9
#define GL_COLOR_ATTACHMENT26 0x8CFA
#define GL_COLOR_ATTACHMENT27 0x8CFB
#define GL_COLOR_ATTACHMENT28 0x8CFC
#define GL_COLOR_ATTACHMENT29 0x8CFD
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_COLOR_ATTACHMENT30 0x8CFE
#define GL_COLOR_ATTACHMENT31 0x8CFF
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_COLOR_INDEX 0x1900
#define GL_COLOR_INDEXES 0x1603
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_COLOR_MATERIAL 0x0B57
#define GL_COLOR_MATERIAL_FACE 0x0B55
#define GL_COLOR_MATERIAL_PARAMETER 0x0B56
#define GL_COLOR_SUM 0x8458
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_COMBINE 0x8570
#define GL_COMBINE_ALPHA 0x8572
#define GL_COMBINE_RGB 0x8571
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#define GL_COMPARE_R_TO_TEXTURE 0x884E
#define GL_COMPILE 0x1300
#define GL_COMPILE_AND_EXECUTE 0x1301
#define GL_COMPILE_STATUS 0x8B81
#define GL_COMPRESSED_ALPHA 0x84E9
#define GL_COMPRESSED_INTENSITY 0x84EC
#define GL_COMPRESSED_LUMINANCE 0x84EA
#define GL_COMPRESSED_LUMINANCE_ALPHA 0x84EB
#define GL_COMPRESSED_RED 0x8225
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#define GL_COMPRESSED_RG 0x8226
#define GL_COMPRESSED_RGB 0x84ED
#define GL_COMPRESSED_RGBA 0x84EE
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#define GL_COMPRESSED_SLUMINANCE 0x8C4A
#define GL_COMPRESSED_SLUMINANCE_ALPHA 0x8C4B
#define GL_COMPRESSED_SRGB 0x8C48
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_CONSTANT 0x8576
#define GL_CONSTANT_ALPHA 0x8003
#define GL_CONSTANT_ATTENUATION 0x1207
#define GL_CONSTANT_COLOR 0x8001
#define GL_CONTEXT_FLAGS 0x821E
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#define GL_COORD_REPLACE 0x8862
#define GL_COPY 0x1503
#define GL_COPY_INVERTED 0x150C
#define GL_COPY_PIXEL_TOKEN 0x0706
#define GL_CULL_FACE 0x0B44
#define GL_CULL_FACE_MODE 0x0B45
#define GL_CURRENT_BIT 0x00000001
#define GL_CURRENT_COLOR 0x0B00
#define GL_CURRENT_FOG_COORD 0x8453
#define GL_CURRENT_FOG_COORDINATE 0x8453
#define GL_CURRENT_INDEX 0x0B01
#define GL_CURRENT_NORMAL 0x0B02
#define GL_CURRENT_PROGRAM 0x8B8D
#define GL_CURRENT_QUERY 0x8865
#define GL_CURRENT_RASTER_COLOR 0x0B04
#define GL_CURRENT_RASTER_DISTANCE 0x0B09
#define GL_CURRENT_RASTER_INDEX 0x0B05
#define GL_CURRENT_RASTER_POSITION 0x0B07
#define GL_CURRENT_RASTER_POSITION_VALID 0x0B08
#define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F
#define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06
#define GL_CURRENT_SECONDARY_COLOR 0x8459
#define GL_CURRENT_TEXTURE_COORDS 0x0B03
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#define GL_CW 0x0900
#define GL_DECAL 0x2101
#define GL_DECR 0x1E03
#define GL_DECR_WRAP 0x8508
#define GL_DELETE_STATUS 0x8B80
#define GL_DEPTH 0x1801
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_DEPTH32F_STENCIL8 0x8CAD
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_DEPTH_BIAS 0x0D1F
#define GL_DEPTH_BITS 0x0D56
#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_DEPTH_COMPONENT 0x1902
#define GL_DEPTH_COMPONENT16 0x81A5
#define GL_DEPTH_COMPONENT24 0x81A6
#define GL_DEPTH_COMPONENT32 0x81A7
#define GL_DEPTH_COMPONENT32F 0x8CAC
#define GL_DEPTH_FUNC 0x0B74
#define GL_DEPTH_RANGE 0x0B70
#define GL_DEPTH_SCALE 0x0D1E
#define GL_DEPTH_STENCIL 0x84F9
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_DEPTH_TEST 0x0B71
#define GL_DEPTH_TEXTURE_MODE 0x884B
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_DIFFUSE 0x1201
#define GL_DITHER 0x0BD0
#define GL_DOMAIN 0x0A02
#define GL_DONT_CARE 0x1100
#define GL_DOT3_RGB 0x86AE
#define GL_DOT3_RGBA 0x86AF
#define GL_DOUBLE 0x140A
#define GL_DOUBLEBUFFER 0x0C32
#define GL_DRAW_BUFFER 0x0C01
#define GL_DRAW_BUFFER0 0x8825
#define GL_DRAW_BUFFER1 0x8826
#define GL_DRAW_BUFFER10 0x882F
#define GL_DRAW_BUFFER11 0x8830
#define GL_DRAW_BUFFER12 0x8831
#define GL_DRAW_BUFFER13 0x8832
#define GL_DRAW_BUFFER14 0x8833
#define GL_DRAW_BUFFER15 0x8834
#define GL_DRAW_BUFFER2 0x8827
#define GL_DRAW_BUFFER3 0x8828
#define GL_DRAW_BUFFER4 0x8829
#define GL_DRAW_BUFFER5 0x882A
#define GL_DRAW_BUFFER6 0x882B
#define GL_DRAW_BUFFER7 0x882C
#define GL_DRAW_BUFFER8 0x882D
#define GL_DRAW_BUFFER9 0x882E
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_DRAW_PIXEL_TOKEN 0x0705
#define GL_DST_ALPHA 0x0304
#define GL_DST_COLOR 0x0306
#define GL_DYNAMIC_COPY 0x88EA
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_DYNAMIC_READ 0x88E9
#define GL_EDGE_FLAG 0x0B43
#define GL_EDGE_FLAG_ARRAY 0x8079
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B
#define GL_EDGE_FLAG_ARRAY_POINTER 0x8093
#define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_EMISSION 0x1600
#define GL_ENABLE_BIT 0x00002000
#define GL_EQUAL 0x0202
#define GL_EQUIV 0x1509
#define GL_EVAL_BIT 0x00010000
#define GL_EXP 0x0800
#define GL_EXP2 0x0801
#define GL_EXTENSIONS 0x1F03
#define GL_EYE_LINEAR 0x2400
#define GL_EYE_PLANE 0x2502
#define GL_FALSE 0
#define GL_FASTEST 0x1101
#define GL_FEEDBACK 0x1C01
#define GL_FEEDBACK_BUFFER_POINTER 0x0DF0
#define GL_FEEDBACK_BUFFER_SIZE 0x0DF1
#define GL_FEEDBACK_BUFFER_TYPE 0x0DF2
#define GL_FILL 0x1B02
#define GL_FIXED_ONLY 0x891D
#define GL_FLAT 0x1D00
#define GL_FLOAT 0x1406
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#define GL_FLOAT_MAT2 0x8B5A
#define GL_FLOAT_MAT2x3 0x8B65
#define GL_FLOAT_MAT2x4 0x8B66
#define GL_FLOAT_MAT3 0x8B5B
#define GL_FLOAT_MAT3x2 0x8B67
#define GL_FLOAT_MAT3x4 0x8B68
#define GL_FLOAT_MAT4 0x8B5C
#define GL_FLOAT_MAT4x2 0x8B69
#define GL_FLOAT_MAT4x3 0x8B6A
#define GL_FLOAT_VEC2 0x8B50
#define GL_FLOAT_VEC3 0x8B51
#define GL_FLOAT_VEC4 0x8B52
#define GL_FOG 0x0B60
#define GL_FOG_BIT 0x00000080
#define GL_FOG_COLOR 0x0B66
#define GL_FOG_COORD 0x8451
#define GL_FOG_COORDINATE 0x8451
#define GL_FOG_COORDINATE_ARRAY 0x8457
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
#define GL_FOG_COORDINATE_ARRAY_POINTER 0x8456
#define GL_FOG_COORDINATE_ARRAY_STRIDE 0x8455
#define GL_FOG_COORDINATE_ARRAY_TYPE 0x8454
#define GL_FOG_COORDINATE_SOURCE 0x8450
#define GL_FOG_COORD_ARRAY 0x8457
#define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0x889D
#define GL_FOG_COORD_ARRAY_POINTER 0x8456
#define GL_FOG_COORD_ARRAY_STRIDE 0x8455
#define GL_FOG_COORD_ARRAY_TYPE 0x8454
#define GL_FOG_COORD_SRC 0x8450
#define GL_FOG_DENSITY 0x0B62
#define GL_FOG_END 0x0B64
#define GL_FOG_HINT 0x0C54
#define GL_FOG_INDEX 0x0B61
#define GL_FOG_MODE 0x0B65
#define GL_FOG_START 0x0B63
#define GL_FRAGMENT_DEPTH 0x8452
#define GL_FRAGMENT_SHADER 0x8B30
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_FRAMEBUFFER 0x8D40
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_FRONT 0x0404
#define GL_FRONT_AND_BACK 0x0408
#define GL_FRONT_FACE 0x0B46
#define GL_FRONT_LEFT 0x0400
#define GL_FRONT_RIGHT 0x0401
#define GL_FUNC_ADD 0x8006
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_FUNC_SUBTRACT 0x800A
#define GL_GENERATE_MIPMAP 0x8191
#define GL_GENERATE_MIPMAP_HINT 0x8192
#define GL_GEQUAL 0x0206
#define GL_GREATER 0x0204
#define GL_GREEN 0x1904
#define GL_GREEN_BIAS 0x0D19
#define GL_GREEN_BITS 0x0D53
#define GL_GREEN_INTEGER 0x8D95
#define GL_GREEN_SCALE 0x0D18
#define GL_HALF_FLOAT 0x140B
#define GL_HINT_BIT 0x00008000
#define GL_INCR 0x1E02
#define GL_INCR_WRAP 0x8507
#define GL_INDEX 0x8222
#define GL_INDEX_ARRAY 0x8077
#define GL_INDEX_ARRAY_BUFFER_BINDING 0x8899
#define GL_INDEX_ARRAY_POINTER 0x8091
#define GL_INDEX_ARRAY_STRIDE 0x8086
#define GL_INDEX_ARRAY_TYPE 0x8085
#define GL_INDEX_BITS 0x0D51
#define GL_INDEX_CLEAR_VALUE 0x0C20
#define GL_INDEX_LOGIC_OP 0x0BF1
#define GL_INDEX_MODE 0x0C30
#define GL_INDEX_OFFSET 0x0D13
#define GL_INDEX_SHIFT 0x0D12
#define GL_INDEX_WRITEMASK 0x0C21
#define GL_INFO_LOG_LENGTH 0x8B84
#define GL_INT 0x1404
#define GL_INTENSITY 0x8049
#define GL_INTENSITY12 0x804C
#define GL_INTENSITY16 0x804D
#define GL_INTENSITY4 0x804A
#define GL_INTENSITY8 0x804B
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#define GL_INTERPOLATE 0x8575
#define GL_INT_SAMPLER_1D 0x8DC9
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#define GL_INT_SAMPLER_2D 0x8DCA
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#define GL_INT_SAMPLER_3D 0x8DCB
#define GL_INT_SAMPLER_CUBE 0x8DCC
#define GL_INT_VEC2 0x8B53
#define GL_INT_VEC3 0x8B54
#define GL_INT_VEC4 0x8B55
#define GL_INVALID_ENUM 0x0500
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_INVALID_OPERATION 0x0502
#define GL_INVALID_VALUE 0x0501
#define GL_INVERT 0x150A
#define GL_KEEP 0x1E00
#define GL_LEFT 0x0406
#define GL_LEQUAL 0x0203
#define GL_LESS 0x0201
#define GL_LIGHT0 0x4000
#define GL_LIGHT1 0x4001
#define GL_LIGHT2 0x4002
#define GL_LIGHT3 0x4003
#define GL_LIGHT4 0x4004
#define GL_LIGHT5 0x4005
#define GL_LIGHT6 0x4006
#define GL_LIGHT7 0x4007
#define GL_LIGHTING 0x0B50
#define GL_LIGHTING_BIT 0x00000040
#define GL_LIGHT_MODEL_AMBIENT 0x0B53
#define GL_LIGHT_MODEL_COLOR_CONTROL 0x81F8
#define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51
#define GL_LIGHT_MODEL_TWO_SIDE 0x0B52
#define GL_LINE 0x1B01
#define GL_LINEAR 0x2601
#define GL_LINEAR_ATTENUATION 0x1208
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_LINES 0x0001
#define GL_LINE_BIT 0x00000004
#define GL_LINE_LOOP 0x0002
#define GL_LINE_RESET_TOKEN 0x0707
#define GL_LINE_SMOOTH 0x0B20
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_LINE_STIPPLE 0x0B24
#define GL_LINE_STIPPLE_PATTERN 0x0B25
#define GL_LINE_STIPPLE_REPEAT 0x0B26
#define GL_LINE_STRIP 0x0003
#define GL_LINE_TOKEN 0x0702
#define GL_LINE_WIDTH 0x0B21
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_LINK_STATUS 0x8B82
#define GL_LIST_BASE 0x0B32
#define GL_LIST_BIT 0x00020000
#define GL_LIST_INDEX 0x0B33
#define GL_LIST_MODE 0x0B30
#define GL_LOAD 0x0101
#define GL_LOGIC_OP 0x0BF1
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_LOWER_LEFT 0x8CA1
#define GL_LUMINANCE 0x1909
#define GL_LUMINANCE12 0x8041
#define GL_LUMINANCE12_ALPHA12 0x8047
#define GL_LUMINANCE12_ALPHA4 0x8046
#define GL_LUMINANCE16 0x8042
#define GL_LUMINANCE16_ALPHA16 0x8048
#define GL_LUMINANCE4 0x803F
#define GL_LUMINANCE4_ALPHA4 0x8043
#define GL_LUMINANCE6_ALPHA2 0x8044
#define GL_LUMINANCE8 0x8040
#define GL_LUMINANCE8_ALPHA8 0x8045
#define GL_LUMINANCE_ALPHA 0x190A
#define GL_MAJOR_VERSION 0x821B
#define GL_MAP1_COLOR_4 0x0D90
#define GL_MAP1_GRID_DOMAIN 0x0DD0
#define GL_MAP1_GRID_SEGMENTS 0x0DD1
#define GL_MAP1_INDEX 0x0D91
#define GL_MAP1_NORMAL 0x0D92
#define GL_MAP1_TEXTURE_COORD_1 0x0D93
#define GL_MAP1_TEXTURE_COORD_2 0x0D94
#define GL_MAP1_TEXTURE_COORD_3 0x0D95
#define GL_MAP1_TEXTURE_COORD_4 0x0D96
#define GL_MAP1_VERTEX_3 0x0D97
#define GL_MAP1_VERTEX_4 0x0D98
#define GL_MAP2_COLOR_4 0x0DB0
#define GL_MAP2_GRID_DOMAIN 0x0DD2
#define GL_MAP2_GRID_SEGMENTS 0x0DD3
#define GL_MAP2_INDEX 0x0DB1
#define GL_MAP2_NORMAL 0x0DB2
#define GL_MAP2_TEXTURE_COORD_1 0x0DB3
#define GL_MAP2_TEXTURE_COORD_2 0x0DB4
#define GL_MAP2_TEXTURE_COORD_3 0x0DB5
#define GL_MAP2_TEXTURE_COORD_4 0x0DB6
#define GL_MAP2_VERTEX_3 0x0DB7
#define GL_MAP2_VERTEX_4 0x0DB8
#define GL_MAP_COLOR 0x0D10
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#define GL_MAP_READ_BIT 0x0001
#define GL_MAP_STENCIL 0x0D11
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#define GL_MAP_WRITE_BIT 0x0002
#define GL_MATRIX_MODE 0x0BA0
#define GL_MAX 0x8008
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35
#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B
#define GL_MAX_CLIP_DISTANCES 0x0D32
#define GL_MAX_CLIP_PLANES 0x0D32
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#define GL_MAX_DRAW_BUFFERS 0x8824
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#define GL_MAX_EVAL_ORDER 0x0D30
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_MAX_LIGHTS 0x0D31
#define GL_MAX_LIST_NESTING 0x0B31
#define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36
#define GL_MAX_NAME_STACK_DEPTH 0x0D37
#define GL_MAX_PIXEL_MAP_TABLE 0x0D34
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_MAX_SAMPLES 0x8D57
#define GL_MAX_TEXTURE_COORDS 0x8871
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39
#define GL_MAX_TEXTURE_UNITS 0x84E2
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#define GL_MAX_VARYING_FLOATS 0x8B4B
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_MIN 0x8007
#define GL_MINOR_VERSION 0x821C
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#define GL_MIRRORED_REPEAT 0x8370
#define GL_MODELVIEW 0x1700
#define GL_MODELVIEW_MATRIX 0x0BA6
#define GL_MODELVIEW_STACK_DEPTH 0x0BA3
#define GL_MODULATE 0x2100
#define GL_MULT 0x0103
#define GL_MULTISAMPLE 0x809D
#define GL_MULTISAMPLE_BIT 0x20000000
#define GL_N3F_V3F 0x2A25
#define GL_NAME_STACK_DEPTH 0x0D70
#define GL_NAND 0x150E
#define GL_NEAREST 0x2600
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_NEVER 0x0200
#define GL_NICEST 0x1102
#define GL_NONE 0
#define GL_NOOP 0x1505
#define GL_NOR 0x1508
#define GL_NORMALIZE 0x0BA1
#define GL_NORMAL_ARRAY 0x8075
#define GL_NORMAL_ARRAY_BUFFER_BINDING 0x8897
#define GL_NORMAL_ARRAY_POINTER 0x808F
#define GL_NORMAL_ARRAY_STRIDE 0x807F
#define GL_NORMAL_ARRAY_TYPE 0x807E
#define GL_NORMAL_MAP 0x8511
#define GL_NOTEQUAL 0x0205
#define GL_NO_ERROR 0
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_NUM_EXTENSIONS 0x821D
#define GL_OBJECT_LINEAR 0x2401
#define GL_OBJECT_PLANE 0x2501
#define GL_ONE 1
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_OPERAND0_ALPHA 0x8598
#define GL_OPERAND0_RGB 0x8590
#define GL_OPERAND1_ALPHA 0x8599
#define GL_OPERAND1_RGB 0x8591
#define GL_OPERAND2_ALPHA 0x859A
#define GL_OPERAND2_RGB 0x8592
#define GL_OR 0x1507
#define GL_ORDER 0x0A01
#define GL_OR_INVERTED 0x150D
#define GL_OR_REVERSE 0x150B
#define GL_OUT_OF_MEMORY 0x0505
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_PACK_IMAGE_HEIGHT 0x806C
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_PACK_SKIP_IMAGES 0x806B
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_PASS_THROUGH_TOKEN 0x0700
#define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50
#define GL_PIXEL_MAP_A_TO_A 0x0C79
#define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9
#define GL_PIXEL_MAP_B_TO_B 0x0C78
#define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8
#define GL_PIXEL_MAP_G_TO_G 0x0C77
#define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7
#define GL_PIXEL_MAP_I_TO_A 0x0C75
#define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5
#define GL_PIXEL_MAP_I_TO_B 0x0C74
#define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4
#define GL_PIXEL_MAP_I_TO_G 0x0C73
#define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3
#define GL_PIXEL_MAP_I_TO_I 0x0C70
#define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0
#define GL_PIXEL_MAP_I_TO_R 0x0C72
#define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2
#define GL_PIXEL_MAP_R_TO_R 0x0C76
#define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6
#define GL_PIXEL_MAP_S_TO_S 0x0C71
#define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1
#define GL_PIXEL_MODE_BIT 0x00000020
#define GL_PIXEL_PACK_BUFFER 0x88EB
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#define GL_POINT 0x1B00
#define GL_POINTS 0x0000
#define GL_POINT_BIT 0x00000002
#define GL_POINT_DISTANCE_ATTENUATION 0x8129
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#define GL_POINT_SIZE 0x0B11
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_POINT_SIZE_MAX 0x8127
#define GL_POINT_SIZE_MIN 0x8126
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_POINT_SMOOTH 0x0B10
#define GL_POINT_SMOOTH_HINT 0x0C51
#define GL_POINT_SPRITE 0x8861
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#define GL_POINT_TOKEN 0x0701
#define GL_POLYGON 0x0009
#define GL_POLYGON_BIT 0x00000008
#define GL_POLYGON_MODE 0x0B40
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_POLYGON_STIPPLE 0x0B42
#define GL_POLYGON_STIPPLE_BIT 0x00000010
#define GL_POLYGON_TOKEN 0x0703
#define GL_POSITION 0x1203
#define GL_PREVIOUS 0x8578
#define GL_PRIMARY_COLOR 0x8577
#define GL_PRIMITIVES_GENERATED 0x8C87
#define GL_PROJECTION 0x1701
#define GL_PROJECTION_MATRIX 0x0BA7
#define GL_PROJECTION_STACK_DEPTH 0x0BA4
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#define GL_PROXY_TEXTURE_3D 0x8070
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#define GL_Q 0x2003
#define GL_QUADRATIC_ATTENUATION 0x1209
#define GL_QUADS 0x0007
#define GL_QUAD_STRIP 0x0008
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#define GL_QUERY_COUNTER_BITS 0x8864
#define GL_QUERY_NO_WAIT 0x8E14
#define GL_QUERY_RESULT 0x8866
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#define GL_QUERY_WAIT 0x8E13
#define GL_R 0x2002
#define GL_R11F_G11F_B10F 0x8C3A
#define GL_R16 0x822A
#define GL_R16F 0x822D
#define GL_R16I 0x8233
#define GL_R16UI 0x8234
#define GL_R32F 0x822E
#define GL_R32I 0x8235
#define GL_R32UI 0x8236
#define GL_R3_G3_B2 0x2A10
#define GL_R8 0x8229
#define GL_R8I 0x8231
#define GL_R8UI 0x8232
#define GL_RASTERIZER_DISCARD 0x8C89
#define GL_READ_BUFFER 0x0C02
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_READ_ONLY 0x88B8
#define GL_READ_WRITE 0x88BA
#define GL_RED 0x1903
#define GL_RED_BIAS 0x0D15
#define GL_RED_BITS 0x0D52
#define GL_RED_INTEGER 0x8D94
#define GL_RED_SCALE 0x0D14
#define GL_REFLECTION_MAP 0x8512
#define GL_RENDER 0x1C00
#define GL_RENDERBUFFER 0x8D41
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_RENDERER 0x1F01
#define GL_RENDER_MODE 0x0C40
#define GL_REPEAT 0x2901
#define GL_REPLACE 0x1E01
#define GL_RESCALE_NORMAL 0x803A
#define GL_RETURN 0x0102
#define GL_RG 0x8227
#define GL_RG16 0x822C
#define GL_RG16F 0x822F
#define GL_RG16I 0x8239
#define GL_RG16UI 0x823A
#define GL_RG32F 0x8230
#define GL_RG32I 0x823B
#define GL_RG32UI 0x823C
#define GL_RG8 0x822B
#define GL_RG8I 0x8237
#define GL_RG8UI 0x8238
#define GL_RGB 0x1907
#define GL_RGB10 0x8052
#define GL_RGB10_A2 0x8059
#define GL_RGB12 0x8053
#define GL_RGB16 0x8054
#define GL_RGB16F 0x881B
#define GL_RGB16I 0x8D89
#define GL_RGB16UI 0x8D77
#define GL_RGB32F 0x8815
#define GL_RGB32I 0x8D83
#define GL_RGB32UI 0x8D71
#define GL_RGB4 0x804F
#define GL_RGB5 0x8050
#define GL_RGB5_A1 0x8057
#define GL_RGB8 0x8051
#define GL_RGB8I 0x8D8F
#define GL_RGB8UI 0x8D7D
#define GL_RGB9_E5 0x8C3D
#define GL_RGBA 0x1908
#define GL_RGBA12 0x805A
#define GL_RGBA16 0x805B
#define GL_RGBA16F 0x881A
#define GL_RGBA16I 0x8D88
#define GL_RGBA16UI 0x8D76
#define GL_RGBA2 0x8055
#define GL_RGBA32F 0x8814
#define GL_RGBA32I 0x8D82
#define GL_RGBA32UI 0x8D70
#define GL_RGBA4 0x8056
#define GL_RGBA8 0x8058
#define GL_RGBA8I 0x8D8E
#define GL_RGBA8UI 0x8D7C
#define GL_RGBA_INTEGER 0x8D99
#define GL_RGBA_MODE 0x0C31
#define GL_RGB_INTEGER 0x8D98
#define GL_RGB_SCALE 0x8573
#define GL_RG_INTEGER 0x8228
#define GL_RIGHT 0x0407
#define GL_S 0x2000
#define GL_SAMPLER_1D 0x8B5D
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#define GL_SAMPLER_1D_SHADOW 0x8B61
#define GL_SAMPLER_2D 0x8B5E
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#define GL_SAMPLER_2D_SHADOW 0x8B62
#define GL_SAMPLER_3D 0x8B5F
#define GL_SAMPLER_CUBE 0x8B60
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#define GL_SAMPLES 0x80A9
#define GL_SAMPLES_PASSED 0x8914
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_SCISSOR_BIT 0x00080000
#define GL_SCISSOR_BOX 0x0C10
#define GL_SCISSOR_TEST 0x0C11
#define GL_SECONDARY_COLOR_ARRAY 0x845E
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C
#define GL_SECONDARY_COLOR_ARRAY_POINTER 0x845D
#define GL_SECONDARY_COLOR_ARRAY_SIZE 0x845A
#define GL_SECONDARY_COLOR_ARRAY_STRIDE 0x845C
#define GL_SECONDARY_COLOR_ARRAY_TYPE 0x845B
#define GL_SELECT 0x1C02
#define GL_SELECTION_BUFFER_POINTER 0x0DF3
#define GL_SELECTION_BUFFER_SIZE 0x0DF4
#define GL_SEPARATE_ATTRIBS 0x8C8D
#define GL_SEPARATE_SPECULAR_COLOR 0x81FA
#define GL_SET 0x150F
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#define GL_SHADER_TYPE 0x8B4F
#define GL_SHADE_MODEL 0x0B54
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#define GL_SHININESS 0x1601
#define GL_SHORT 0x1402
#define GL_SINGLE_COLOR 0x81F9
#define GL_SLUMINANCE 0x8C46
#define GL_SLUMINANCE8 0x8C47
#define GL_SLUMINANCE8_ALPHA8 0x8C45
#define GL_SLUMINANCE_ALPHA 0x8C44
#define GL_SMOOTH 0x1D01
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#define GL_SOURCE0_ALPHA 0x8588
#define GL_SOURCE0_RGB 0x8580
#define GL_SOURCE1_ALPHA 0x8589
#define GL_SOURCE1_RGB 0x8581
#define GL_SOURCE2_ALPHA 0x858A
#define GL_SOURCE2_RGB 0x8582
#define GL_SPECULAR 0x1202
#define GL_SPHERE_MAP 0x2402
#define GL_SPOT_CUTOFF 0x1206
#define GL_SPOT_DIRECTION 0x1204
#define GL_SPOT_EXPONENT 0x1205
#define GL_SRC0_ALPHA 0x8588
#define GL_SRC0_RGB 0x8580
#define GL_SRC1_ALPHA 0x8589
#define GL_SRC1_RGB 0x8581
#define GL_SRC2_ALPHA 0x858A
#define GL_SRC2_RGB 0x8582
#define GL_SRC_ALPHA 0x0302
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_SRC_COLOR 0x0300
#define GL_SRGB 0x8C40
#define GL_SRGB8 0x8C41
#define GL_SRGB8_ALPHA8 0x8C43
#define GL_SRGB_ALPHA 0x8C42
#define GL_STACK_OVERFLOW 0x0503
#define GL_STACK_UNDERFLOW 0x0504
#define GL_STATIC_COPY 0x88E6
#define GL_STATIC_DRAW 0x88E4
#define GL_STATIC_READ 0x88E5
#define GL_STENCIL 0x1802
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_STENCIL_BACK_FAIL 0x8801
#define GL_STENCIL_BACK_FUNC 0x8800
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#define GL_STENCIL_BACK_REF 0x8CA3
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#define GL_STENCIL_BITS 0x0D57
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_STENCIL_FAIL 0x0B94
#define GL_STENCIL_FUNC 0x0B92
#define GL_STENCIL_INDEX 0x1901
#define GL_STENCIL_INDEX1 0x8D46
#define GL_STENCIL_INDEX16 0x8D49
#define GL_STENCIL_INDEX4 0x8D47
#define GL_STENCIL_INDEX8 0x8D48
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_STENCIL_REF 0x0B97
#define GL_STENCIL_TEST 0x0B90
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_STEREO 0x0C33
#define GL_STREAM_COPY 0x88E2
#define GL_STREAM_DRAW 0x88E0
#define GL_STREAM_READ 0x88E1
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_SUBTRACT 0x84E7
#define GL_T 0x2001
#define GL_T2F_C3F_V3F 0x2A2A
#define GL_T2F_C4F_N3F_V3F 0x2A2C
#define GL_T2F_C4UB_V3F 0x2A29
#define GL_T2F_N3F_V3F 0x2A2B
#define GL_T2F_V3F 0x2A27
#define GL_T4F_C4F_N3F_V4F 0x2A2D
#define GL_T4F_V4F 0x2A28
#define GL_TEXTURE 0x1702
#define GL_TEXTURE0 0x84C0
#define GL_TEXTURE1 0x84C1
#define GL_TEXTURE10 0x84CA
#define GL_TEXTURE11 0x84CB
#define GL_TEXTURE12 0x84CC
#define GL_TEXTURE13 0x84CD
#define GL_TEXTURE14 0x84CE
#define GL_TEXTURE15 0x84CF
#define GL_TEXTURE16 0x84D0
#define GL_TEXTURE17 0x84D1
#define GL_TEXTURE18 0x84D2
#define GL_TEXTURE19 0x84D3
#define GL_TEXTURE2 0x84C2
#define GL_TEXTURE20 0x84D4
#define GL_TEXTURE21 0x84D5
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE23 0x84D7
#define GL_TEXTURE24 0x84D8
#define GL_TEXTURE25 0x84D9
#define GL_TEXTURE26 0x84DA
#define GL_TEXTURE27 0x84DB
#define GL_TEXTURE28 0x84DC
#define GL_TEXTURE29 0x84DD
#define GL_TEXTURE3 0x84C3
#define GL_TEXTURE30 0x84DE
#define GL_TEXTURE31 0x84DF
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE5 0x84C5
#define GL_TEXTURE6 0x84C6
#define GL_TEXTURE7 0x84C7
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE9 0x84C9
#define GL_TEXTURE_1D 0x0DE0
#define GL_TEXTURE_1D_ARRAY 0x8C18
#define GL_TEXTURE_2D 0x0DE1
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#define GL_TEXTURE_3D 0x806F
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#define GL_TEXTURE_BASE_LEVEL 0x813C
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_BIT 0x00040000
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#define GL_TEXTURE_BORDER 0x1005
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#define GL_TEXTURE_COMPARE_MODE 0x884C
#define GL_TEXTURE_COMPONENTS 0x1003
#define GL_TEXTURE_COMPRESSED 0x86A1
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#define GL_TEXTURE_COORD_ARRAY 0x8078
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
#define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092
#define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088
#define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A
#define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#define GL_TEXTURE_DEPTH 0x8071
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#define GL_TEXTURE_ENV 0x2300
#define GL_TEXTURE_ENV_COLOR 0x2201
#define GL_TEXTURE_ENV_MODE 0x2200
#define GL_TEXTURE_FILTER_CONTROL 0x8500
#define GL_TEXTURE_GEN_MODE 0x2500
#define GL_TEXTURE_GEN_Q 0x0C63
#define GL_TEXTURE_GEN_R 0x0C62
#define GL_TEXTURE_GEN_S 0x0C60
#define GL_TEXTURE_GEN_T 0x0C61
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_TEXTURE_INTENSITY_SIZE 0x8061
#define GL_TEXTURE_INTENSITY_TYPE 0x8C15
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_TEXTURE_LOD_BIAS 0x8501
#define GL_TEXTURE_LUMINANCE_SIZE 0x8060
#define GL_TEXTURE_LUMINANCE_TYPE 0x8C14
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_TEXTURE_MATRIX 0x0BA8
#define GL_TEXTURE_MAX_LEVEL 0x813D
#define GL_TEXTURE_MAX_LOD 0x813B
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_TEXTURE_MIN_LOD 0x813A
#define GL_TEXTURE_PRIORITY 0x8066
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_TEXTURE_RED_TYPE 0x8C10
#define GL_TEXTURE_RESIDENT 0x8067
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#define GL_TEXTURE_STACK_DEPTH 0x0BA5
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_TEXTURE_WIDTH 0x1000
#define GL_TEXTURE_WRAP_R 0x8072
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_TRANSFORM_BIT 0x00001000
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_TRANSPOSE_COLOR_MATRIX 0x84E6
#define GL_TRANSPOSE_MODELVIEW_MATRIX 0x84E3
#define GL_TRANSPOSE_PROJECTION_MATRIX 0x84E4
#define GL_TRANSPOSE_TEXTURE_MATRIX 0x84E5
#define GL_TRIANGLES 0x0004
#define GL_TRIANGLE_FAN 0x0006
#define GL_TRIANGLE_STRIP 0x0005
#define GL_TRUE 1
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_UNPACK_SKIP_IMAGES 0x806D
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_UNSIGNED_BYTE 0x1401
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#define GL_UNSIGNED_INT 0x1405
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_UNSIGNED_SHORT 0x1403
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#define GL_UPPER_LEFT 0x8CA2
#define GL_V2F 0x2A20
#define GL_V3F 0x2A21
#define GL_VALIDATE_STATUS 0x8B83
#define GL_VENDOR 0x1F00
#define GL_VERSION 0x1F02
#define GL_VERTEX_ARRAY 0x8074
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#define GL_VERTEX_ARRAY_BUFFER_BINDING 0x8896
#define GL_VERTEX_ARRAY_POINTER 0x808E
#define GL_VERTEX_ARRAY_SIZE 0x807A
#define GL_VERTEX_ARRAY_STRIDE 0x807C
#define GL_VERTEX_ARRAY_TYPE 0x807B
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#define GL_VERTEX_PROGRAM_TWO_SIDE 0x8643
#define GL_VERTEX_SHADER 0x8B31
#define GL_VIEWPORT 0x0BA2
#define GL_VIEWPORT_BIT 0x00000800
#define GL_WEIGHT_ARRAY_BUFFER_BINDING 0x889E
#define GL_WRITE_ONLY 0x88B9
#define GL_XOR 0x1506
#define GL_ZERO 0
#define GL_ZOOM_X 0x0D16
#define GL_ZOOM_Y 0x0D17
typedef void (APIENTRYP PFNGLACCUM) (GLenum op, GLfloat value);
#define glAccum pfn_glAccum
GLAPI PFNGLACCUM pfn_glAccum;
typedef void (APIENTRYP PFNGLALPHAFUNC) (GLenum func_, GLfloat ref);
#define glAlphaFunc pfn_glAlphaFunc
GLAPI PFNGLALPHAFUNC pfn_glAlphaFunc;
typedef void (APIENTRYP PFNGLBEGIN) (GLenum mode);
#define glBegin pfn_glBegin
GLAPI PFNGLBEGIN pfn_glBegin;
typedef void (APIENTRYP PFNGLBITMAP) (GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
#define glBitmap pfn_glBitmap
GLAPI PFNGLBITMAP pfn_glBitmap;
typedef void (APIENTRYP PFNGLBLENDFUNC) (GLenum sfactor, GLenum dfactor);
#define glBlendFunc pfn_glBlendFunc
GLAPI PFNGLBLENDFUNC pfn_glBlendFunc;
typedef void (APIENTRYP PFNGLCALLLIST) (GLuint list);
#define glCallList pfn_glCallList
GLAPI PFNGLCALLLIST pfn_glCallList;
typedef void (APIENTRYP PFNGLCALLLISTS) (GLsizei n, GLenum type_, const void *lists);
#define glCallLists pfn_glCallLists
GLAPI PFNGLCALLLISTS pfn_glCallLists;
typedef void (APIENTRYP PFNGLCLEAR) (GLbitfield mask);
#define glClear pfn_glClear
GLAPI PFNGLCLEAR pfn_glClear;
typedef void (APIENTRYP PFNGLCLEARACCUM) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
#define glClearAccum pfn_glClearAccum
GLAPI PFNGLCLEARACCUM pfn_glClearAccum;
typedef void (APIENTRYP PFNGLCLEARCOLOR) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
#define glClearColor pfn_glClearColor
GLAPI PFNGLCLEARCOLOR pfn_glClearColor;
typedef void (APIENTRYP PFNGLCLEARDEPTH) (GLdouble depth);
#define glClearDepth pfn_glClearDepth
GLAPI PFNGLCLEARDEPTH pfn_glClearDepth;
typedef void (APIENTRYP PFNGLCLEARINDEX) (GLfloat c);
#define glClearIndex pfn_glClearIndex
GLAPI PFNGLCLEARINDEX pfn_glClearIndex;
typedef void (APIENTRYP PFNGLCLEARSTENCIL) (GLint s);
#define glClearStencil pfn_glClearStencil
GLAPI PFNGLCLEARSTENCIL pfn_glClearStencil;
typedef void (APIENTRYP PFNGLCLIPPLANE) (GLenum plane, const GLdouble *equation);
#define glClipPlane pfn_glClipPlane
GLAPI PFNGLCLIPPLANE pfn_glClipPlane;
typedef void (APIENTRYP PFNGLCOLOR3B) (GLbyte red, GLbyte green, GLbyte blue);
#define glColor3b pfn_glColor3b
GLAPI PFNGLCOLOR3B pfn_glColor3b;
typedef void (APIENTRYP PFNGLCOLOR3BV) (const GLbyte *v);
#define glColor3bv pfn_glColor3bv
GLAPI PFNGLCOLOR3BV pfn_glColor3bv;
typedef void (APIENTRYP PFNGLCOLOR3D) (GLdouble red, GLdouble green, GLdouble blue);
#define glColor3d pfn_glColor3d
GLAPI PFNGLCOLOR3D pfn_glColor3d;
typedef void (APIENTRYP PFNGLCOLOR3DV) (const GLdouble *v);
#define glColor3dv pfn_glColor3dv
GLAPI PFNGLCOLOR3DV pfn_glColor3dv;
typedef void (APIENTRYP PFNGLCOLOR3F) (GLfloat red, GLfloat green, GLfloat blue);
#define glColor3f pfn_glColor3f
GLAPI PFNGLCOLOR3F pfn_glColor3f;
typedef void (APIENTRYP PFNGLCOLOR3FV) (const GLfloat *v);
#define glColor3fv pfn_glColor3fv
GLAPI PFNGLCOLOR3FV pfn_glColor3fv;
typedef void (APIENTRYP PFNGLCOLOR3I) (GLint red, GLint green, GLint blue);
#define glColor3i pfn_glColor3i
GLAPI PFNGLCOLOR3I pfn_glColor3i;
typedef void (APIENTRYP PFNGLCOLOR3IV) (const GLint *v);
#define glColor3iv pfn_glColor3iv
GLAPI PFNGLCOLOR3IV pfn_glColor3iv;
typedef void (APIENTRYP PFNGLCOLOR3S) (GLshort red, GLshort green, GLshort blue);
#define glColor3s pfn_glColor3s
GLAPI PFNGLCOLOR3S pfn_glColor3s;
typedef void (APIENTRYP PFNGLCOLOR3SV) (const GLshort *v);
#define glColor3sv pfn_glColor3sv
GLAPI PFNGLCOLOR3SV pfn_glColor3sv;
typedef void (APIENTRYP PFNGLCOLOR3UB) (GLubyte red, GLubyte green, GLubyte blue);
#define glColor3ub pfn_glColor3ub
GLAPI PFNGLCOLOR3UB pfn_glColor3ub;
typedef void (APIENTRYP PFNGLCOLOR3UBV) (const GLubyte *v);
#define glColor3ubv pfn_glColor3ubv
GLAPI PFNGLCOLOR3UBV pfn_glColor3ubv;
typedef void (APIENTRYP PFNGLCOLOR3UI) (GLuint red, GLuint green, GLuint blue);
#define glColor3ui pfn_glColor3ui
GLAPI PFNGLCOLOR3UI pfn_glColor3ui;
typedef void (APIENTRYP PFNGLCOLOR3UIV) (const GLuint *v);
#define glColor3uiv pfn_glColor3uiv
GLAPI PFNGLCOLOR3UIV pfn_glColor3uiv;
typedef void (APIENTRYP PFNGLCOLOR3US) (GLushort red, GLushort green, GLushort blue);
#define glColor3us pfn_glColor3us
GLAPI PFNGLCOLOR3US pfn_glColor3us;
typedef void (APIENTRYP PFNGLCOLOR3USV) (const GLushort *v);
#define glColor3usv pfn_glColor3usv
GLAPI PFNGLCOLOR3USV pfn_glColor3usv;
typedef void (APIENTRYP PFNGLCOLOR4B) (GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
#define glColor4b pfn_glColor4b
GLAPI PFNGLCOLOR4B pfn_glColor4b;
typedef void (APIENTRYP PFNGLCOLOR4BV) (const GLbyte *v);
#define glColor4bv pfn_glColor4bv
GLAPI PFNGLCOLOR4BV pfn_glColor4bv;
typedef void (APIENTRYP PFNGLCOLOR4D) (GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
#define glColor4d pfn_glColor4d
GLAPI PFNGLCOLOR4D pfn_glColor4d;
typedef void (APIENTRYP PFNGLCOLOR4DV) (const GLdouble *v);
#define glColor4dv pfn_glColor4dv
GLAPI PFNGLCOLOR4DV pfn_glColor4dv;
typedef void (APIENTRYP PFNGLCOLOR4F) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
#define glColor4f pfn_glColor4f
GLAPI PFNGLCOLOR4F pfn_glColor4f;
typedef void (APIENTRYP PFNGLCOLOR4FV) (const GLfloat *v);
#define glColor4fv pfn_glColor4fv
GLAPI PFNGLCOLOR4FV pfn_glColor4fv;
typedef void (APIENTRYP PFNGLCOLOR4I) (GLint red, GLint green, GLint blue, GLint alpha);
#define glColor4i pfn_glColor4i
GLAPI PFNGLCOLOR4I pfn_glColor4i;
typedef void (APIENTRYP PFNGLCOLOR4IV) (const GLint *v);
#define glColor4iv pfn_glColor4iv
GLAPI PFNGLCOLOR4IV pfn_glColor4iv;
typedef void (APIENTRYP PFNGLCOLOR4S) (GLshort red, GLshort green, GLshort blue, GLshort alpha);
#define glColor4s pfn_glColor4s
GLAPI PFNGLCOLOR4S pfn_glColor4s;
typedef void (APIENTRYP PFNGLCOLOR4SV) (const GLshort *v);
#define glColor4sv pfn_glColor4sv
GLAPI PFNGLCOLOR4SV pfn_glColor4sv;
typedef void (APIENTRYP PFNGLCOLOR4UB) (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
#define glColor4ub pfn_glColor4ub
GLAPI PFNGLCOLOR4UB pfn_glColor4ub;
typedef void (APIENTRYP PFNGLCOLOR4UBV) (const GLubyte *v);
#define glColor4ubv pfn_glColor4ubv
GLAPI PFNGLCOLOR4UBV pfn_glColor4ubv;
typedef void (APIENTRYP PFNGLCOLOR4UI) (GLuint red, GLuint green, GLuint blue, GLuint alpha);
#define glColor4ui pfn_glColor4ui
GLAPI PFNGLCOLOR4UI pfn_glColor4ui;
typedef void (APIENTRYP PFNGLCOLOR4UIV) (const GLuint *v);
#define glColor4uiv pfn_glColor4uiv
GLAPI PFNGLCOLOR4UIV pfn_glColor4uiv;
typedef void (APIENTRYP PFNGLCOLOR4US) (GLushort red, GLushort green, GLushort blue, GLushort alpha);
#define glColor4us pfn_glColor4us
GLAPI PFNGLCOLOR4US pfn_glColor4us;
typedef void (APIENTRYP PFNGLCOLOR4USV) (const GLushort *v);
#define glColor4usv pfn_glColor4usv
GLAPI PFNGLCOLOR4USV pfn_glColor4usv;
typedef void (APIENTRYP PFNGLCOLORMASK) (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
#define glColorMask pfn_glColorMask
GLAPI PFNGLCOLORMASK pfn_glColorMask;
typedef void (APIENTRYP PFNGLCOLORMATERIAL) (GLenum face, GLenum mode);
#define glColorMaterial pfn_glColorMaterial
GLAPI PFNGLCOLORMATERIAL pfn_glColorMaterial;
typedef void (APIENTRYP PFNGLCOPYPIXELS) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum type_);
#define glCopyPixels pfn_glCopyPixels
GLAPI PFNGLCOPYPIXELS pfn_glCopyPixels;
typedef void (APIENTRYP PFNGLCULLFACE) (GLenum mode);
#define glCullFace pfn_glCullFace
GLAPI PFNGLCULLFACE pfn_glCullFace;
typedef void (APIENTRYP PFNGLDELETELISTS) (GLuint list, GLsizei range_);
#define glDeleteLists pfn_glDeleteLists
GLAPI PFNGLDELETELISTS pfn_glDeleteLists;
typedef void (APIENTRYP PFNGLDEPTHFUNC) (GLenum func_);
#define glDepthFunc pfn_glDepthFunc
GLAPI PFNGLDEPTHFUNC pfn_glDepthFunc;
typedef void (APIENTRYP PFNGLDEPTHMASK) (GLboolean flag);
#define glDepthMask pfn_glDepthMask
GLAPI PFNGLDEPTHMASK pfn_glDepthMask;
typedef void (APIENTRYP PFNGLDEPTHRANGE) (GLdouble n, GLdouble f);
#define glDepthRange pfn_glDepthRange
GLAPI PFNGLDEPTHRANGE pfn_glDepthRange;
typedef void (APIENTRYP PFNGLDISABLE) (GLenum cap);
#define glDisable pfn_glDisable
GLAPI PFNGLDISABLE pfn_glDisable;
typedef void (APIENTRYP PFNGLDRAWBUFFER) (GLenum buf);
#define glDrawBuffer pfn_glDrawBuffer
GLAPI PFNGLDRAWBUFFER pfn_glDrawBuffer;
typedef void (APIENTRYP PFNGLDRAWPIXELS) (GLsizei width, GLsizei height, GLenum format, GLenum type_, const void *pixels);
#define glDrawPixels pfn_glDrawPixels
GLAPI PFNGLDRAWPIXELS pfn_glDrawPixels;
typedef void (APIENTRYP PFNGLEDGEFLAG) (GLboolean flag);
#define glEdgeFlag pfn_glEdgeFlag
GLAPI PFNGLEDGEFLAG pfn_glEdgeFlag;
typedef void (APIENTRYP PFNGLEDGEFLAGV) (const GLboolean *flag);
#define glEdgeFlagv pfn_glEdgeFlagv
GLAPI PFNGLEDGEFLAGV pfn_glEdgeFlagv;
typedef void (APIENTRYP PFNGLENABLE) (GLenum cap);
#define glEnable pfn_glEnable
GLAPI PFNGLENABLE pfn_glEnable;
typedef void (APIENTRYP PFNGLEND) ();
#define glEnd pfn_glEnd
GLAPI PFNGLEND pfn_glEnd;
typedef void (APIENTRYP PFNGLENDLIST) ();
#define glEndList pfn_glEndList
GLAPI PFNGLENDLIST pfn_glEndList;
typedef void (APIENTRYP PFNGLEVALCOORD1D) (GLdouble u);
#define glEvalCoord1d pfn_glEvalCoord1d
GLAPI PFNGLEVALCOORD1D pfn_glEvalCoord1d;
typedef void (APIENTRYP PFNGLEVALCOORD1DV) (const GLdouble *u);
#define glEvalCoord1dv pfn_glEvalCoord1dv
GLAPI PFNGLEVALCOORD1DV pfn_glEvalCoord1dv;
typedef void (APIENTRYP PFNGLEVALCOORD1F) (GLfloat u);
#define glEvalCoord1f pfn_glEvalCoord1f
GLAPI PFNGLEVALCOORD1F pfn_glEvalCoord1f;
typedef void (APIENTRYP PFNGLEVALCOORD1FV) (const GLfloat *u);
#define glEvalCoord1fv pfn_glEvalCoord1fv
GLAPI PFNGLEVALCOORD1FV pfn_glEvalCoord1fv;
typedef void (APIENTRYP PFNGLEVALCOORD2D) (GLdouble u, GLdouble v);
#define glEvalCoord2d pfn_glEvalCoord2d
GLAPI PFNGLEVALCOORD2D pfn_glEvalCoord2d;
typedef void (APIENTRYP PFNGLEVALCOORD2DV) (const GLdouble *u);
#define glEvalCoord2dv pfn_glEvalCoord2dv
GLAPI PFNGLEVALCOORD2DV pfn_glEvalCoord2dv;
typedef void (APIENTRYP PFNGLEVALCOORD2F) (GLfloat u, GLfloat v);
#define glEvalCoord2f pfn_glEvalCoord2f
GLAPI PFNGLEVALCOORD2F pfn_glEvalCoord2f;
typedef void (APIENTRYP PFNGLEVALCOORD2FV) (const GLfloat *u);
#define glEvalCoord2fv pfn_glEvalCoord2fv
GLAPI PFNGLEVALCOORD2FV pfn_glEvalCoord2fv;
typedef void (APIENTRYP PFNGLEVALMESH1) (GLenum mode, GLint i1, GLint i2);
#define glEvalMesh1 pfn_glEvalMesh1
GLAPI PFNGLEVALMESH1 pfn_glEvalMesh1;
typedef void (APIENTRYP PFNGLEVALMESH2) (GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
#define glEvalMesh2 pfn_glEvalMesh2
GLAPI PFNGLEVALMESH2 pfn_glEvalMesh2;
typedef void (APIENTRYP PFNGLEVALPOINT1) (GLint i);
#define glEvalPoint1 pfn_glEvalPoint1
GLAPI PFNGLEVALPOINT1 pfn_glEvalPoint1;
typedef void (APIENTRYP PFNGLEVALPOINT2) (GLint i, GLint j);
#define glEvalPoint2 pfn_glEvalPoint2
GLAPI PFNGLEVALPOINT2 pfn_glEvalPoint2;
typedef void (APIENTRYP PFNGLFEEDBACKBUFFER) (GLsizei size, GLenum type_, GLfloat *buffer);
#define glFeedbackBuffer pfn_glFeedbackBuffer
GLAPI PFNGLFEEDBACKBUFFER pfn_glFeedbackBuffer;
typedef void (APIENTRYP PFNGLFINISH) ();
#define glFinish pfn_glFinish
GLAPI PFNGLFINISH pfn_glFinish;
typedef void (APIENTRYP PFNGLFLUSH) ();
#define glFlush pfn_glFlush
GLAPI PFNGLFLUSH pfn_glFlush;
typedef void (APIENTRYP PFNGLFOGF) (GLenum pname, GLfloat param);
#define glFogf pfn_glFogf
GLAPI PFNGLFOGF pfn_glFogf;
typedef void (APIENTRYP PFNGLFOGFV) (GLenum pname, const GLfloat *params);
#define glFogfv pfn_glFogfv
GLAPI PFNGLFOGFV pfn_glFogfv;
typedef void (APIENTRYP PFNGLFOGI) (GLenum pname, GLint param);
#define glFogi pfn_glFogi
GLAPI PFNGLFOGI pfn_glFogi;
typedef void (APIENTRYP PFNGLFOGIV) (GLenum pname, const GLint *params);
#define glFogiv pfn_glFogiv
GLAPI PFNGLFOGIV pfn_glFogiv;
typedef void (APIENTRYP PFNGLFRONTFACE) (GLenum mode);
#define glFrontFace pfn_glFrontFace
GLAPI PFNGLFRONTFACE pfn_glFrontFace;
typedef void (APIENTRYP PFNGLFRUSTUM) (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
#define glFrustum pfn_glFrustum
GLAPI PFNGLFRUSTUM pfn_glFrustum;
typedef GLuint (APIENTRYP PFNGLGENLISTS) (GLsizei range_);
#define glGenLists pfn_glGenLists
GLAPI PFNGLGENLISTS pfn_glGenLists;
typedef void (APIENTRYP PFNGLGETBOOLEANV) (GLenum pname, GLboolean *data);
#define glGetBooleanv pfn_glGetBooleanv
GLAPI PFNGLGETBOOLEANV pfn_glGetBooleanv;
typedef void (APIENTRYP PFNGLGETCLIPPLANE) (GLenum plane, GLdouble *equation);
#define glGetClipPlane pfn_glGetClipPlane
GLAPI PFNGLGETCLIPPLANE pfn_glGetClipPlane;
typedef void (APIENTRYP PFNGLGETDOUBLEV) (GLenum pname, GLdouble *data);
#define glGetDoublev pfn_glGetDoublev
GLAPI PFNGLGETDOUBLEV pfn_glGetDoublev;
typedef GLenum (APIENTRYP PFNGLGETERROR) ();
#define glGetError pfn_glGetError
GLAPI PFNGLGETERROR pfn_glGetError;
typedef void (APIENTRYP PFNGLGETFLOATV) (GLenum pname, GLfloat *data);
#define glGetFloatv pfn_glGetFloatv
GLAPI PFNGLGETFLOATV pfn_glGetFloatv;
typedef void (APIENTRYP PFNGLGETINTEGERV) (GLenum pname, GLint *data);
#define glGetIntegerv pfn_glGetIntegerv
GLAPI PFNGLGETINTEGERV pfn_glGetIntegerv;
typedef void (APIENTRYP PFNGLGETLIGHTFV) (GLenum light, GLenum pname, GLfloat *params);
#define glGetLightfv pfn_glGetLightfv
GLAPI PFNGLGETLIGHTFV pfn_glGetLightfv;
typedef void (APIENTRYP PFNGLGETLIGHTIV) (GLenum light, GLenum pname, GLint *params);
#define glGetLightiv pfn_glGetLightiv
GLAPI PFNGLGETLIGHTIV pfn_glGetLightiv;
typedef void (APIENTRYP PFNGLGETMAPDV) (GLenum target, GLenum query, GLdouble *v);
#define glGetMapdv pfn_glGetMapdv
GLAPI PFNGLGETMAPDV pfn_glGetMapdv;
typedef void (APIENTRYP PFNGLGETMAPFV) (GLenum target, GLenum query, GLfloat *v);
#define glGetMapfv pfn_glGetMapfv
GLAPI PFNGLGETMAPFV pfn_glGetMapfv;
typedef void (APIENTRYP PFNGLGETMAPIV) (GLenum target, GLenum query, GLint *v);
#define glGetMapiv pfn_glGetMapiv
GLAPI PFNGLGETMAPIV pfn_glGetMapiv;
typedef void (APIENTRYP PFNGLGETMATERIALFV) (GLenum face, GLenum pname, GLfloat *params);
#define glGetMaterialfv pfn_glGetMaterialfv
GLAPI PFNGLGETMATERIALFV pfn_glGetMaterialfv;
typedef void (APIENTRYP PFNGLGETMATERIALIV) (GLenum face, GLenum pname, GLint *params);
#define glGetMaterialiv pfn_glGetMaterialiv
GLAPI PFNGLGETMATERIALIV pfn_glGetMaterialiv;
typedef void (APIENTRYP PFNGLGETPIXELMAPFV) (GLenum map_, GLfloat *values);
#define glGetPixelMapfv pfn_glGetPixelMapfv
GLAPI PFNGLGETPIXELMAPFV pfn_glGetPixelMapfv;
typedef void (APIENTRYP PFNGLGETPIXELMAPUIV) (GLenum map_, GLuint *values);
#define glGetPixelMapuiv pfn_glGetPixelMapuiv
GLAPI PFNGLGETPIXELMAPUIV pfn_glGetPixelMapuiv;
typedef void (APIENTRYP PFNGLGETPIXELMAPUSV) (GLenum map_, GLushort *values);
#define glGetPixelMapusv pfn_glGetPixelMapusv
GLAPI PFNGLGETPIXELMAPUSV pfn_glGetPixelMapusv;
typedef void (APIENTRYP PFNGLGETPOLYGONSTIPPLE) (GLubyte *mask);
#define glGetPolygonStipple pfn_glGetPolygonStipple
GLAPI PFNGLGETPOLYGONSTIPPLE pfn_glGetPolygonStipple;
typedef const GLubyte * (APIENTRYP PFNGLGETSTRING) (GLenum name);
#define glGetString pfn_glGetString
GLAPI PFNGLGETSTRING pfn_glGetString;
typedef void (APIENTRYP PFNGLGETTEXENVFV) (GLenum target, GLenum pname, GLfloat *params);
#define glGetTexEnvfv pfn_glGetTexEnvfv
GLAPI PFNGLGETTEXENVFV pfn_glGetTexEnvfv;
typedef void (APIENTRYP PFNGLGETTEXENVIV) (GLenum target, GLenum pname, GLint *params);
#define glGetTexEnviv pfn_glGetTexEnviv
GLAPI PFNGLGETTEXENVIV pfn_glGetTexEnviv;
typedef void (APIENTRYP PFNGLGETTEXGENDV) (GLenum coord, GLenum pname, GLdouble *params);
#define glGetTexGendv pfn_glGetTexGendv
GLAPI PFNGLGETTEXGENDV pfn_glGetTexGendv;
typedef void (APIENTRYP PFNGLGETTEXGENFV) (GLenum coord, GLenum pname, GLfloat *params);
#define glGetTexGenfv pfn_glGetTexGenfv
GLAPI PFNGLGETTEXGENFV pfn_glGetTexGenfv;
typedef void (APIENTRYP PFNGLGETTEXGENIV) (GLenum coord, GLenum pname, GLint *params);
#define glGetTexGeniv pfn_glGetTexGeniv
GLAPI PFNGLGETTEXGENIV pfn_glGetTexGeniv;
typedef void (APIENTRYP PFNGLGETTEXIMAGE) (GLenum target, GLint level, GLenum format, GLenum type_, void *pixels);
#define glGetTexImage pfn_glGetTexImage
GLAPI PFNGLGETTEXIMAGE pfn_glGetTexImage;
typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERFV) (GLenum target, GLint level, GLenum pname, GLfloat *params);
#define glGetTexLevelParameterfv pfn_glGetTexLevelParameterfv
GLAPI PFNGLGETTEXLEVELPARAMETERFV pfn_glGetTexLevelParameterfv;
typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERIV) (GLenum target, GLint level, GLenum pname, GLint *params);
#define glGetTexLevelParameteriv pfn_glGetTexLevelParameteriv
GLAPI PFNGLGETTEXLEVELPARAMETERIV pfn_glGetTexLevelParameteriv;
typedef void (APIENTRYP PFNGLGETTEXPARAMETERFV) (GLenum target, GLenum pname, GLfloat *params);
#define glGetTexParameterfv pfn_glGetTexParameterfv
GLAPI PFNGLGETTEXPARAMETERFV pfn_glGetTexParameterfv;
typedef void (APIENTRYP PFNGLGETTEXPARAMETERIV) (GLenum target, GLenum pname, GLint *params);
#define glGetTexParameteriv pfn_glGetTexParameteriv
GLAPI PFNGLGETTEXPARAMETERIV pfn_glGetTexParameteriv;
typedef void (APIENTRYP PFNGLHINT) (GLenum target, GLenum mode);
#define glHint pfn_glHint
GLAPI PFNGLHINT pfn_glHint;
typedef void (APIENTRYP PFNGLINDEXMASK) (GLuint mask);
#define glIndexMask pfn_glIndexMask
GLAPI PFNGLINDEXMASK pfn_glIndexMask;
typedef void (APIENTRYP PFNGLINDEXD) (GLdouble c);
#define glIndexd pfn_glIndexd
GLAPI PFNGLINDEXD pfn_glIndexd;
typedef void (APIENTRYP PFNGLINDEXDV) (const GLdouble *c);
#define glIndexdv pfn_glIndexdv
GLAPI PFNGLINDEXDV pfn_glIndexdv;
typedef void (APIENTRYP PFNGLINDEXF) (GLfloat c);
#define glIndexf pfn_glIndexf
GLAPI PFNGLINDEXF pfn_glIndexf;
typedef void (APIENTRYP PFNGLINDEXFV) (const GLfloat *c);
#define glIndexfv pfn_glIndexfv
GLAPI PFNGLINDEXFV pfn_glIndexfv;
typedef void (APIENTRYP PFNGLINDEXI) (GLint c);
#define glIndexi pfn_glIndexi
GLAPI PFNGLINDEXI pfn_glIndexi;
typedef void (APIENTRYP PFNGLINDEXIV) (const GLint *c);
#define glIndexiv pfn_glIndexiv
GLAPI PFNGLINDEXIV pfn_glIndexiv;
typedef void (APIENTRYP PFNGLINDEXS) (GLshort c);
#define glIndexs pfn_glIndexs
GLAPI PFNGLINDEXS pfn_glIndexs;
typedef void (APIENTRYP PFNGLINDEXSV) (const GLshort *c);
#define glIndexsv pfn_glIndexsv
GLAPI PFNGLINDEXSV pfn_glIndexsv;
typedef void (APIENTRYP PFNGLINITNAMES) ();
#define glInitNames pfn_glInitNames
GLAPI PFNGLINITNAMES pfn_glInitNames;
typedef GLboolean (APIENTRYP PFNGLISENABLED) (GLenum cap);
#define glIsEnabled pfn_glIsEnabled
GLAPI PFNGLISENABLED pfn_glIsEnabled;
typedef GLboolean (APIENTRYP PFNGLISLIST) (GLuint list);
#define glIsList pfn_glIsList
GLAPI PFNGLISLIST pfn_glIsList;
typedef void (APIENTRYP PFNGLLIGHTMODELF) (GLenum pname, GLfloat param);
#define glLightModelf pfn_glLightModelf
GLAPI PFNGLLIGHTMODELF pfn_glLightModelf;
typedef void (APIENTRYP PFNGLLIGHTMODELFV) (GLenum pname, const GLfloat *params);
#define glLightModelfv pfn_glLightModelfv
GLAPI PFNGLLIGHTMODELFV pfn_glLightModelfv;
typedef void (APIENTRYP PFNGLLIGHTMODELI) (GLenum pname, GLint param);
#define glLightModeli pfn_glLightModeli
GLAPI PFNGLLIGHTMODELI pfn_glLightModeli;
typedef void (APIENTRYP PFNGLLIGHTMODELIV) (GLenum pname, const GLint *params);
#define glLightModeliv pfn_glLightModeliv
GLAPI PFNGLLIGHTMODELIV pfn_glLightModeliv;
typedef void (APIENTRYP PFNGLLIGHTF) (GLenum light, GLenum pname, GLfloat param);
#define glLightf pfn_glLightf
GLAPI PFNGLLIGHTF pfn_glLightf;
typedef void (APIENTRYP PFNGLLIGHTFV) (GLenum light, GLenum pname, const GLfloat *params);
#define glLightfv pfn_glLightfv
GLAPI PFNGLLIGHTFV pfn_glLightfv;
typedef void (APIENTRYP PFNGLLIGHTI) (GLenum light, GLenum pname, GLint param);
#define glLighti pfn_glLighti
GLAPI PFNGLLIGHTI pfn_glLighti;
typedef void (APIENTRYP PFNGLLIGHTIV) (GLenum light, GLenum pname, const GLint *params);
#define glLightiv pfn_glLightiv
GLAPI PFNGLLIGHTIV pfn_glLightiv;
typedef void (APIENTRYP PFNGLLINESTIPPLE) (GLint factor, GLushort pattern);
#define glLineStipple pfn_glLineStipple
GLAPI PFNGLLINESTIPPLE pfn_glLineStipple;
typedef void (APIENTRYP PFNGLLINEWIDTH) (GLfloat width);
#define glLineWidth pfn_glLineWidth
GLAPI PFNGLLINEWIDTH pfn_glLineWidth;
typedef void (APIENTRYP PFNGLLISTBASE) (GLuint base);
#define glListBase pfn_glListBase
GLAPI PFNGLLISTBASE pfn_glListBase;
typedef void (APIENTRYP PFNGLLOADIDENTITY) ();
#define glLoadIdentity pfn_glLoadIdentity
GLAPI PFNGLLOADIDENTITY pfn_glLoadIdentity;
typedef void (APIENTRYP PFNGLLOADMATRIXD) (const GLdouble *m);
#define glLoadMatrixd pfn_glLoadMatrixd
GLAPI PFNGLLOADMATRIXD pfn_glLoadMatrixd;
typedef void (APIENTRYP PFNGLLOADMATRIXF) (const GLfloat *m);
#define glLoadMatrixf pfn_glLoadMatrixf
GLAPI PFNGLLOADMATRIXF pfn_glLoadMatrixf;
typedef void (APIENTRYP PFNGLLOADNAME) (GLuint name);
#define glLoadName pfn_glLoadName
GLAPI PFNGLLOADNAME pfn_glLoadName;
typedef void (APIENTRYP PFNGLLOGICOP) (GLenum opcode);
#define glLogicOp pfn_glLogicOp
GLAPI PFNGLLOGICOP pfn_glLogicOp;
typedef void (APIENTRYP PFNGLMAP1D) (GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
#define glMap1d pfn_glMap1d
GLAPI PFNGLMAP1D pfn_glMap1d;
typedef void (APIENTRYP PFNGLMAP1F) (GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
#define glMap1f pfn_glMap1f
GLAPI PFNGLMAP1F pfn_glMap1f;
typedef void (APIENTRYP PFNGLMAP2D) (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
#define glMap2d pfn_glMap2d
GLAPI PFNGLMAP2D pfn_glMap2d;
typedef void (APIENTRYP PFNGLMAP2F) (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
#define glMap2f pfn_glMap2f
GLAPI PFNGLMAP2F pfn_glMap2f;
typedef void (APIENTRYP PFNGLMAPGRID1D) (GLint un, GLdouble u1, GLdouble u2);
#define glMapGrid1d pfn_glMapGrid1d
GLAPI PFNGLMAPGRID1D pfn_glMapGrid1d;
typedef void (APIENTRYP PFNGLMAPGRID1F) (GLint un, GLfloat u1, GLfloat u2);
#define glMapGrid1f pfn_glMapGrid1f
GLAPI PFNGLMAPGRID1F pfn_glMapGrid1f;
typedef void (APIENTRYP PFNGLMAPGRID2D) (GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
#define glMapGrid2d pfn_glMapGrid2d
GLAPI PFNGLMAPGRID2D pfn_glMapGrid2d;
typedef void (APIENTRYP PFNGLMAPGRID2F) (GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
#define glMapGrid2f pfn_glMapGrid2f
GLAPI PFNGLMAPGRID2F pfn_glMapGrid2f;
typedef void (APIENTRYP PFNGLMATERIALF) (GLenum face, GLenum pname, GLfloat param);
#define glMaterialf pfn_glMaterialf
GLAPI PFNGLMATERIALF pfn_glMaterialf;
typedef void (APIENTRYP PFNGLMATERIALFV) (GLenum face, GLenum pname, const GLfloat *params);
#define glMaterialfv pfn_glMaterialfv
GLAPI PFNGLMATERIALFV pfn_glMaterialfv;
typedef void (APIENTRYP PFNGLMATERIALI) (GLenum face, GLenum pname, GLint param);
#define glMateriali pfn_glMateriali
GLAPI PFNGLMATERIALI pfn_glMateriali;
typedef void (APIENTRYP PFNGLMATERIALIV) (GLenum face, GLenum pname, const GLint *params);
#define glMaterialiv pfn_glMaterialiv
GLAPI PFNGLMATERIALIV pfn_glMaterialiv;
typedef void (APIENTRYP PFNGLMATRIXMODE) (GLenum mode);
#define glMatrixMode pfn_glMatrixMode
GLAPI PFNGLMATRIXMODE pfn_glMatrixMode;
typedef void (APIENTRYP PFNGLMULTMATRIXD) (const GLdouble *m);
#define glMultMatrixd pfn_glMultMatrixd
GLAPI PFNGLMULTMATRIXD pfn_glMultMatrixd;
typedef void (APIENTRYP PFNGLMULTMATRIXF) (const GLfloat *m);
#define glMultMatrixf pfn_glMultMatrixf
GLAPI PFNGLMULTMATRIXF pfn_glMultMatrixf;
typedef void (APIENTRYP PFNGLNEWLIST) (GLuint list, GLenum mode);
#define glNewList pfn_glNewList
GLAPI PFNGLNEWLIST pfn_glNewList;
typedef void (APIENTRYP PFNGLNORMAL3B) (GLbyte nx, GLbyte ny, GLbyte nz);
#define glNormal3b pfn_glNormal3b
GLAPI PFNGLNORMAL3B pfn_glNormal3b;
typedef void (APIENTRYP PFNGLNORMAL3BV) (const GLbyte *v);
#define glNormal3bv pfn_glNormal3bv
GLAPI PFNGLNORMAL3BV pfn_glNormal3bv;
typedef void (APIENTRYP PFNGLNORMAL3D) (GLdouble nx, GLdouble ny, GLdouble nz);
#define glNormal3d pfn_glNormal3d
GLAPI PFNGLNORMAL3D pfn_glNormal3d;
typedef void (APIENTRYP PFNGLNORMAL3DV) (const GLdouble *v);
#define glNormal3dv pfn_glNormal3dv
GLAPI PFNGLNORMAL3DV pfn_glNormal3dv;
typedef void (APIENTRYP PFNGLNORMAL3F) (GLfloat nx, GLfloat ny, GLfloat nz);
#define glNormal3f pfn_glNormal3f
GLAPI PFNGLNORMAL3F pfn_glNormal3f;
typedef void (APIENTRYP PFNGLNORMAL3FV) (const GLfloat *v);
#define glNormal3fv pfn_glNormal3fv
GLAPI PFNGLNORMAL3FV pfn_glNormal3fv;
typedef void (APIENTRYP PFNGLNORMAL3I) (GLint nx, GLint ny, GLint nz);
#define glNormal3i pfn_glNormal3i
GLAPI PFNGLNORMAL3I pfn_glNormal3i;
typedef void (APIENTRYP PFNGLNORMAL3IV) (const GLint *v);
#define glNormal3iv pfn_glNormal3iv
GLAPI PFNGLNORMAL3IV pfn_glNormal3iv;
typedef void (APIENTRYP PFNGLNORMAL3S) (GLshort nx, GLshort ny, GLshort nz);
#define glNormal3s pfn_glNormal3s
GLAPI PFNGLNORMAL3S pfn_glNormal3s;
typedef void (APIENTRYP PFNGLNORMAL3SV) (const GLshort *v);
#define glNormal3sv pfn_glNormal3sv
GLAPI PFNGLNORMAL3SV pfn_glNormal3sv;
typedef void (APIENTRYP PFNGLORTHO) (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
#define glOrtho pfn_glOrtho
GLAPI PFNGLORTHO pfn_glOrtho;
typedef void (APIENTRYP PFNGLPASSTHROUGH) (GLfloat token);
#define glPassThrough pfn_glPassThrough
GLAPI PFNGLPASSTHROUGH pfn_glPassThrough;
typedef void (APIENTRYP PFNGLPIXELMAPFV) (GLenum map_, GLsizei mapsize, const GLfloat *values);
#define glPixelMapfv pfn_glPixelMapfv
GLAPI PFNGLPIXELMAPFV pfn_glPixelMapfv;
typedef void (APIENTRYP PFNGLPIXELMAPUIV) (GLenum map_, GLsizei mapsize, const GLuint *values);
#define glPixelMapuiv pfn_glPixelMapuiv
GLAPI PFNGLPIXELMAPUIV pfn_glPixelMapuiv;
typedef void (APIENTRYP PFNGLPIXELMAPUSV) (GLenum map_, GLsizei mapsize, const GLushort *values);
#define glPixelMapusv pfn_glPixelMapusv
GLAPI PFNGLPIXELMAPUSV pfn_glPixelMapusv;
typedef void (APIENTRYP PFNGLPIXELSTOREF) (GLenum pname, GLfloat param);
#define glPixelStoref pfn_glPixelStoref
GLAPI PFNGLPIXELSTOREF pfn_glPixelStoref;
typedef void (APIENTRYP PFNGLPIXELSTOREI) (GLenum pname, GLint param);
#define glPixelStorei pfn_glPixelStorei
GLAPI PFNGLPIXELSTOREI pfn_glPixelStorei;
typedef void (APIENTRYP PFNGLPIXELTRANSFERF) (GLenum pname, GLfloat param);
#define glPixelTransferf pfn_glPixelTransferf
GLAPI PFNGLPIXELTRANSFERF pfn_glPixelTransferf;
typedef void (APIENTRYP PFNGLPIXELTRANSFERI) (GLenum pname, GLint param);
#define glPixelTransferi pfn_glPixelTransferi
GLAPI PFNGLPIXELTRANSFERI pfn_glPixelTransferi;
typedef void (APIENTRYP PFNGLPIXELZOOM) (GLfloat xfactor, GLfloat yfactor);
#define glPixelZoom pfn_glPixelZoom
GLAPI PFNGLPIXELZOOM pfn_glPixelZoom;
typedef void (APIENTRYP PFNGLPOINTSIZE) (GLfloat size);
#define glPointSize pfn_glPointSize
GLAPI PFNGLPOINTSIZE pfn_glPointSize;
typedef void (APIENTRYP PFNGLPOLYGONMODE) (GLenum face, GLenum mode);
#define glPolygonMode pfn_glPolygonMode
GLAPI PFNGLPOLYGONMODE pfn_glPolygonMode;
typedef void (APIENTRYP PFNGLPOLYGONSTIPPLE) (const GLubyte *mask);
#define glPolygonStipple pfn_glPolygonStipple
GLAPI PFNGLPOLYGONSTIPPLE pfn_glPolygonStipple;
typedef void (APIENTRYP PFNGLPOPATTRIB) ();
#define glPopAttrib pfn_glPopAttrib
GLAPI PFNGLPOPATTRIB pfn_glPopAttrib;
typedef void (APIENTRYP PFNGLPOPMATRIX) ();
#define glPopMatrix pfn_glPopMatrix
GLAPI PFNGLPOPMATRIX pfn_glPopMatrix;
typedef void (APIENTRYP PFNGLPOPNAME) ();
#define glPopName pfn_glPopName
GLAPI PFNGLPOPNAME pfn_glPopName;
typedef void (APIENTRYP PFNGLPUSHATTRIB) (GLbitfield mask);
#define glPushAttrib pfn_glPushAttrib
GLAPI PFNGLPUSHATTRIB pfn_glPushAttrib;
typedef void (APIENTRYP PFNGLPUSHMATRIX) ();
#define glPushMatrix pfn_glPushMatrix
GLAPI PFNGLPUSHMATRIX pfn_glPushMatrix;
typedef void (APIENTRYP PFNGLPUSHNAME) (GLuint name);
#define glPushName pfn_glPushName
GLAPI PFNGLPUSHNAME pfn_glPushName;
typedef void (APIENTRYP PFNGLRASTERPOS2D) (GLdouble x, GLdouble y);
#define glRasterPos2d pfn_glRasterPos2d
GLAPI PFNGLRASTERPOS2D pfn_glRasterPos2d;
typedef void (APIENTRYP PFNGLRASTERPOS2DV) (const GLdouble *v);
#define glRasterPos2dv pfn_glRasterPos2dv
GLAPI PFNGLRASTERPOS2DV pfn_glRasterPos2dv;
typedef void (APIENTRYP PFNGLRASTERPOS2F) (GLfloat x, GLfloat y);
#define glRasterPos2f pfn_glRasterPos2f
GLAPI PFNGLRASTERPOS2F pfn_glRasterPos2f;
typedef void (APIENTRYP PFNGLRASTERPOS2FV) (const GLfloat *v);
#define glRasterPos2fv pfn_glRasterPos2fv
GLAPI PFNGLRASTERPOS2FV pfn_glRasterPos2fv;
typedef void (APIENTRYP PFNGLRASTERPOS2I) (GLint x, GLint y);
#define glRasterPos2i pfn_glRasterPos2i
GLAPI PFNGLRASTERPOS2I pfn_glRasterPos2i;
typedef void (APIENTRYP PFNGLRASTERPOS2IV) (const GLint *v);
#define glRasterPos2iv pfn_glRasterPos2iv
GLAPI PFNGLRASTERPOS2IV pfn_glRasterPos2iv;
typedef void (APIENTRYP PFNGLRASTERPOS2S) (GLshort x, GLshort y);
#define glRasterPos2s pfn_glRasterPos2s
GLAPI PFNGLRASTERPOS2S pfn_glRasterPos2s;
typedef void (APIENTRYP PFNGLRASTERPOS2SV) (const GLshort *v);
#define glRasterPos2sv pfn_glRasterPos2sv
GLAPI PFNGLRASTERPOS2SV pfn_glRasterPos2sv;
typedef void (APIENTRYP PFNGLRASTERPOS3D) (GLdouble x, GLdouble y, GLdouble z);
#define glRasterPos3d pfn_glRasterPos3d
GLAPI PFNGLRASTERPOS3D pfn_glRasterPos3d;
typedef void (APIENTRYP PFNGLRASTERPOS3DV) (const GLdouble *v);
#define glRasterPos3dv pfn_glRasterPos3dv
GLAPI PFNGLRASTERPOS3DV pfn_glRasterPos3dv;
typedef void (APIENTRYP PFNGLRASTERPOS3F) (GLfloat x, GLfloat y, GLfloat z);
#define glRasterPos3f pfn_glRasterPos3f
GLAPI PFNGLRASTERPOS3F pfn_glRasterPos3f;
typedef void (APIENTRYP PFNGLRASTERPOS3FV) (const GLfloat *v);
#define glRasterPos3fv pfn_glRasterPos3fv
GLAPI PFNGLRASTERPOS3FV pfn_glRasterPos3fv;
typedef void (APIENTRYP PFNGLRASTERPOS3I) (GLint x, GLint y, GLint z);
#define glRasterPos3i pfn_glRasterPos3i
GLAPI PFNGLRASTERPOS3I pfn_glRasterPos3i;
typedef void (APIENTRYP PFNGLRASTERPOS3IV) (const GLint *v);
#define glRasterPos3iv pfn_glRasterPos3iv
GLAPI PFNGLRASTERPOS3IV pfn_glRasterPos3iv;
typedef void (APIENTRYP PFNGLRASTERPOS3S) (GLshort x, GLshort y, GLshort z);
#define glRasterPos3s pfn_glRasterPos3s
GLAPI PFNGLRASTERPOS3S pfn_glRasterPos3s;
typedef void (APIENTRYP PFNGLRASTERPOS3SV) (const GLshort *v);
#define glRasterPos3sv pfn_glRasterPos3sv
GLAPI PFNGLRASTERPOS3SV pfn_glRasterPos3sv;
typedef void (APIENTRYP PFNGLRASTERPOS4D) (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
#define glRasterPos4d pfn_glRasterPos4d
GLAPI PFNGLRASTERPOS4D pfn_glRasterPos4d;
typedef void (APIENTRYP PFNGLRASTERPOS4DV) (const GLdouble *v);
#define glRasterPos4dv pfn_glRasterPos4dv
GLAPI PFNGLRASTERPOS4DV pfn_glRasterPos4dv;
typedef void (APIENTRYP PFNGLRASTERPOS4F) (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
#define glRasterPos4f pfn_glRasterPos4f
GLAPI PFNGLRASTERPOS4F pfn_glRasterPos4f;
typedef void (APIENTRYP PFNGLRASTERPOS4FV) (const GLfloat *v);
#define glRasterPos4fv pfn_glRasterPos4fv
GLAPI PFNGLRASTERPOS4FV pfn_glRasterPos4fv;
typedef void (APIENTRYP PFNGLRASTERPOS4I) (GLint x, GLint y, GLint z, GLint w);
#define glRasterPos4i pfn_glRasterPos4i
GLAPI PFNGLRASTERPOS4I pfn_glRasterPos4i;
typedef void (APIENTRYP PFNGLRASTERPOS4IV) (const GLint *v);
#define glRasterPos4iv pfn_glRasterPos4iv
GLAPI PFNGLRASTERPOS4IV pfn_glRasterPos4iv;
typedef void (APIENTRYP PFNGLRASTERPOS4S) (GLshort x, GLshort y, GLshort z, GLshort w);
#define glRasterPos4s pfn_glRasterPos4s
GLAPI PFNGLRASTERPOS4S pfn_glRasterPos4s;
typedef void (APIENTRYP PFNGLRASTERPOS4SV) (const GLshort *v);
#define glRasterPos4sv pfn_glRasterPos4sv
GLAPI PFNGLRASTERPOS4SV pfn_glRasterPos4sv;
typedef void (APIENTRYP PFNGLREADBUFFER) (GLenum src);
#define glReadBuffer pfn_glReadBuffer
GLAPI PFNGLREADBUFFER pfn_glReadBuffer;
typedef void (APIENTRYP PFNGLREADPIXELS) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type_, void *pixels);
#define glReadPixels pfn_glReadPixels
GLAPI PFNGLREADPIXELS pfn_glReadPixels;
typedef void (APIENTRYP PFNGLRECTD) (GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
#define glRectd pfn_glRectd
GLAPI PFNGLRECTD pfn_glRectd;
typedef void (APIENTRYP PFNGLRECTDV) (const GLdouble *v1, const GLdouble *v2);
#define glRectdv pfn_glRectdv
GLAPI PFNGLRECTDV pfn_glRectdv;
typedef void (APIENTRYP PFNGLRECTF) (GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
#define glRectf pfn_glRectf
GLAPI PFNGLRECTF pfn_glRectf;
typedef void (APIENTRYP PFNGLRECTFV) (const GLfloat *v1, const GLfloat *v2);
#define glRectfv pfn_glRectfv
GLAPI PFNGLRECTFV pfn_glRectfv;
typedef void (APIENTRYP PFNGLRECTI) (GLint x1, GLint y1, GLint x2, GLint y2);
#define glRecti pfn_glRecti
GLAPI PFNGLRECTI pfn_glRecti;
typedef void (APIENTRYP PFNGLRECTIV) (const GLint *v1, const GLint *v2);
#define glRectiv pfn_glRectiv
GLAPI PFNGLRECTIV pfn_glRectiv;
typedef void (APIENTRYP PFNGLRECTS) (GLshort x1, GLshort y1, GLshort x2, GLshort y2);
#define glRects pfn_glRects
GLAPI PFNGLRECTS pfn_glRects;
typedef void (APIENTRYP PFNGLRECTSV) (const GLshort *v1, const GLshort *v2);
#define glRectsv pfn_glRectsv
GLAPI PFNGLRECTSV pfn_glRectsv;
typedef GLint (APIENTRYP PFNGLRENDERMODE) (GLenum mode);
#define glRenderMode pfn_glRenderMode
GLAPI PFNGLRENDERMODE pfn_glRenderMode;
typedef void (APIENTRYP PFNGLROTATED) (GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
#define glRotated pfn_glRotated
GLAPI PFNGLROTATED pfn_glRotated;
typedef void (APIENTRYP PFNGLROTATEF) (GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
#define glRotatef pfn_glRotatef
GLAPI PFNGLROTATEF pfn_glRotatef;
typedef void (APIENTRYP PFNGLSCALED) (GLdouble x, GLdouble y, GLdouble z);
#define glScaled pfn_glScaled
GLAPI PFNGLSCALED pfn_glScaled;
typedef void (APIENTRYP PFNGLSCALEF) (GLfloat x, GLfloat y, GLfloat z);
#define glScalef pfn_glScalef
GLAPI PFNGLSCALEF pfn_glScalef;
typedef void (APIENTRYP PFNGLSCISSOR) (GLint x, GLint y, GLsizei width, GLsizei height);
#define glScissor pfn_glScissor
GLAPI PFNGLSCISSOR pfn_glScissor;
typedef void (APIENTRYP PFNGLSELECTBUFFER) (GLsizei size, GLuint *buffer);
#define glSelectBuffer pfn_glSelectBuffer
GLAPI PFNGLSELECTBUFFER pfn_glSelectBuffer;
typedef void (APIENTRYP PFNGLSHADEMODEL) (GLenum mode);
#define glShadeModel pfn_glShadeModel
GLAPI PFNGLSHADEMODEL pfn_glShadeModel;
typedef void (APIENTRYP PFNGLSTENCILFUNC) (GLenum func_, GLint ref, GLuint mask);
#define glStencilFunc pfn_glStencilFunc
GLAPI PFNGLSTENCILFUNC pfn_glStencilFunc;
typedef void (APIENTRYP PFNGLSTENCILMASK) (GLuint mask);
#define glStencilMask pfn_glStencilMask
GLAPI PFNGLSTENCILMASK pfn_glStencilMask;
typedef void (APIENTRYP PFNGLSTENCILOP) (GLenum fail, GLenum zfail, GLenum zpass);
#define glStencilOp pfn_glStencilOp
GLAPI PFNGLSTENCILOP pfn_glStencilOp;
typedef void (APIENTRYP PFNGLTEXCOORD1D) (GLdouble s);
#define glTexCoord1d pfn_glTexCoord1d
GLAPI PFNGLTEXCOORD1D pfn_glTexCoord1d;
typedef void (APIENTRYP PFNGLTEXCOORD1DV) (const GLdouble *v);
#define glTexCoord1dv pfn_glTexCoord1dv
GLAPI PFNGLTEXCOORD1DV pfn_glTexCoord1dv;
typedef void (APIENTRYP PFNGLTEXCOORD1F) (GLfloat s);
#define glTexCoord1f pfn_glTexCoord1f
GLAPI PFNGLTEXCOORD1F pfn_glTexCoord1f;
typedef void (APIENTRYP PFNGLTEXCOORD1FV) (const GLfloat *v);
#define glTexCoord1fv pfn_glTexCoord1fv
GLAPI PFNGLTEXCOORD1FV pfn_glTexCoord1fv;
typedef void (APIENTRYP PFNGLTEXCOORD1I) (GLint s);
#define glTexCoord1i pfn_glTexCoord1i
GLAPI PFNGLTEXCOORD1I pfn_glTexCoord1i;
typedef void (APIENTRYP PFNGLTEXCOORD1IV) (const GLint *v);
#define glTexCoord1iv pfn_glTexCoord1iv
GLAPI PFNGLTEXCOORD1IV pfn_glTexCoord1iv;
typedef void (APIENTRYP PFNGLTEXCOORD1S) (GLshort s);
#define glTexCoord1s pfn_glTexCoord1s
GLAPI PFNGLTEXCOORD1S pfn_glTexCoord1s;
typedef void (APIENTRYP PFNGLTEXCOORD1SV) (const GLshort *v);
#define glTexCoord1sv pfn_glTexCoord1sv
GLAPI PFNGLTEXCOORD1SV pfn_glTexCoord1sv;
typedef void (APIENTRYP PFNGLTEXCOORD2D) (GLdouble s, GLdouble t);
#define glTexCoord2d pfn_glTexCoord2d
GLAPI PFNGLTEXCOORD2D pfn_glTexCoord2d;
typedef void (APIENTRYP PFNGLTEXCOORD2DV) (const GLdouble *v);
#define glTexCoord2dv pfn_glTexCoord2dv
GLAPI PFNGLTEXCOORD2DV pfn_glTexCoord2dv;
typedef void (APIENTRYP PFNGLTEXCOORD2F) (GLfloat s, GLfloat t);
#define glTexCoord2f pfn_glTexCoord2f
GLAPI PFNGLTEXCOORD2F pfn_glTexCoord2f;
typedef void (APIENTRYP PFNGLTEXCOORD2FV) (const GLfloat *v);
#define glTexCoord2fv pfn_glTexCoord2fv
GLAPI PFNGLTEXCOORD2FV pfn_glTexCoord2fv;
typedef void (APIENTRYP PFNGLTEXCOORD2I) (GLint s, GLint t);
#define glTexCoord2i pfn_glTexCoord2i
GLAPI PFNGLTEXCOORD2I pfn_glTexCoord2i;
typedef void (APIENTRYP PFNGLTEXCOORD2IV) (const GLint *v);
#define glTexCoord2iv pfn_glTexCoord2iv
GLAPI PFNGLTEXCOORD2IV pfn_glTexCoord2iv;
typedef void (APIENTRYP PFNGLTEXCOORD2S) (GLshort s, GLshort t);
#define glTexCoord2s pfn_glTexCoord2s
GLAPI PFNGLTEXCOORD2S pfn_glTexCoord2s;
typedef void (APIENTRYP PFNGLTEXCOORD2SV) (const GLshort *v);
#define glTexCoord2sv pfn_glTexCoord2sv
GLAPI PFNGLTEXCOORD2SV pfn_glTexCoord2sv;
typedef void (APIENTRYP PFNGLTEXCOORD3D) (GLdouble s, GLdouble t, GLdouble r);
#define glTexCoord3d pfn_glTexCoord3d
GLAPI PFNGLTEXCOORD3D pfn_glTexCoord3d;
typedef void (APIENTRYP PFNGLTEXCOORD3DV) (const GLdouble *v);
#define glTexCoord3dv pfn_glTexCoord3dv
GLAPI PFNGLTEXCOORD3DV pfn_glTexCoord3dv;
typedef void (APIENTRYP PFNGLTEXCOORD3F) (GLfloat s, GLfloat t, GLfloat r);
#define glTexCoord3f pfn_glTexCoord3f
GLAPI PFNGLTEXCOORD3F pfn_glTexCoord3f;
typedef void (APIENTRYP PFNGLTEXCOORD3FV) (const GLfloat *v);
#define glTexCoord3fv pfn_glTexCoord3fv
GLAPI PFNGLTEXCOORD3FV pfn_glTexCoord3fv;
typedef void (APIENTRYP PFNGLTEXCOORD3I) (GLint s, GLint t, GLint r);
#define glTexCoord3i pfn_glTexCoord3i
GLAPI PFNGLTEXCOORD3I pfn_glTexCoord3i;
typedef void (APIENTRYP PFNGLTEXCOORD3IV) (const GLint *v);
#define glTexCoord3iv pfn_glTexCoord3iv
GLAPI PFNGLTEXCOORD3IV pfn_glTexCoord3iv;
typedef void (APIENTRYP PFNGLTEXCOORD3S) (GLshort s, GLshort t, GLshort r);
#define glTexCoord3s pfn_glTexCoord3s
GLAPI PFNGLTEXCOORD3S pfn_glTexCoord3s;
typedef void (APIENTRYP PFNGLTEXCOORD3SV) (const GLshort *v);
#define glTexCoord3sv pfn_glTexCoord3sv
GLAPI PFNGLTEXCOORD3SV pfn_glTexCoord3sv;
typedef void (APIENTRYP PFNGLTEXCOORD4D) (GLdouble s, GLdouble t, GLdouble r, GLdouble q);
#define glTexCoord4d pfn_glTexCoord4d
GLAPI PFNGLTEXCOORD4D pfn_glTexCoord4d;
typedef void (APIENTRYP PFNGLTEXCOORD4DV) (const GLdouble *v);
#define glTexCoord4dv pfn_glTexCoord4dv
GLAPI PFNGLTEXCOORD4DV pfn_glTexCoord4dv;
typedef void (APIENTRYP PFNGLTEXCOORD4F) (GLfloat s, GLfloat t, GLfloat r, GLfloat q);
#define glTexCoord4f pfn_glTexCoord4f
GLAPI PFNGLTEXCOORD4F pfn_glTexCoord4f;
typedef void (APIENTRYP PFNGLTEXCOORD4FV) (const GLfloat *v);
#define glTexCoord4fv pfn_glTexCoord4fv
GLAPI PFNGLTEXCOORD4FV pfn_glTexCoord4fv;
typedef void (APIENTRYP PFNGLTEXCOORD4I) (GLint s, GLint t, GLint r, GLint q);
#define glTexCoord4i pfn_glTexCoord4i
GLAPI PFNGLTEXCOORD4I pfn_glTexCoord4i;
typedef void (APIENTRYP PFNGLTEXCOORD4IV) (const GLint *v);
#define glTexCoord4iv pfn_glTexCoord4iv
GLAPI PFNGLTEXCOORD4IV pfn_glTexCoord4iv;
typedef void (APIENTRYP PFNGLTEXCOORD4S) (GLshort s, GLshort t, GLshort r, GLshort q);
#define glTexCoord4s pfn_glTexCoord4s
GLAPI PFNGLTEXCOORD4S pfn_glTexCoord4s;
typedef void (APIENTRYP PFNGLTEXCOORD4SV) (const GLshort *v);
#define glTexCoord4sv pfn_glTexCoord4sv
GLAPI PFNGLTEXCOORD4SV pfn_glTexCoord4sv;
typedef void (APIENTRYP PFNGLTEXENVF) (GLenum target, GLenum pname, GLfloat param);
#define glTexEnvf pfn_glTexEnvf
GLAPI PFNGLTEXENVF pfn_glTexEnvf;
typedef void (APIENTRYP PFNGLTEXENVFV) (GLenum target, GLenum pname, const GLfloat *params);
#define glTexEnvfv pfn_glTexEnvfv
GLAPI PFNGLTEXENVFV pfn_glTexEnvfv;
typedef void (APIENTRYP PFNGLTEXENVI) (GLenum target, GLenum pname, GLint param);
#define glTexEnvi pfn_glTexEnvi
GLAPI PFNGLTEXENVI pfn_glTexEnvi;
typedef void (APIENTRYP PFNGLTEXENVIV) (GLenum target, GLenum pname, const GLint *params);
#define glTexEnviv pfn_glTexEnviv
GLAPI PFNGLTEXENVIV pfn_glTexEnviv;
typedef void (APIENTRYP PFNGLTEXGEND) (GLenum coord, GLenum pname, GLdouble param);
#define glTexGend pfn_glTexGend
GLAPI PFNGLTEXGEND pfn_glTexGend;
typedef void (APIENTRYP PFNGLTEXGENDV) (GLenum coord, GLenum pname, const GLdouble *params);
#define glTexGendv pfn_glTexGendv
GLAPI PFNGLTEXGENDV pfn_glTexGendv;
typedef void (APIENTRYP PFNGLTEXGENF) (GLenum coord, GLenum pname, GLfloat param);
#define glTexGenf pfn_glTexGenf
GLAPI PFNGLTEXGENF pfn_glTexGenf;
typedef void (APIENTRYP PFNGLTEXGENFV) (GLenum coord, GLenum pname, const GLfloat *params);
#define glTexGenfv pfn_glTexGenfv
GLAPI PFNGLTEXGENFV pfn_glTexGenfv;
typedef void (APIENTRYP PFNGLTEXGENI) (GLenum coord, GLenum pname, GLint param);
#define glTexGeni pfn_glTexGeni
GLAPI PFNGLTEXGENI pfn_glTexGeni;
typedef void (APIENTRYP PFNGLTEXGENIV) (GLenum coord, GLenum pname, const GLint *params);
#define glTexGeniv pfn_glTexGeniv
GLAPI PFNGLTEXGENIV pfn_glTexGeniv;
typedef void (APIENTRYP PFNGLTEXIMAGE1D) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type_, const void *pixels);
#define glTexImage1D pfn_glTexImage1D
GLAPI PFNGLTEXIMAGE1D pfn_glTexImage1D;
typedef void (APIENTRYP PFNGLTEXIMAGE2D) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type_, const void *pixels);
#define glTexImage2D pfn_glTexImage2D
GLAPI PFNGLTEXIMAGE2D pfn_glTexImage2D;
typedef void (APIENTRYP PFNGLTEXPARAMETERF) (GLenum target, GLenum pname, GLfloat param);
#define glTexParameterf pfn_glTexParameterf
GLAPI PFNGLTEXPARAMETERF pfn_glTexParameterf;
typedef void (APIENTRYP PFNGLTEXPARAMETERFV) (GLenum target, GLenum pname, const GLfloat *params);
#define glTexParameterfv pfn_glTexParameterfv
GLAPI PFNGLTEXPARAMETERFV pfn_glTexParameterfv;
typedef void (APIENTRYP PFNGLTEXPARAMETERI) (GLenum target, GLenum pname, GLint param);
#define glTexParameteri pfn_glTexParameteri
GLAPI PFNGLTEXPARAMETERI pfn_glTexParameteri;
typedef void (APIENTRYP PFNGLTEXPARAMETERIV) (GLenum target, GLenum pname, const GLint *params);
#define glTexParameteriv pfn_glTexParameteriv
GLAPI PFNGLTEXPARAMETERIV pfn_glTexParameteriv;
typedef void (APIENTRYP PFNGLTRANSLATED) (GLdouble x, GLdouble y, GLdouble z);
#define glTranslated pfn_glTranslated
GLAPI PFNGLTRANSLATED pfn_glTranslated;
typedef void (APIENTRYP PFNGLTRANSLATEF) (GLfloat x, GLfloat y, GLfloat z);
#define glTranslatef pfn_glTranslatef
GLAPI PFNGLTRANSLATEF pfn_glTranslatef;
typedef void (APIENTRYP PFNGLVERTEX2D) (GLdouble x, GLdouble y);
#define glVertex2d pfn_glVertex2d
GLAPI PFNGLVERTEX2D pfn_glVertex2d;
typedef void (APIENTRYP PFNGLVERTEX2DV) (const GLdouble *v);
#define glVertex2dv pfn_glVertex2dv
GLAPI PFNGLVERTEX2DV pfn_glVertex2dv;
typedef void (APIENTRYP PFNGLVERTEX2F) (GLfloat x, GLfloat y);
#define glVertex2f pfn_glVertex2f
GLAPI PFNGLVERTEX2F pfn_glVertex2f;
typedef void (APIENTRYP PFNGLVERTEX2FV) (const GLfloat *v);
#define glVertex2fv pfn_glVertex2fv
GLAPI PFNGLVERTEX2FV pfn_glVertex2fv;
typedef void (APIENTRYP PFNGLVERTEX2I) (GLint x, GLint y);
#define glVertex2i pfn_glVertex2i
GLAPI PFNGLVERTEX2I pfn_glVertex2i;
typedef void (APIENTRYP PFNGLVERTEX2IV) (const GLint *v);
#define glVertex2iv pfn_glVertex2iv
GLAPI PFNGLVERTEX2IV pfn_glVertex2iv;
typedef void (APIENTRYP PFNGLVERTEX2S) (GLshort x, GLshort y);
#define glVertex2s pfn_glVertex2s
GLAPI PFNGLVERTEX2S pfn_glVertex2s;
typedef void (APIENTRYP PFNGLVERTEX2SV) (const GLshort *v);
#define glVertex2sv pfn_glVertex2sv
GLAPI PFNGLVERTEX2SV pfn_glVertex2sv;
typedef void (APIENTRYP PFNGLVERTEX3D) (GLdouble x, GLdouble y, GLdouble z);
#define glVertex3d pfn_glVertex3d
GLAPI PFNGLVERTEX3D pfn_glVertex3d;
typedef void (APIENTRYP PFNGLVERTEX3DV) (const GLdouble *v);
#define glVertex3dv pfn_glVertex3dv
GLAPI PFNGLVERTEX3DV pfn_glVertex3dv;
typedef void (APIENTRYP PFNGLVERTEX3F) (GLfloat x, GLfloat y, GLfloat z);
#define glVertex3f pfn_glVertex3f
GLAPI PFNGLVERTEX3F pfn_glVertex3f;
typedef void (APIENTRYP PFNGLVERTEX3FV) (const GLfloat *v);
#define glVertex3fv pfn_glVertex3fv
GLAPI PFNGLVERTEX3FV pfn_glVertex3fv;
typedef void (APIENTRYP PFNGLVERTEX3I) (GLint x, GLint y, GLint z);
#define glVertex3i pfn_glVertex3i
GLAPI PFNGLVERTEX3I pfn_glVertex3i;
typedef void (APIENTRYP PFNGLVERTEX3IV) (const GLint *v);
#define glVertex3iv pfn_glVertex3iv
GLAPI PFNGLVERTEX3IV pfn_glVertex3iv;
typedef void (APIENTRYP PFNGLVERTEX3S) (GLshort x, GLshort y, GLshort z);
#define glVertex3s pfn_glVertex3s
GLAPI PFNGLVERTEX3S pfn_glVertex3s;
typedef void (APIENTRYP PFNGLVERTEX3SV) (const GLshort *v);
#define glVertex3sv pfn_glVertex3sv
GLAPI PFNGLVERTEX3SV pfn_glVertex3sv;
typedef void (APIENTRYP PFNGLVERTEX4D) (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
#define glVertex4d pfn_glVertex4d
GLAPI PFNGLVERTEX4D pfn_glVertex4d;
typedef void (APIENTRYP PFNGLVERTEX4DV) (const GLdouble *v);
#define glVertex4dv pfn_glVertex4dv
GLAPI PFNGLVERTEX4DV pfn_glVertex4dv;
typedef void (APIENTRYP PFNGLVERTEX4F) (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
#define glVertex4f pfn_glVertex4f
GLAPI PFNGLVERTEX4F pfn_glVertex4f;
typedef void (APIENTRYP PFNGLVERTEX4FV) (const GLfloat *v);
#define glVertex4fv pfn_glVertex4fv
GLAPI PFNGLVERTEX4FV pfn_glVertex4fv;
typedef void (APIENTRYP PFNGLVERTEX4I) (GLint x, GLint y, GLint z, GLint w);
#define glVertex4i pfn_glVertex4i
GLAPI PFNGLVERTEX4I pfn_glVertex4i;
typedef void (APIENTRYP PFNGLVERTEX4IV) (const GLint *v);
#define glVertex4iv pfn_glVertex4iv
GLAPI PFNGLVERTEX4IV pfn_glVertex4iv;
typedef void (APIENTRYP PFNGLVERTEX4S) (GLshort x, GLshort y, GLshort z, GLshort w);
#define glVertex4s pfn_glVertex4s
GLAPI PFNGLVERTEX4S pfn_glVertex4s;
typedef void (APIENTRYP PFNGLVERTEX4SV) (const GLshort *v);
#define glVertex4sv pfn_glVertex4sv
GLAPI PFNGLVERTEX4SV pfn_glVertex4sv;
typedef void (APIENTRYP PFNGLVIEWPORT) (GLint x, GLint y, GLsizei width, GLsizei height);
#define glViewport pfn_glViewport
GLAPI PFNGLVIEWPORT pfn_glViewport;
typedef GLboolean (APIENTRYP PFNGLARETEXTURESRESIDENT) (GLsizei n, const GLuint *textures, GLboolean *residences);
#define glAreTexturesResident pfn_glAreTexturesResident
GLAPI PFNGLARETEXTURESRESIDENT pfn_glAreTexturesResident;
typedef void (APIENTRYP PFNGLARRAYELEMENT) (GLint i);
#define glArrayElement pfn_glArrayElement
GLAPI PFNGLARRAYELEMENT pfn_glArrayElement;
typedef void (APIENTRYP PFNGLBINDTEXTURE) (GLenum target, GLuint texture);
#define glBindTexture pfn_glBindTexture
GLAPI PFNGLBINDTEXTURE pfn_glBindTexture;
typedef void (APIENTRYP PFNGLCOLORPOINTER) (GLint size, GLenum type_, GLsizei stride, const void *pointer);
#define glColorPointer pfn_glColorPointer
GLAPI PFNGLCOLORPOINTER pfn_glColorPointer;
typedef void (APIENTRYP PFNGLCOPYTEXIMAGE1D) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
#define glCopyTexImage1D pfn_glCopyTexImage1D
GLAPI PFNGLCOPYTEXIMAGE1D pfn_glCopyTexImage1D;
typedef void (APIENTRYP PFNGLCOPYTEXIMAGE2D) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
#define glCopyTexImage2D pfn_glCopyTexImage2D
GLAPI PFNGLCOPYTEXIMAGE2D pfn_glCopyTexImage2D;
typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE1D) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
#define glCopyTexSubImage1D pfn_glCopyTexSubImage1D
GLAPI PFNGLCOPYTEXSUBIMAGE1D pfn_glCopyTexSubImage1D;
typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE2D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
#define glCopyTexSubImage2D pfn_glCopyTexSubImage2D
GLAPI PFNGLCOPYTEXSUBIMAGE2D pfn_glCopyTexSubImage2D;
typedef void (APIENTRYP PFNGLDELETETEXTURES) (GLsizei n, const GLuint *textures);
#define glDeleteTextures pfn_glDeleteTextures
GLAPI PFNGLDELETETEXTURES pfn_glDeleteTextures;
typedef void (APIENTRYP PFNGLDISABLECLIENTSTATE) (GLenum array);
#define glDisableClientState pfn_glDisableClientState
GLAPI PFNGLDISABLECLIENTSTATE pfn_glDisableClientState;
typedef void (APIENTRYP PFNGLDRAWARRAYS) (GLenum mode, GLint first, GLsizei count);
#define glDrawArrays pfn_glDrawArrays
GLAPI PFNGLDRAWARRAYS pfn_glDrawArrays;
typedef void (APIENTRYP PFNGLDRAWELEMENTS) (GLenum mode, GLsizei count, GLenum type_, const void *indices);
#define glDrawElements pfn_glDrawElements
GLAPI PFNGLDRAWELEMENTS pfn_glDrawElements;
typedef void (APIENTRYP PFNGLEDGEFLAGPOINTER) (GLsizei stride, const void *pointer);
#define glEdgeFlagPointer pfn_glEdgeFlagPointer
GLAPI PFNGLEDGEFLAGPOINTER pfn_glEdgeFlagPointer;
typedef void (APIENTRYP PFNGLENABLECLIENTSTATE) (GLenum array);
#define glEnableClientState pfn_glEnableClientState
GLAPI PFNGLENABLECLIENTSTATE pfn_glEnableClientState;
typedef void (APIENTRYP PFNGLGENTEXTURES) (GLsizei n, GLuint *textures);
#define glGenTextures pfn_glGenTextures
GLAPI PFNGLGENTEXTURES pfn_glGenTextures;
typedef void (APIENTRYP PFNGLGETPOINTERV) (GLenum pname, void **params);
#define glGetPointerv pfn_glGetPointerv
GLAPI PFNGLGETPOINTERV pfn_glGetPointerv;
typedef void (APIENTRYP PFNGLINDEXPOINTER) (GLenum type_, GLsizei stride, const void *pointer);
#define glIndexPointer pfn_glIndexPointer
GLAPI PFNGLINDEXPOINTER pfn_glIndexPointer;
typedef void (APIENTRYP PFNGLINDEXUB) (GLubyte c);
#define glIndexub pfn_glIndexub
GLAPI PFNGLINDEXUB pfn_glIndexub;
typedef void (APIENTRYP PFNGLINDEXUBV) (const GLubyte *c);
#define glIndexubv pfn_glIndexubv
GLAPI PFNGLINDEXUBV pfn_glIndexubv;
typedef void (APIENTRYP PFNGLINTERLEAVEDARRAYS) (GLenum format, GLsizei stride, const void *pointer);
#define glInterleavedArrays pfn_glInterleavedArrays
GLAPI PFNGLINTERLEAVEDARRAYS pfn_glInterleavedArrays;
typedef GLboolean (APIENTRYP PFNGLISTEXTURE) (GLuint texture);
#define glIsTexture pfn_glIsTexture
GLAPI PFNGLISTEXTURE pfn_glIsTexture;
typedef void (APIENTRYP PFNGLNORMALPOINTER) (GLenum type_, GLsizei stride, const void *pointer);
#define glNormalPointer pfn_glNormalPointer
GLAPI PFNGLNORMALPOINTER pfn_glNormalPointer;
typedef void (APIENTRYP PFNGLPOLYGONOFFSET) (GLfloat factor, GLfloat units);
#define glPolygonOffset pfn_glPolygonOffset
GLAPI PFNGLPOLYGONOFFSET pfn_glPolygonOffset;
typedef void (APIENTRYP PFNGLPOPCLIENTATTRIB) ();
#define glPopClientAttrib pfn_glPopClientAttrib
GLAPI PFNGLPOPCLIENTATTRIB pfn_glPopClientAttrib;
typedef void (APIENTRYP PFNGLPRIORITIZETEXTURES) (GLsizei n, const GLuint *textures, const GLfloat *priorities);
#define glPrioritizeTextures pfn_glPrioritizeTextures
GLAPI PFNGLPRIORITIZETEXTURES pfn_glPrioritizeTextures;
typedef void (APIENTRYP PFNGLPUSHCLIENTATTRIB) (GLbitfield mask);
#define glPushClientAttrib pfn_glPushClientAttrib
GLAPI PFNGLPUSHCLIENTATTRIB pfn_glPushClientAttrib;
typedef void (APIENTRYP PFNGLTEXCOORDPOINTER) (GLint size, GLenum type_, GLsizei stride, const void *pointer);
#define glTexCoordPointer pfn_glTexCoordPointer
GLAPI PFNGLTEXCOORDPOINTER pfn_glTexCoordPointer;
typedef void (APIENTRYP PFNGLTEXSUBIMAGE1D) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type_, const void *pixels);
#define glTexSubImage1D pfn_glTexSubImage1D
GLAPI PFNGLTEXSUBIMAGE1D pfn_glTexSubImage1D;
typedef void (APIENTRYP PFNGLTEXSUBIMAGE2D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type_, const void *pixels);
#define glTexSubImage2D pfn_glTexSubImage2D
GLAPI PFNGLTEXSUBIMAGE2D pfn_glTexSubImage2D;
typedef void (APIENTRYP PFNGLVERTEXPOINTER) (GLint size, GLenum type_, GLsizei stride, const void *pointer);
#define glVertexPointer pfn_glVertexPointer
GLAPI PFNGLVERTEXPOINTER pfn_glVertexPointer;
typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
#define glCopyTexSubImage3D pfn_glCopyTexSubImage3D
GLAPI PFNGLCOPYTEXSUBIMAGE3D pfn_glCopyTexSubImage3D;
typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTS) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type_, const void *indices);
#define glDrawRangeElements pfn_glDrawRangeElements
GLAPI PFNGLDRAWRANGEELEMENTS pfn_glDrawRangeElements;
typedef void (APIENTRYP PFNGLTEXIMAGE3D) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type_, const void *pixels);
#define glTexImage3D pfn_glTexImage3D
GLAPI PFNGLTEXIMAGE3D pfn_glTexImage3D;
typedef void (APIENTRYP PFNGLTEXSUBIMAGE3D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type_, const void *pixels);
#define glTexSubImage3D pfn_glTexSubImage3D
GLAPI PFNGLTEXSUBIMAGE3D pfn_glTexSubImage3D;
typedef void (APIENTRYP PFNGLACTIVETEXTURE) (GLenum texture);
#define glActiveTexture pfn_glActiveTexture
GLAPI PFNGLACTIVETEXTURE pfn_glActiveTexture;
typedef void (APIENTRYP PFNGLCLIENTACTIVETEXTURE) (GLenum texture);
#define glClientActiveTexture pfn_glClientActiveTexture
GLAPI PFNGLCLIENTACTIVETEXTURE pfn_glClientActiveTexture;
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1D) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
#define glCompressedTexImage1D pfn_glCompressedTexImage1D
GLAPI PFNGLCOMPRESSEDTEXIMAGE1D pfn_glCompressedTexImage1D;
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2D) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
#define glCompressedTexImage2D pfn_glCompressedTexImage2D
GLAPI PFNGLCOMPRESSEDTEXIMAGE2D pfn_glCompressedTexImage2D;
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3D) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
#define glCompressedTexImage3D pfn_glCompressedTexImage3D
GLAPI PFNGLCOMPRESSEDTEXIMAGE3D pfn_glCompressedTexImage3D;
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1D) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
#define glCompressedTexSubImage1D pfn_glCompressedTexSubImage1D
GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE1D pfn_glCompressedTexSubImage1D;
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
#define glCompressedTexSubImage2D pfn_glCompressedTexSubImage2D
GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE2D pfn_glCompressedTexSubImage2D;
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
#define glCompressedTexSubImage3D pfn_glCompressedTexSubImage3D
GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE3D pfn_glCompressedTexSubImage3D;
typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGE) (GLenum target, GLint level, void *img);
#define glGetCompressedTexImage pfn_glGetCompressedTexImage
GLAPI PFNGLGETCOMPRESSEDTEXIMAGE pfn_glGetCompressedTexImage;
typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXD) (const GLdouble *m);
#define glLoadTransposeMatrixd pfn_glLoadTransposeMatrixd
GLAPI PFNGLLOADTRANSPOSEMATRIXD pfn_glLoadTransposeMatrixd;
typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXF) (const GLfloat *m);
#define glLoadTransposeMatrixf pfn_glLoadTransposeMatrixf
GLAPI PFNGLLOADTRANSPOSEMATRIXF pfn_glLoadTransposeMatrixf;
typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXD) (const GLdouble *m);
#define glMultTransposeMatrixd pfn_glMultTransposeMatrixd
GLAPI PFNGLMULTTRANSPOSEMATRIXD pfn_glMultTransposeMatrixd;
typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXF) (const GLfloat *m);
#define glMultTransposeMatrixf pfn_glMultTransposeMatrixf
GLAPI PFNGLMULTTRANSPOSEMATRIXF pfn_glMultTransposeMatrixf;
typedef void (APIENTRYP PFNGLMULTITEXCOORD1D) (GLenum target, GLdouble s);
#define glMultiTexCoord1d pfn_glMultiTexCoord1d
GLAPI PFNGLMULTITEXCOORD1D pfn_glMultiTexCoord1d;
typedef void (APIENTRYP PFNGLMULTITEXCOORD1DV) (GLenum target, const GLdouble *v);
#define glMultiTexCoord1dv pfn_glMultiTexCoord1dv
GLAPI PFNGLMULTITEXCOORD1DV pfn_glMultiTexCoord1dv;
typedef void (APIENTRYP PFNGLMULTITEXCOORD1F) (GLenum target, GLfloat s);
#define glMultiTexCoord1f pfn_glMultiTexCoord1f
GLAPI PFNGLMULTITEXCOORD1F pfn_glMultiTexCoord1f;
typedef void (APIENTRYP PFNGLMULTITEXCOORD1FV) (GLenum target, const GLfloat *v);
#define glMultiTexCoord1fv pfn_glMultiTexCoord1fv
GLAPI PFNGLMULTITEXCOORD1FV pfn_glMultiTexCoord1fv;
typedef void (APIENTRYP PFNGLMULTITEXCOORD1I) (GLenum target, GLint s);
#define glMultiTexCoord1i pfn_glMultiTexCoord1i
GLAPI PFNGLMULTITEXCOORD1I pfn_glMultiTexCoord1i;
typedef void (APIENTRYP PFNGLMULTITEXCOORD1IV) (GLenum target, const GLint *v);
#define glMultiTexCoord1iv pfn_glMultiTexCoord1iv
GLAPI PFNGLMULTITEXCOORD1IV pfn_glMultiTexCoord1iv;
typedef void (APIENTRYP PFNGLMULTITEXCOORD1S) (GLenum target, GLshort s);
#define glMultiTexCoord1s pfn_glMultiTexCoord1s
GLAPI PFNGLMULTITEXCOORD1S pfn_glMultiTexCoord1s;
typedef void (APIENTRYP PFNGLMULTITEXCOORD1SV) (GLenum target, const GLshort *v);
#define glMultiTexCoord1sv pfn_glMultiTexCoord1sv
GLAPI PFNGLMULTITEXCOORD1SV pfn_glMultiTexCoord1sv;
typedef void (APIENTRYP PFNGLMULTITEXCOORD2D) (GLenum target, GLdouble s, GLdouble t);
#define glMultiTexCoord2d pfn_glMultiTexCoord2d
GLAPI PFNGLMULTITEXCOORD2D pfn_glMultiTexCoord2d;
typedef void (APIENTRYP PFNGLMULTITEXCOORD2DV) (GLenum target, const GLdouble *v);
#define glMultiTexCoord2dv pfn_glMultiTexCoord2dv
GLAPI PFNGLMULTITEXCOORD2DV pfn_glMultiTexCoord2dv;
typedef void (APIENTRYP PFNGLMULTITEXCOORD2F) (GLenum target, GLfloat s, GLfloat t);
#define glMultiTexCoord2f pfn_glMultiTexCoord2f
GLAPI PFNGLMULTITEXCOORD2F pfn_glMultiTexCoord2f;
typedef void (APIENTRYP PFNGLMULTITEXCOORD2FV) (GLenum target, const GLfloat *v);
#define glMultiTexCoord2fv pfn_glMultiTexCoord2fv
GLAPI PFNGLMULTITEXCOORD2FV pfn_glMultiTexCoord2fv;
typedef void (APIENTRYP PFNGLMULTITEXCOORD2I) (GLenum target, GLint s, GLint t);
#define glMultiTexCoord2i pfn_glMultiTexCoord2i
GLAPI PFNGLMULTITEXCOORD2I pfn_glMultiTexCoord2i;
typedef void (APIENTRYP PFNGLMULTITEXCOORD2IV) (GLenum target, const GLint *v);
#define glMultiTexCoord2iv pfn_glMultiTexCoord2iv
GLAPI PFNGLMULTITEXCOORD2IV pfn_glMultiTexCoord2iv;
typedef void (APIENTRYP PFNGLMULTITEXCOORD2S) (GLenum target, GLshort s, GLshort t);
#define glMultiTexCoord2s pfn_glMultiTexCoord2s
GLAPI PFNGLMULTITEXCOORD2S pfn_glMultiTexCoord2s;
typedef void (APIENTRYP PFNGLMULTITEXCOORD2SV) (GLenum target, const GLshort *v);
#define glMultiTexCoord2sv pfn_glMultiTexCoord2sv
GLAPI PFNGLMULTITEXCOORD2SV pfn_glMultiTexCoord2sv;
typedef void (APIENTRYP PFNGLMULTITEXCOORD3D) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
#define glMultiTexCoord3d pfn_glMultiTexCoord3d
GLAPI PFNGLMULTITEXCOORD3D pfn_glMultiTexCoord3d;
typedef void (APIENTRYP PFNGLMULTITEXCOORD3DV) (GLenum target, const GLdouble *v);
#define glMultiTexCoord3dv pfn_glMultiTexCoord3dv
GLAPI PFNGLMULTITEXCOORD3DV pfn_glMultiTexCoord3dv;
typedef void (APIENTRYP PFNGLMULTITEXCOORD3F) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
#define glMultiTexCoord3f pfn_glMultiTexCoord3f
GLAPI PFNGLMULTITEXCOORD3F pfn_glMultiTexCoord3f;
typedef void (APIENTRYP PFNGLMULTITEXCOORD3FV) (GLenum target, const GLfloat *v);
#define glMultiTexCoord3fv pfn_glMultiTexCoord3fv
GLAPI PFNGLMULTITEXCOORD3FV pfn_glMultiTexCoord3fv;
typedef void (APIENTRYP PFNGLMULTITEXCOORD3I) (GLenum target, GLint s, GLint t, GLint r);
#define glMultiTexCoord3i pfn_glMultiTexCoord3i
GLAPI PFNGLMULTITEXCOORD3I pfn_glMultiTexCoord3i;
typedef void (APIENTRYP PFNGLMULTITEXCOORD3IV) (GLenum target, const GLint *v);
#define glMultiTexCoord3iv pfn_glMultiTexCoord3iv
GLAPI PFNGLMULTITEXCOORD3IV pfn_glMultiTexCoord3iv;
typedef void (APIENTRYP PFNGLMULTITEXCOORD3S) (GLenum target, GLshort s, GLshort t, GLshort r);
#define glMultiTexCoord3s pfn_glMultiTexCoord3s
GLAPI PFNGLMULTITEXCOORD3S pfn_glMultiTexCoord3s;
typedef void (APIENTRYP PFNGLMULTITEXCOORD3SV) (GLenum target, const GLshort *v);
#define glMultiTexCoord3sv pfn_glMultiTexCoord3sv
GLAPI PFNGLMULTITEXCOORD3SV pfn_glMultiTexCoord3sv;
typedef void (APIENTRYP PFNGLMULTITEXCOORD4D) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
#define glMultiTexCoord4d pfn_glMultiTexCoord4d
GLAPI PFNGLMULTITEXCOORD4D pfn_glMultiTexCoord4d;
typedef void (APIENTRYP PFNGLMULTITEXCOORD4DV) (GLenum target, const GLdouble *v);
#define glMultiTexCoord4dv pfn_glMultiTexCoord4dv
GLAPI PFNGLMULTITEXCOORD4DV pfn_glMultiTexCoord4dv;
typedef void (APIENTRYP PFNGLMULTITEXCOORD4F) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
#define glMultiTexCoord4f pfn_glMultiTexCoord4f
GLAPI PFNGLMULTITEXCOORD4F pfn_glMultiTexCoord4f;
typedef void (APIENTRYP PFNGLMULTITEXCOORD4FV) (GLenum target, const GLfloat *v);
#define glMultiTexCoord4fv pfn_glMultiTexCoord4fv
GLAPI PFNGLMULTITEXCOORD4FV pfn_glMultiTexCoord4fv;
typedef void (APIENTRYP PFNGLMULTITEXCOORD4I) (GLenum target, GLint s, GLint t, GLint r, GLint q);
#define glMultiTexCoord4i pfn_glMultiTexCoord4i
GLAPI PFNGLMULTITEXCOORD4I pfn_glMultiTexCoord4i;
typedef void (APIENTRYP PFNGLMULTITEXCOORD4IV) (GLenum target, const GLint *v);
#define glMultiTexCoord4iv pfn_glMultiTexCoord4iv
GLAPI PFNGLMULTITEXCOORD4IV pfn_glMultiTexCoord4iv;
typedef void (APIENTRYP PFNGLMULTITEXCOORD4S) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
#define glMultiTexCoord4s pfn_glMultiTexCoord4s
GLAPI PFNGLMULTITEXCOORD4S pfn_glMultiTexCoord4s;
typedef void (APIENTRYP PFNGLMULTITEXCOORD4SV) (GLenum target, const GLshort *v);
#define glMultiTexCoord4sv pfn_glMultiTexCoord4sv
GLAPI PFNGLMULTITEXCOORD4SV pfn_glMultiTexCoord4sv;
typedef void (APIENTRYP PFNGLSAMPLECOVERAGE) (GLfloat value, GLboolean invert);
#define glSampleCoverage pfn_glSampleCoverage
GLAPI PFNGLSAMPLECOVERAGE pfn_glSampleCoverage;
typedef void (APIENTRYP PFNGLBLENDCOLOR) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
#define glBlendColor pfn_glBlendColor
GLAPI PFNGLBLENDCOLOR pfn_glBlendColor;
typedef void (APIENTRYP PFNGLBLENDEQUATION) (GLenum mode);
#define glBlendEquation pfn_glBlendEquation
GLAPI PFNGLBLENDEQUATION pfn_glBlendEquation;
typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATE) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
#define glBlendFuncSeparate pfn_glBlendFuncSeparate
GLAPI PFNGLBLENDFUNCSEPARATE pfn_glBlendFuncSeparate;
typedef void (APIENTRYP PFNGLFOGCOORDPOINTER) (GLenum type_, GLsizei stride, const void *pointer);
#define glFogCoordPointer pfn_glFogCoordPointer
GLAPI PFNGLFOGCOORDPOINTER pfn_glFogCoordPointer;
typedef void (APIENTRYP PFNGLFOGCOORDD) (GLdouble coord);
#define glFogCoordd pfn_glFogCoordd
GLAPI PFNGLFOGCOORDD pfn_glFogCoordd;
typedef void (APIENTRYP PFNGLFOGCOORDDV) (const GLdouble *coord);
#define glFogCoorddv pfn_glFogCoorddv
GLAPI PFNGLFOGCOORDDV pfn_glFogCoorddv;
typedef void (APIENTRYP PFNGLFOGCOORDF) (GLfloat coord);
#define glFogCoordf pfn_glFogCoordf
GLAPI PFNGLFOGCOORDF pfn_glFogCoordf;
typedef void (APIENTRYP PFNGLFOGCOORDFV) (const GLfloat *coord);
#define glFogCoordfv pfn_glFogCoordfv
GLAPI PFNGLFOGCOORDFV pfn_glFogCoordfv;
typedef void (APIENTRYP PFNGLMULTIDRAWARRAYS) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
#define glMultiDrawArrays pfn_glMultiDrawArrays
GLAPI PFNGLMULTIDRAWARRAYS pfn_glMultiDrawArrays;
typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTS) (GLenum mode, const GLsizei *count, GLenum type_, const void *const*indices, GLsizei drawcount);
#define glMultiDrawElements pfn_glMultiDrawElements
GLAPI PFNGLMULTIDRAWELEMENTS pfn_glMultiDrawElements;
typedef void (APIENTRYP PFNGLPOINTPARAMETERF) (GLenum pname, GLfloat param);
#define glPointParameterf pfn_glPointParameterf
GLAPI PFNGLPOINTPARAMETERF pfn_glPointParameterf;
typedef void (APIENTRYP PFNGLPOINTPARAMETERFV) (GLenum pname, const GLfloat *params);
#define glPointParameterfv pfn_glPointParameterfv
GLAPI PFNGLPOINTPARAMETERFV pfn_glPointParameterfv;
typedef void (APIENTRYP PFNGLPOINTPARAMETERI) (GLenum pname, GLint param);
#define glPointParameteri pfn_glPointParameteri
GLAPI PFNGLPOINTPARAMETERI pfn_glPointParameteri;
typedef void (APIENTRYP PFNGLPOINTPARAMETERIV) (GLenum pname, const GLint *params);
#define glPointParameteriv pfn_glPointParameteriv
GLAPI PFNGLPOINTPARAMETERIV pfn_glPointParameteriv;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3B) (GLbyte red, GLbyte green, GLbyte blue);
#define glSecondaryColor3b pfn_glSecondaryColor3b
GLAPI PFNGLSECONDARYCOLOR3B pfn_glSecondaryColor3b;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BV) (const GLbyte *v);
#define glSecondaryColor3bv pfn_glSecondaryColor3bv
GLAPI PFNGLSECONDARYCOLOR3BV pfn_glSecondaryColor3bv;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3D) (GLdouble red, GLdouble green, GLdouble blue);
#define glSecondaryColor3d pfn_glSecondaryColor3d
GLAPI PFNGLSECONDARYCOLOR3D pfn_glSecondaryColor3d;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DV) (const GLdouble *v);
#define glSecondaryColor3dv pfn_glSecondaryColor3dv
GLAPI PFNGLSECONDARYCOLOR3DV pfn_glSecondaryColor3dv;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3F) (GLfloat red, GLfloat green, GLfloat blue);
#define glSecondaryColor3f pfn_glSecondaryColor3f
GLAPI PFNGLSECONDARYCOLOR3F pfn_glSecondaryColor3f;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FV) (const GLfloat *v);
#define glSecondaryColor3fv pfn_glSecondaryColor3fv
GLAPI PFNGLSECONDARYCOLOR3FV pfn_glSecondaryColor3fv;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3I) (GLint red, GLint green, GLint blue);
#define glSecondaryColor3i pfn_glSecondaryColor3i
GLAPI PFNGLSECONDARYCOLOR3I pfn_glSecondaryColor3i;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IV) (const GLint *v);
#define glSecondaryColor3iv pfn_glSecondaryColor3iv
GLAPI PFNGLSECONDARYCOLOR3IV pfn_glSecondaryColor3iv;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3S) (GLshort red, GLshort green, GLshort blue);
#define glSecondaryColor3s pfn_glSecondaryColor3s
GLAPI PFNGLSECONDARYCOLOR3S pfn_glSecondaryColor3s;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SV) (const GLshort *v);
#define glSecondaryColor3sv pfn_glSecondaryColor3sv
GLAPI PFNGLSECONDARYCOLOR3SV pfn_glSecondaryColor3sv;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UB) (GLubyte red, GLubyte green, GLubyte blue);
#define glSecondaryColor3ub pfn_glSecondaryColor3ub
GLAPI PFNGLSECONDARYCOLOR3UB pfn_glSecondaryColor3ub;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBV) (const GLubyte *v);
#define glSecondaryColor3ubv pfn_glSecondaryColor3ubv
GLAPI PFNGLSECONDARYCOLOR3UBV pfn_glSecondaryColor3ubv;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UI) (GLuint red, GLuint green, GLuint blue);
#define glSecondaryColor3ui pfn_glSecondaryColor3ui
GLAPI PFNGLSECONDARYCOLOR3UI pfn_glSecondaryColor3ui;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIV) (const GLuint *v);
#define glSecondaryColor3uiv pfn_glSecondaryColor3uiv
GLAPI PFNGLSECONDARYCOLOR3UIV pfn_glSecondaryColor3uiv;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3US) (GLushort red, GLushort green, GLushort blue);
#define glSecondaryColor3us pfn_glSecondaryColor3us
GLAPI PFNGLSECONDARYCOLOR3US pfn_glSecondaryColor3us;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USV) (const GLushort *v);
#define glSecondaryColor3usv pfn_glSecondaryColor3usv
GLAPI PFNGLSECONDARYCOLOR3USV pfn_glSecondaryColor3usv;
typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTER) (GLint size, GLenum type_, GLsizei stride, const void *pointer);
#define glSecondaryColorPointer pfn_glSecondaryColorPointer
GLAPI PFNGLSECONDARYCOLORPOINTER pfn_glSecondaryColorPointer;
typedef void (APIENTRYP PFNGLWINDOWPOS2D) (GLdouble x, GLdouble y);
#define glWindowPos2d pfn_glWindowPos2d
GLAPI PFNGLWINDOWPOS2D pfn_glWindowPos2d;
typedef void (APIENTRYP PFNGLWINDOWPOS2DV) (const GLdouble *v);
#define glWindowPos2dv pfn_glWindowPos2dv
GLAPI PFNGLWINDOWPOS2DV pfn_glWindowPos2dv;
typedef void (APIENTRYP PFNGLWINDOWPOS2F) (GLfloat x, GLfloat y);
#define glWindowPos2f pfn_glWindowPos2f
GLAPI PFNGLWINDOWPOS2F pfn_glWindowPos2f;
typedef void (APIENTRYP PFNGLWINDOWPOS2FV) (const GLfloat *v);
#define glWindowPos2fv pfn_glWindowPos2fv
GLAPI PFNGLWINDOWPOS2FV pfn_glWindowPos2fv;
typedef void (APIENTRYP PFNGLWINDOWPOS2I) (GLint x, GLint y);
#define glWindowPos2i pfn_glWindowPos2i
GLAPI PFNGLWINDOWPOS2I pfn_glWindowPos2i;
typedef void (APIENTRYP PFNGLWINDOWPOS2IV) (const GLint *v);
#define glWindowPos2iv pfn_glWindowPos2iv
GLAPI PFNGLWINDOWPOS2IV pfn_glWindowPos2iv;
typedef void (APIENTRYP PFNGLWINDOWPOS2S) (GLshort x, GLshort y);
#define glWindowPos2s pfn_glWindowPos2s
GLAPI PFNGLWINDOWPOS2S pfn_glWindowPos2s;
typedef void (APIENTRYP PFNGLWINDOWPOS2SV) (const GLshort *v);
#define glWindowPos2sv pfn_glWindowPos2sv
GLAPI PFNGLWINDOWPOS2SV pfn_glWindowPos2sv;
typedef void (APIENTRYP PFNGLWINDOWPOS3D) (GLdouble x, GLdouble y, GLdouble z);
#define glWindowPos3d pfn_glWindowPos3d
GLAPI PFNGLWINDOWPOS3D pfn_glWindowPos3d;
typedef void (APIENTRYP PFNGLWINDOWPOS3DV) (const GLdouble *v);
#define glWindowPos3dv pfn_glWindowPos3dv
GLAPI PFNGLWINDOWPOS3DV pfn_glWindowPos3dv;
typedef void (APIENTRYP PFNGLWINDOWPOS3F) (GLfloat x, GLfloat y, GLfloat z);
#define glWindowPos3f pfn_glWindowPos3f
GLAPI PFNGLWINDOWPOS3F pfn_glWindowPos3f;
typedef void (APIENTRYP PFNGLWINDOWPOS3FV) (const GLfloat *v);
#define glWindowPos3fv pfn_glWindowPos3fv
GLAPI PFNGLWINDOWPOS3FV pfn_glWindowPos3fv;
typedef void (APIENTRYP PFNGLWINDOWPOS3I) (GLint x, GLint y, GLint z);
#define glWindowPos3i pfn_glWindowPos3i
GLAPI PFNGLWINDOWPOS3I pfn_glWindowPos3i;
typedef void (APIENTRYP PFNGLWINDOWPOS3IV) (const GLint *v);
#define glWindowPos3iv pfn_glWindowPos3iv
GLAPI PFNGLWINDOWPOS3IV pfn_glWindowPos3iv;
typedef void (APIENTRYP PFNGLWINDOWPOS3S) (GLshort x, GLshort y, GLshort z);
#define glWindowPos3s pfn_glWindowPos3s
GLAPI PFNGLWINDOWPOS3S pfn_glWindowPos3s;
typedef void (APIENTRYP PFNGLWINDOWPOS3SV) (const GLshort *v);
#define glWindowPos3sv pfn_glWindowPos3sv
GLAPI PFNGLWINDOWPOS3SV pfn_glWindowPos3sv;
typedef void (APIENTRYP PFNGLBEGINQUERY) (GLenum target, GLuint id);
#define glBeginQuery pfn_glBeginQuery
GLAPI PFNGLBEGINQUERY pfn_glBeginQuery;
typedef void (APIENTRYP PFNGLBINDBUFFER) (GLenum target, GLuint buffer);
#define glBindBuffer pfn_glBindBuffer
GLAPI PFNGLBINDBUFFER pfn_glBindBuffer;
typedef void (APIENTRYP PFNGLBUFFERDATA) (GLenum target, GLsizeiptr size, const void *data, GLenum usage);
#define glBufferData pfn_glBufferData
GLAPI PFNGLBUFFERDATA pfn_glBufferData;
typedef void (APIENTRYP PFNGLBUFFERSUBDATA) (GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
#define glBufferSubData pfn_glBufferSubData
GLAPI PFNGLBUFFERSUBDATA pfn_glBufferSubData;
typedef void (APIENTRYP PFNGLDELETEBUFFERS) (GLsizei n, const GLuint *buffers);
#define glDeleteBuffers pfn_glDeleteBuffers
GLAPI PFNGLDELETEBUFFERS pfn_glDeleteBuffers;
typedef void (APIENTRYP PFNGLDELETEQUERIES) (GLsizei n, const GLuint *ids);
#define glDeleteQueries pfn_glDeleteQueries
GLAPI PFNGLDELETEQUERIES pfn_glDeleteQueries;
typedef void (APIENTRYP PFNGLENDQUERY) (GLenum target);
#define glEndQuery pfn_glEndQuery
GLAPI PFNGLENDQUERY pfn_glEndQuery;
typedef void (APIENTRYP PFNGLGENBUFFERS) (GLsizei n, GLuint *buffers);
#define glGenBuffers pfn_glGenBuffers
GLAPI PFNGLGENBUFFERS pfn_glGenBuffers;
typedef void (APIENTRYP PFNGLGENQUERIES) (GLsizei n, GLuint *ids);
#define glGenQueries pfn_glGenQueries
GLAPI PFNGLGENQUERIES pfn_glGenQueries;
typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIV) (GLenum target, GLenum pname, GLint *params);
#define glGetBufferParameteriv pfn_glGetBufferParameteriv
GLAPI PFNGLGETBUFFERPARAMETERIV pfn_glGetBufferParameteriv;
typedef void (APIENTRYP PFNGLGETBUFFERPOINTERV) (GLenum target, GLenum pname, void **params);
#define glGetBufferPointerv pfn_glGetBufferPointerv
GLAPI PFNGLGETBUFFERPOINTERV pfn_glGetBufferPointerv;
typedef void (APIENTRYP PFNGLGETBUFFERSUBDATA) (GLenum target, GLintptr offset, GLsizeiptr size, void *data);
#define glGetBufferSubData pfn_glGetBufferSubData
GLAPI PFNGLGETBUFFERSUBDATA pfn_glGetBufferSubData;
typedef void (APIENTRYP PFNGLGETQUERYOBJECTIV) (GLuint id, GLenum pname, GLint *params);
#define glGetQueryObjectiv pfn_glGetQueryObjectiv
GLAPI PFNGLGETQUERYOBJECTIV pfn_glGetQueryObjectiv;
typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIV) (GLuint id, GLenum pname, GLuint *params);
#define glGetQueryObjectuiv pfn_glGetQueryObjectuiv
GLAPI PFNGLGETQUERYOBJECTUIV pfn_glGetQueryObjectuiv;
typedef void (APIENTRYP PFNGLGETQUERYIV) (GLenum target, GLenum pname, GLint *params);
#define glGetQueryiv pfn_glGetQueryiv
GLAPI PFNGLGETQUERYIV pfn_glGetQueryiv;
typedef GLboolean (APIENTRYP PFNGLISBUFFER) (GLuint buffer);
#define glIsBuffer pfn_glIsBuffer
GLAPI PFNGLISBUFFER pfn_glIsBuffer;
typedef GLboolean (APIENTRYP PFNGLISQUERY) (GLuint id);
#define glIsQuery pfn_glIsQuery
GLAPI PFNGLISQUERY pfn_glIsQuery;
typedef void * (APIENTRYP PFNGLMAPBUFFER) (GLenum target, GLenum access);
#define glMapBuffer pfn_glMapBuffer
GLAPI PFNGLMAPBUFFER pfn_glMapBuffer;
typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFER) (GLenum target);
#define glUnmapBuffer pfn_glUnmapBuffer
GLAPI PFNGLUNMAPBUFFER pfn_glUnmapBuffer;
typedef void (APIENTRYP PFNGLATTACHSHADER) (GLuint program, GLuint shader);
#define glAttachShader pfn_glAttachShader
GLAPI PFNGLATTACHSHADER pfn_glAttachShader;
typedef void (APIENTRYP PFNGLBINDATTRIBLOCATION) (GLuint program, GLuint index, const GLchar *name);
#define glBindAttribLocation pfn_glBindAttribLocation
GLAPI PFNGLBINDATTRIBLOCATION pfn_glBindAttribLocation;
typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATE) (GLenum modeRGB, GLenum modeAlpha);
#define glBlendEquationSeparate pfn_glBlendEquationSeparate
GLAPI PFNGLBLENDEQUATIONSEPARATE pfn_glBlendEquationSeparate;
typedef void (APIENTRYP PFNGLCOMPILESHADER) (GLuint shader);
#define glCompileShader pfn_glCompileShader
GLAPI PFNGLCOMPILESHADER pfn_glCompileShader;
typedef GLuint (APIENTRYP PFNGLCREATEPROGRAM) ();
#define glCreateProgram pfn_glCreateProgram
GLAPI PFNGLCREATEPROGRAM pfn_glCreateProgram;
typedef GLuint (APIENTRYP PFNGLCREATESHADER) (GLenum type_);
#define glCreateShader pfn_glCreateShader
GLAPI PFNGLCREATESHADER pfn_glCreateShader;
typedef void (APIENTRYP PFNGLDELETEPROGRAM) (GLuint program);
#define glDeleteProgram pfn_glDeleteProgram
GLAPI PFNGLDELETEPROGRAM pfn_glDeleteProgram;
typedef void (APIENTRYP PFNGLDELETESHADER) (GLuint shader);
#define glDeleteShader pfn_glDeleteShader
GLAPI PFNGLDELETESHADER pfn_glDeleteShader;
typedef void (APIENTRYP PFNGLDETACHSHADER) (GLuint program, GLuint shader);
#define glDetachShader pfn_glDetachShader
GLAPI PFNGLDETACHSHADER pfn_glDetachShader;
typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAY) (GLuint index);
#define glDisableVertexAttribArray pfn_glDisableVertexAttribArray
GLAPI PFNGLDISABLEVERTEXATTRIBARRAY pfn_glDisableVertexAttribArray;
typedef void (APIENTRYP PFNGLDRAWBUFFERS) (GLsizei n, const GLenum *bufs);
#define glDrawBuffers pfn_glDrawBuffers
GLAPI PFNGLDRAWBUFFERS pfn_glDrawBuffers;
typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAY) (GLuint index);
#define glEnableVertexAttribArray pfn_glEnableVertexAttribArray
GLAPI PFNGLENABLEVERTEXATTRIBARRAY pfn_glEnableVertexAttribArray;
typedef void (APIENTRYP PFNGLGETACTIVEATTRIB) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type_, GLchar *name);
#define glGetActiveAttrib pfn_glGetActiveAttrib
GLAPI PFNGLGETACTIVEATTRIB pfn_glGetActiveAttrib;
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORM) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type_, GLchar *name);
#define glGetActiveUniform pfn_glGetActiveUniform
GLAPI PFNGLGETACTIVEUNIFORM pfn_glGetActiveUniform;
typedef void (APIENTRYP PFNGLGETATTACHEDSHADERS) (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
#define glGetAttachedShaders pfn_glGetAttachedShaders
GLAPI PFNGLGETATTACHEDSHADERS pfn_glGetAttachedShaders;
typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATION) (GLuint program, const GLchar *name);
#define glGetAttribLocation pfn_glGetAttribLocation
GLAPI PFNGLGETATTRIBLOCATION pfn_glGetAttribLocation;
typedef void (APIENTRYP PFNGLGETPROGRAMINFOLOG) (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
#define glGetProgramInfoLog pfn_glGetProgramInfoLog
GLAPI PFNGLGETPROGRAMINFOLOG pfn_glGetProgramInfoLog;
typedef void (APIENTRYP PFNGLGETPROGRAMIV) (GLuint program, GLenum pname, GLint *params);
#define glGetProgramiv pfn_glGetProgramiv
GLAPI PFNGLGETPROGRAMIV pfn_glGetProgramiv;
typedef void (APIENTRYP PFNGLGETSHADERINFOLOG) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
#define glGetShaderInfoLog pfn_glGetShaderInfoLog
GLAPI PFNGLGETSHADERINFOLOG pfn_glGetShaderInfoLog;
typedef void (APIENTRYP PFNGLGETSHADERSOURCE) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
#define glGetShaderSource pfn_glGetShaderSource
GLAPI PFNGLGETSHADERSOURCE pfn_glGetShaderSource;
typedef void (APIENTRYP PFNGLGETSHADERIV) (GLuint shader, GLenum pname, GLint *params);
#define glGetShaderiv pfn_glGetShaderiv
GLAPI PFNGLGETSHADERIV pfn_glGetShaderiv;
typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATION) (GLuint program, const GLchar *name);
#define glGetUniformLocation pfn_glGetUniformLocation
GLAPI PFNGLGETUNIFORMLOCATION pfn_glGetUniformLocation;
typedef void (APIENTRYP PFNGLGETUNIFORMFV) (GLuint program, GLint location, GLfloat *params);
#define glGetUniformfv pfn_glGetUniformfv
GLAPI PFNGLGETUNIFORMFV pfn_glGetUniformfv;
typedef void (APIENTRYP PFNGLGETUNIFORMIV) (GLuint program, GLint location, GLint *params);
#define glGetUniformiv pfn_glGetUniformiv
GLAPI PFNGLGETUNIFORMIV pfn_glGetUniformiv;
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERV) (GLuint index, GLenum pname, void **pointer);
#define glGetVertexAttribPointerv pfn_glGetVertexAttribPointerv
GLAPI PFNGLGETVERTEXATTRIBPOINTERV pfn_glGetVertexAttribPointerv;
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDV) (GLuint index, GLenum pname, GLdouble *params);
#define glGetVertexAttribdv pfn_glGetVertexAttribdv
GLAPI PFNGLGETVERTEXATTRIBDV pfn_glGetVertexAttribdv;
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFV) (GLuint index, GLenum pname, GLfloat *params);
#define glGetVertexAttribfv pfn_glGetVertexAttribfv
GLAPI PFNGLGETVERTEXATTRIBFV pfn_glGetVertexAttribfv;
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIV) (GLuint index, GLenum pname, GLint *params);
#define glGetVertexAttribiv pfn_glGetVertexAttribiv
GLAPI PFNGLGETVERTEXATTRIBIV pfn_glGetVertexAttribiv;
typedef GLboolean (APIENTRYP PFNGLISPROGRAM) (GLuint program);
#define glIsProgram pfn_glIsProgram
GLAPI PFNGLISPROGRAM pfn_glIsProgram;
typedef GLboolean (APIENTRYP PFNGLISSHADER) (GLuint shader);
#define glIsShader pfn_glIsShader
GLAPI PFNGLISSHADER pfn_glIsShader;
typedef void (APIENTRYP PFNGLLINKPROGRAM) (GLuint program);
#define glLinkProgram pfn_glLinkProgram
GLAPI PFNGLLINKPROGRAM pfn_glLinkProgram;
typedef void (APIENTRYP PFNGLSHADERSOURCE) (GLuint shader, GLsizei count, const GLchar *const*string_, const GLint *length);
#define glShaderSource pfn_glShaderSource
GLAPI PFNGLSHADERSOURCE pfn_glShaderSource;
typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATE) (GLenum face, GLenum func_, GLint ref, GLuint mask);
#define glStencilFuncSeparate pfn_glStencilFuncSeparate
GLAPI PFNGLSTENCILFUNCSEPARATE pfn_glStencilFuncSeparate;
typedef void (APIENTRYP PFNGLSTENCILMASKSEPARATE) (GLenum face, GLuint mask);
#define glStencilMaskSeparate pfn_glStencilMaskSeparate
GLAPI PFNGLSTENCILMASKSEPARATE pfn_glStencilMaskSeparate;
typedef void (APIENTRYP PFNGLSTENCILOPSEPARATE) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
#define glStencilOpSeparate pfn_glStencilOpSeparate
GLAPI PFNGLSTENCILOPSEPARATE pfn_glStencilOpSeparate;
typedef void (APIENTRYP PFNGLUNIFORM1F) (GLint location, GLfloat v0);
#define glUniform1f pfn_glUniform1f
GLAPI PFNGLUNIFORM1F pfn_glUniform1f;
typedef void (APIENTRYP PFNGLUNIFORM1FV) (GLint location, GLsizei count, const GLfloat *value);
#define glUniform1fv pfn_glUniform1fv
GLAPI PFNGLUNIFORM1FV pfn_glUniform1fv;
typedef void (APIENTRYP PFNGLUNIFORM1I) (GLint location, GLint v0);
#define glUniform1i pfn_glUniform1i
GLAPI PFNGLUNIFORM1I pfn_glUniform1i;
typedef void (APIENTRYP PFNGLUNIFORM1IV) (GLint location, GLsizei count, const GLint *value);
#define glUniform1iv pfn_glUniform1iv
GLAPI PFNGLUNIFORM1IV pfn_glUniform1iv;
typedef void (APIENTRYP PFNGLUNIFORM2F) (GLint location, GLfloat v0, GLfloat v1);
#define glUniform2f pfn_glUniform2f
GLAPI PFNGLUNIFORM2F pfn_glUniform2f;
typedef void (APIENTRYP PFNGLUNIFORM2FV) (GLint location, GLsizei count, const GLfloat *value);
#define glUniform2fv pfn_glUniform2fv
GLAPI PFNGLUNIFORM2FV pfn_glUniform2fv;
typedef void (APIENTRYP PFNGLUNIFORM2I) (GLint location, GLint v0, GLint v1);
#define glUniform2i pfn_glUniform2i
GLAPI PFNGLUNIFORM2I pfn_glUniform2i;
typedef void (APIENTRYP PFNGLUNIFORM2IV) (GLint location, GLsizei count, const GLint *value);
#define glUniform2iv pfn_glUniform2iv
GLAPI PFNGLUNIFORM2IV pfn_glUniform2iv;
typedef void (APIENTRYP PFNGLUNIFORM3F) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
#define glUniform3f pfn_glUniform3f
GLAPI PFNGLUNIFORM3F pfn_glUniform3f;
typedef void (APIENTRYP PFNGLUNIFORM3FV) (GLint location, GLsizei count, const GLfloat *value);
#define glUniform3fv pfn_glUniform3fv
GLAPI PFNGLUNIFORM3FV pfn_glUniform3fv;
typedef void (APIENTRYP PFNGLUNIFORM3I) (GLint location, GLint v0, GLint v1, GLint v2);
#define glUniform3i pfn_glUniform3i
GLAPI PFNGLUNIFORM3I pfn_glUniform3i;
typedef void (APIENTRYP PFNGLUNIFORM3IV) (GLint location, GLsizei count, const GLint *value);
#define glUniform3iv pfn_glUniform3iv
GLAPI PFNGLUNIFORM3IV pfn_glUniform3iv;
typedef void (APIENTRYP PFNGLUNIFORM4F) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
#define glUniform4f pfn_glUniform4f
GLAPI PFNGLUNIFORM4F pfn_glUniform4f;
typedef void (APIENTRYP PFNGLUNIFORM4FV) (GLint location, GLsizei count, const GLfloat *value);
#define glUniform4fv pfn_glUniform4fv
GLAPI PFNGLUNIFORM4FV pfn_glUniform4fv;
typedef void (APIENTRYP PFNGLUNIFORM4I) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
#define glUniform4i pfn_glUniform4i
GLAPI PFNGLUNIFORM4I pfn_glUniform4i;
typedef void (APIENTRYP PFNGLUNIFORM4IV) (GLint location, GLsizei count, const GLint *value);
#define glUniform4iv pfn_glUniform4iv
GLAPI PFNGLUNIFORM4IV pfn_glUniform4iv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FV) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#define glUniformMatrix2fv pfn_glUniformMatrix2fv
GLAPI PFNGLUNIFORMMATRIX2FV pfn_glUniformMatrix2fv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FV) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#define glUniformMatrix3fv pfn_glUniformMatrix3fv
GLAPI PFNGLUNIFORMMATRIX3FV pfn_glUniformMatrix3fv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FV) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#define glUniformMatrix4fv pfn_glUniformMatrix4fv
GLAPI PFNGLUNIFORMMATRIX4FV pfn_glUniformMatrix4fv;
typedef void (APIENTRYP PFNGLUSEPROGRAM) (GLuint program);
#define glUseProgram pfn_glUseProgram
GLAPI PFNGLUSEPROGRAM pfn_glUseProgram;
typedef void (APIENTRYP PFNGLVALIDATEPROGRAM) (GLuint program);
#define glValidateProgram pfn_glValidateProgram
GLAPI PFNGLVALIDATEPROGRAM pfn_glValidateProgram;
typedef void (APIENTRYP PFNGLVERTEXATTRIB1D) (GLuint index, GLdouble x);
#define glVertexAttrib1d pfn_glVertexAttrib1d
GLAPI PFNGLVERTEXATTRIB1D pfn_glVertexAttrib1d;
typedef void (APIENTRYP PFNGLVERTEXATTRIB1DV) (GLuint index, const GLdouble *v);
#define glVertexAttrib1dv pfn_glVertexAttrib1dv
GLAPI PFNGLVERTEXATTRIB1DV pfn_glVertexAttrib1dv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB1F) (GLuint index, GLfloat x);
#define glVertexAttrib1f pfn_glVertexAttrib1f
GLAPI PFNGLVERTEXATTRIB1F pfn_glVertexAttrib1f;
typedef void (APIENTRYP PFNGLVERTEXATTRIB1FV) (GLuint index, const GLfloat *v);
#define glVertexAttrib1fv pfn_glVertexAttrib1fv
GLAPI PFNGLVERTEXATTRIB1FV pfn_glVertexAttrib1fv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB1S) (GLuint index, GLshort x);
#define glVertexAttrib1s pfn_glVertexAttrib1s
GLAPI PFNGLVERTEXATTRIB1S pfn_glVertexAttrib1s;
typedef void (APIENTRYP PFNGLVERTEXATTRIB1SV) (GLuint index, const GLshort *v);
#define glVertexAttrib1sv pfn_glVertexAttrib1sv
GLAPI PFNGLVERTEXATTRIB1SV pfn_glVertexAttrib1sv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB2D) (GLuint index, GLdouble x, GLdouble y);
#define glVertexAttrib2d pfn_glVertexAttrib2d
GLAPI PFNGLVERTEXATTRIB2D pfn_glVertexAttrib2d;
typedef void (APIENTRYP PFNGLVERTEXATTRIB2DV) (GLuint index, const GLdouble *v);
#define glVertexAttrib2dv pfn_glVertexAttrib2dv
GLAPI PFNGLVERTEXATTRIB2DV pfn_glVertexAttrib2dv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB2F) (GLuint index, GLfloat x, GLfloat y);
#define glVertexAttrib2f pfn_glVertexAttrib2f
GLAPI PFNGLVERTEXATTRIB2F pfn_glVertexAttrib2f;
typedef void (APIENTRYP PFNGLVERTEXATTRIB2FV) (GLuint index, const GLfloat *v);
#define glVertexAttrib2fv pfn_glVertexAttrib2fv
GLAPI PFNGLVERTEXATTRIB2FV pfn_glVertexAttrib2fv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB2S) (GLuint index, GLshort x, GLshort y);
#define glVertexAttrib2s pfn_glVertexAttrib2s
GLAPI PFNGLVERTEXATTRIB2S pfn_glVertexAttrib2s;
typedef void (APIENTRYP PFNGLVERTEXATTRIB2SV) (GLuint index, const GLshort *v);
#define glVertexAttrib2sv pfn_glVertexAttrib2sv
GLAPI PFNGLVERTEXATTRIB2SV pfn_glVertexAttrib2sv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB3D) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
#define glVertexAttrib3d pfn_glVertexAttrib3d
GLAPI PFNGLVERTEXATTRIB3D pfn_glVertexAttrib3d;
typedef void (APIENTRYP PFNGLVERTEXATTRIB3DV) (GLuint index, const GLdouble *v);
#define glVertexAttrib3dv pfn_glVertexAttrib3dv
GLAPI PFNGLVERTEXATTRIB3DV pfn_glVertexAttrib3dv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB3F) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
#define glVertexAttrib3f pfn_glVertexAttrib3f
GLAPI PFNGLVERTEXATTRIB3F pfn_glVertexAttrib3f;
typedef void (APIENTRYP PFNGLVERTEXATTRIB3FV) (GLuint index, const GLfloat *v);
#define glVertexAttrib3fv pfn_glVertexAttrib3fv
GLAPI PFNGLVERTEXATTRIB3FV pfn_glVertexAttrib3fv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB3S) (GLuint index, GLshort x, GLshort y, GLshort z);
#define glVertexAttrib3s pfn_glVertexAttrib3s
GLAPI PFNGLVERTEXATTRIB3S pfn_glVertexAttrib3s;
typedef void (APIENTRYP PFNGLVERTEXATTRIB3SV) (GLuint index, const GLshort *v);
#define glVertexAttrib3sv pfn_glVertexAttrib3sv
GLAPI PFNGLVERTEXATTRIB3SV pfn_glVertexAttrib3sv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBV) (GLuint index, const GLbyte *v);
#define glVertexAttrib4Nbv pfn_glVertexAttrib4Nbv
GLAPI PFNGLVERTEXATTRIB4NBV pfn_glVertexAttrib4Nbv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIV) (GLuint index, const GLint *v);
#define glVertexAttrib4Niv pfn_glVertexAttrib4Niv
GLAPI PFNGLVERTEXATTRIB4NIV pfn_glVertexAttrib4Niv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSV) (GLuint index, const GLshort *v);
#define glVertexAttrib4Nsv pfn_glVertexAttrib4Nsv
GLAPI PFNGLVERTEXATTRIB4NSV pfn_glVertexAttrib4Nsv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUB) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
#define glVertexAttrib4Nub pfn_glVertexAttrib4Nub
GLAPI PFNGLVERTEXATTRIB4NUB pfn_glVertexAttrib4Nub;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBV) (GLuint index, const GLubyte *v);
#define glVertexAttrib4Nubv pfn_glVertexAttrib4Nubv
GLAPI PFNGLVERTEXATTRIB4NUBV pfn_glVertexAttrib4Nubv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIV) (GLuint index, const GLuint *v);
#define glVertexAttrib4Nuiv pfn_glVertexAttrib4Nuiv
GLAPI PFNGLVERTEXATTRIB4NUIV pfn_glVertexAttrib4Nuiv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSV) (GLuint index, const GLushort *v);
#define glVertexAttrib4Nusv pfn_glVertexAttrib4Nusv
GLAPI PFNGLVERTEXATTRIB4NUSV pfn_glVertexAttrib4Nusv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4BV) (GLuint index, const GLbyte *v);
#define glVertexAttrib4bv pfn_glVertexAttrib4bv
GLAPI PFNGLVERTEXATTRIB4BV pfn_glVertexAttrib4bv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4D) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
#define glVertexAttrib4d pfn_glVertexAttrib4d
GLAPI PFNGLVERTEXATTRIB4D pfn_glVertexAttrib4d;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4DV) (GLuint index, const GLdouble *v);
#define glVertexAttrib4dv pfn_glVertexAttrib4dv
GLAPI PFNGLVERTEXATTRIB4DV pfn_glVertexAttrib4dv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4F) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
#define glVertexAttrib4f pfn_glVertexAttrib4f
GLAPI PFNGLVERTEXATTRIB4F pfn_glVertexAttrib4f;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4FV) (GLuint index, const GLfloat *v);
#define glVertexAttrib4fv pfn_glVertexAttrib4fv
GLAPI PFNGLVERTEXATTRIB4FV pfn_glVertexAttrib4fv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4IV) (GLuint index, const GLint *v);
#define glVertexAttrib4iv pfn_glVertexAttrib4iv
GLAPI PFNGLVERTEXATTRIB4IV pfn_glVertexAttrib4iv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4S) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
#define glVertexAttrib4s pfn_glVertexAttrib4s
GLAPI PFNGLVERTEXATTRIB4S pfn_glVertexAttrib4s;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4SV) (GLuint index, const GLshort *v);
#define glVertexAttrib4sv pfn_glVertexAttrib4sv
GLAPI PFNGLVERTEXATTRIB4SV pfn_glVertexAttrib4sv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBV) (GLuint index, const GLubyte *v);
#define glVertexAttrib4ubv pfn_glVertexAttrib4ubv
GLAPI PFNGLVERTEXATTRIB4UBV pfn_glVertexAttrib4ubv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIV) (GLuint index, const GLuint *v);
#define glVertexAttrib4uiv pfn_glVertexAttrib4uiv
GLAPI PFNGLVERTEXATTRIB4UIV pfn_glVertexAttrib4uiv;
typedef void (APIENTRYP PFNGLVERTEXATTRIB4USV) (GLuint index, const GLushort *v);
#define glVertexAttrib4usv pfn_glVertexAttrib4usv
GLAPI PFNGLVERTEXATTRIB4USV pfn_glVertexAttrib4usv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTER) (GLuint index, GLint size, GLenum type_, GLboolean normalized, GLsizei stride, const void *pointer);
#define glVertexAttribPointer pfn_glVertexAttribPointer
GLAPI PFNGLVERTEXATTRIBPOINTER pfn_glVertexAttribPointer;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3FV) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#define glUniformMatrix2x3fv pfn_glUniformMatrix2x3fv
GLAPI PFNGLUNIFORMMATRIX2X3FV pfn_glUniformMatrix2x3fv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4FV) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#define glUniformMatrix2x4fv pfn_glUniformMatrix2x4fv
GLAPI PFNGLUNIFORMMATRIX2X4FV pfn_glUniformMatrix2x4fv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2FV) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#define glUniformMatrix3x2fv pfn_glUniformMatrix3x2fv
GLAPI PFNGLUNIFORMMATRIX3X2FV pfn_glUniformMatrix3x2fv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4FV) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#define glUniformMatrix3x4fv pfn_glUniformMatrix3x4fv
GLAPI PFNGLUNIFORMMATRIX3X4FV pfn_glUniformMatrix3x4fv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2FV) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#define glUniformMatrix4x2fv pfn_glUniformMatrix4x2fv
GLAPI PFNGLUNIFORMMATRIX4X2FV pfn_glUniformMatrix4x2fv;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3FV) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
#define glUniformMatrix4x3fv pfn_glUniformMatrix4x3fv
GLAPI PFNGLUNIFORMMATRIX4X3FV pfn_glUniformMatrix4x3fv;
typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDER) (GLuint id, GLenum mode);
#define glBeginConditionalRender pfn_glBeginConditionalRender
GLAPI PFNGLBEGINCONDITIONALRENDER pfn_glBeginConditionalRender;
typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACK) (GLenum primitiveMode);
#define glBeginTransformFeedback pfn_glBeginTransformFeedback
GLAPI PFNGLBEGINTRANSFORMFEEDBACK pfn_glBeginTransformFeedback;
typedef void (APIENTRYP PFNGLBINDBUFFERBASE) (GLenum target, GLuint index, GLuint buffer);
#define glBindBufferBase pfn_glBindBufferBase
GLAPI PFNGLBINDBUFFERBASE pfn_glBindBufferBase;
typedef void (APIENTRYP PFNGLBINDBUFFERRANGE) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
#define glBindBufferRange pfn_glBindBufferRange
GLAPI PFNGLBINDBUFFERRANGE pfn_glBindBufferRange;
typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATION) (GLuint program, GLuint color, const GLchar *name);
#define glBindFragDataLocation pfn_glBindFragDataLocation
GLAPI PFNGLBINDFRAGDATALOCATION pfn_glBindFragDataLocation;
typedef void (APIENTRYP PFNGLBINDFRAMEBUFFER) (GLenum target, GLuint framebuffer);
#define glBindFramebuffer pfn_glBindFramebuffer
GLAPI PFNGLBINDFRAMEBUFFER pfn_glBindFramebuffer;
typedef void (APIENTRYP PFNGLBINDRENDERBUFFER) (GLenum target, GLuint renderbuffer);
#define glBindRenderbuffer pfn_glBindRenderbuffer
GLAPI PFNGLBINDRENDERBUFFER pfn_glBindRenderbuffer;
typedef void (APIENTRYP PFNGLBINDVERTEXARRAY) (GLuint array);
#define glBindVertexArray pfn_glBindVertexArray
GLAPI PFNGLBINDVERTEXARRAY pfn_glBindVertexArray;
typedef void (APIENTRYP PFNGLBLITFRAMEBUFFER) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
#define glBlitFramebuffer pfn_glBlitFramebuffer
GLAPI PFNGLBLITFRAMEBUFFER pfn_glBlitFramebuffer;
typedef GLenum (APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUS) (GLenum target);
#define glCheckFramebufferStatus pfn_glCheckFramebufferStatus
GLAPI PFNGLCHECKFRAMEBUFFERSTATUS pfn_glCheckFramebufferStatus;
typedef void (APIENTRYP PFNGLCLAMPCOLOR) (GLenum target, GLenum clamp);
#define glClampColor pfn_glClampColor
GLAPI PFNGLCLAMPCOLOR pfn_glClampColor;
typedef void (APIENTRYP PFNGLCLEARBUFFERFI) (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
#define glClearBufferfi pfn_glClearBufferfi
GLAPI PFNGLCLEARBUFFERFI pfn_glClearBufferfi;
typedef void (APIENTRYP PFNGLCLEARBUFFERFV) (GLenum buffer, GLint drawbuffer, const GLfloat *value);
#define glClearBufferfv pfn_glClearBufferfv
GLAPI PFNGLCLEARBUFFERFV pfn_glClearBufferfv;
typedef void (APIENTRYP PFNGLCLEARBUFFERIV) (GLenum buffer, GLint drawbuffer, const GLint *value);
#define glClearBufferiv pfn_glClearBufferiv
GLAPI PFNGLCLEARBUFFERIV pfn_glClearBufferiv;
typedef void (APIENTRYP PFNGLCLEARBUFFERUIV) (GLenum buffer, GLint drawbuffer, const GLuint *value);
#define glClearBufferuiv pfn_glClearBufferuiv
GLAPI PFNGLCLEARBUFFERUIV pfn_glClearBufferuiv;
typedef void (APIENTRYP PFNGLCOLORMASKI) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
#define glColorMaski pfn_glColorMaski
GLAPI PFNGLCOLORMASKI pfn_glColorMaski;
typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERS) (GLsizei n, const GLuint *framebuffers);
#define glDeleteFramebuffers pfn_glDeleteFramebuffers
GLAPI PFNGLDELETEFRAMEBUFFERS pfn_glDeleteFramebuffers;
typedef void (APIENTRYP PFNGLDELETERENDERBUFFERS) (GLsizei n, const GLuint *renderbuffers);
#define glDeleteRenderbuffers pfn_glDeleteRenderbuffers
GLAPI PFNGLDELETERENDERBUFFERS pfn_glDeleteRenderbuffers;
typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYS) (GLsizei n, const GLuint *arrays);
#define glDeleteVertexArrays pfn_glDeleteVertexArrays
GLAPI PFNGLDELETEVERTEXARRAYS pfn_glDeleteVertexArrays;
typedef void (APIENTRYP PFNGLDISABLEI) (GLenum target, GLuint index);
#define glDisablei pfn_glDisablei
GLAPI PFNGLDISABLEI pfn_glDisablei;
typedef void (APIENTRYP PFNGLENABLEI) (GLenum target, GLuint index);
#define glEnablei pfn_glEnablei
GLAPI PFNGLENABLEI pfn_glEnablei;
typedef void (APIENTRYP PFNGLENDCONDITIONALRENDER) ();
#define glEndConditionalRender pfn_glEndConditionalRender
GLAPI PFNGLENDCONDITIONALRENDER pfn_glEndConditionalRender;
typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACK) ();
#define glEndTransformFeedback pfn_glEndTransformFeedback
GLAPI PFNGLENDTRANSFORMFEEDBACK pfn_glEndTransformFeedback;
typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGE) (GLenum target, GLintptr offset, GLsizeiptr length);
#define glFlushMappedBufferRange pfn_glFlushMappedBufferRange
GLAPI PFNGLFLUSHMAPPEDBUFFERRANGE pfn_glFlushMappedBufferRange;
typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFER) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
#define glFramebufferRenderbuffer pfn_glFramebufferRenderbuffer
GLAPI PFNGLFRAMEBUFFERRENDERBUFFER pfn_glFramebufferRenderbuffer;
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1D) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
#define glFramebufferTexture1D pfn_glFramebufferTexture1D
GLAPI PFNGLFRAMEBUFFERTEXTURE1D pfn_glFramebufferTexture1D;
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2D) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
#define glFramebufferTexture2D pfn_glFramebufferTexture2D
GLAPI PFNGLFRAMEBUFFERTEXTURE2D pfn_glFramebufferTexture2D;
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3D) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
#define glFramebufferTexture3D pfn_glFramebufferTexture3D
GLAPI PFNGLFRAMEBUFFERTEXTURE3D pfn_glFramebufferTexture3D;
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYER) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
#define glFramebufferTextureLayer pfn_glFramebufferTextureLayer
GLAPI PFNGLFRAMEBUFFERTEXTURELAYER pfn_glFramebufferTextureLayer;
typedef void (APIENTRYP PFNGLGENFRAMEBUFFERS) (GLsizei n, GLuint *framebuffers);
#define glGenFramebuffers pfn_glGenFramebuffers
GLAPI PFNGLGENFRAMEBUFFERS pfn_glGenFramebuffers;
typedef void (APIENTRYP PFNGLGENRENDERBUFFERS) (GLsizei n, GLuint *renderbuffers);
#define glGenRenderbuffers pfn_glGenRenderbuffers
GLAPI PFNGLGENRENDERBUFFERS pfn_glGenRenderbuffers;
typedef void (APIENTRYP PFNGLGENVERTEXARRAYS) (GLsizei n, GLuint *arrays);
#define glGenVertexArrays pfn_glGenVertexArrays
GLAPI PFNGLGENVERTEXARRAYS pfn_glGenVertexArrays;
typedef void (APIENTRYP PFNGLGENERATEMIPMAP) (GLenum target);
#define glGenerateMipmap pfn_glGenerateMipmap
GLAPI PFNGLGENERATEMIPMAP pfn_glGenerateMipmap;
typedef void (APIENTRYP PFNGLGETBOOLEANI_V) (GLenum target, GLuint index, GLboolean *data);
#define glGetBooleani_v pfn_glGetBooleani_v
GLAPI PFNGLGETBOOLEANI_V pfn_glGetBooleani_v;
typedef GLint (APIENTRYP PFNGLGETFRAGDATALOCATION) (GLuint program, const GLchar *name);
#define glGetFragDataLocation pfn_glGetFragDataLocation
GLAPI PFNGLGETFRAGDATALOCATION pfn_glGetFragDataLocation;
typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIV) (GLenum target, GLenum attachment, GLenum pname, GLint *params);
#define glGetFramebufferAttachmentParameteriv pfn_glGetFramebufferAttachmentParameteriv
GLAPI PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIV pfn_glGetFramebufferAttachmentParameteriv;
typedef void (APIENTRYP PFNGLGETINTEGERI_V) (GLenum target, GLuint index, GLint *data);
#define glGetIntegeri_v pfn_glGetIntegeri_v
GLAPI PFNGLGETINTEGERI_V pfn_glGetIntegeri_v;
typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIV) (GLenum target, GLenum pname, GLint *params);
#define glGetRenderbufferParameteriv pfn_glGetRenderbufferParameteriv
GLAPI PFNGLGETRENDERBUFFERPARAMETERIV pfn_glGetRenderbufferParameteriv;
typedef const GLubyte * (APIENTRYP PFNGLGETSTRINGI) (GLenum name, GLuint index);
#define glGetStringi pfn_glGetStringi
GLAPI PFNGLGETSTRINGI pfn_glGetStringi;
typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIV) (GLenum target, GLenum pname, GLint *params);
#define glGetTexParameterIiv pfn_glGetTexParameterIiv
GLAPI PFNGLGETTEXPARAMETERIIV pfn_glGetTexParameterIiv;
typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIV) (GLenum target, GLenum pname, GLuint *params);
#define glGetTexParameterIuiv pfn_glGetTexParameterIuiv
GLAPI PFNGLGETTEXPARAMETERIUIV pfn_glGetTexParameterIuiv;
typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYING) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type_, GLchar *name);
#define glGetTransformFeedbackVarying pfn_glGetTransformFeedbackVarying
GLAPI PFNGLGETTRANSFORMFEEDBACKVARYING pfn_glGetTransformFeedbackVarying;
typedef void (APIENTRYP PFNGLGETUNIFORMUIV) (GLuint program, GLint location, GLuint *params);
#define glGetUniformuiv pfn_glGetUniformuiv
GLAPI PFNGLGETUNIFORMUIV pfn_glGetUniformuiv;
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIV) (GLuint index, GLenum pname, GLint *params);
#define glGetVertexAttribIiv pfn_glGetVertexAttribIiv
GLAPI PFNGLGETVERTEXATTRIBIIV pfn_glGetVertexAttribIiv;
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIV) (GLuint index, GLenum pname, GLuint *params);
#define glGetVertexAttribIuiv pfn_glGetVertexAttribIuiv
GLAPI PFNGLGETVERTEXATTRIBIUIV pfn_glGetVertexAttribIuiv;
typedef GLboolean (APIENTRYP PFNGLISENABLEDI) (GLenum target, GLuint index);
#define glIsEnabledi pfn_glIsEnabledi
GLAPI PFNGLISENABLEDI pfn_glIsEnabledi;
typedef GLboolean (APIENTRYP PFNGLISFRAMEBUFFER) (GLuint framebuffer);
#define glIsFramebuffer pfn_glIsFramebuffer
GLAPI PFNGLISFRAMEBUFFER pfn_glIsFramebuffer;
typedef GLboolean (APIENTRYP PFNGLISRENDERBUFFER) (GLuint renderbuffer);
#define glIsRenderbuffer pfn_glIsRenderbuffer
GLAPI PFNGLISRENDERBUFFER pfn_glIsRenderbuffer;
typedef GLboolean (APIENTRYP PFNGLISVERTEXARRAY) (GLuint array);
#define glIsVertexArray pfn_glIsVertexArray
GLAPI PFNGLISVERTEXARRAY pfn_glIsVertexArray;
typedef void * (APIENTRYP PFNGLMAPBUFFERRANGE) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
#define glMapBufferRange pfn_glMapBufferRange
GLAPI PFNGLMAPBUFFERRANGE pfn_glMapBufferRange;
typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGE) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
#define glRenderbufferStorage pfn_glRenderbufferStorage
GLAPI PFNGLRENDERBUFFERSTORAGE pfn_glRenderbufferStorage;
typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLE) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
#define glRenderbufferStorageMultisample pfn_glRenderbufferStorageMultisample
GLAPI PFNGLRENDERBUFFERSTORAGEMULTISAMPLE pfn_glRenderbufferStorageMultisample;
typedef void (APIENTRYP PFNGLTEXPARAMETERIIV) (GLenum target, GLenum pname, const GLint *params);
#define glTexParameterIiv pfn_glTexParameterIiv
GLAPI PFNGLTEXPARAMETERIIV pfn_glTexParameterIiv;
typedef void (APIENTRYP PFNGLTEXPARAMETERIUIV) (GLenum target, GLenum pname, const GLuint *params);
#define glTexParameterIuiv pfn_glTexParameterIuiv
GLAPI PFNGLTEXPARAMETERIUIV pfn_glTexParameterIuiv;
typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGS) (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
#define glTransformFeedbackVaryings pfn_glTransformFeedbackVaryings
GLAPI PFNGLTRANSFORMFEEDBACKVARYINGS pfn_glTransformFeedbackVaryings;
typedef void (APIENTRYP PFNGLUNIFORM1UI) (GLint location, GLuint v0);
#define glUniform1ui pfn_glUniform1ui
GLAPI PFNGLUNIFORM1UI pfn_glUniform1ui;
typedef void (APIENTRYP PFNGLUNIFORM1UIV) (GLint location, GLsizei count, const GLuint *value);
#define glUniform1uiv pfn_glUniform1uiv
GLAPI PFNGLUNIFORM1UIV pfn_glUniform1uiv;
typedef void (APIENTRYP PFNGLUNIFORM2UI) (GLint location, GLuint v0, GLuint v1);
#define glUniform2ui pfn_glUniform2ui
GLAPI PFNGLUNIFORM2UI pfn_glUniform2ui;
typedef void (APIENTRYP PFNGLUNIFORM2UIV) (GLint location, GLsizei count, const GLuint *value);
#define glUniform2uiv pfn_glUniform2uiv
GLAPI PFNGLUNIFORM2UIV pfn_glUniform2uiv;
typedef void (APIENTRYP PFNGLUNIFORM3UI) (GLint location, GLuint v0, GLuint v1, GLuint v2);
#define glUniform3ui pfn_glUniform3ui
GLAPI PFNGLUNIFORM3UI pfn_glUniform3ui;
typedef void (APIENTRYP PFNGLUNIFORM3UIV) (GLint location, GLsizei count, const GLuint *value);
#define glUniform3uiv pfn_glUniform3uiv
GLAPI PFNGLUNIFORM3UIV pfn_glUniform3uiv;
typedef void (APIENTRYP PFNGLUNIFORM4UI) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
#define glUniform4ui pfn_glUniform4ui
GLAPI PFNGLUNIFORM4UI pfn_glUniform4ui;
typedef void (APIENTRYP PFNGLUNIFORM4UIV) (GLint location, GLsizei count, const GLuint *value);
#define glUniform4uiv pfn_glUniform4uiv
GLAPI PFNGLUNIFORM4UIV pfn_glUniform4uiv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1I) (GLuint index, GLint x);
#define glVertexAttribI1i pfn_glVertexAttribI1i
GLAPI PFNGLVERTEXATTRIBI1I pfn_glVertexAttribI1i;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IV) (GLuint index, const GLint *v);
#define glVertexAttribI1iv pfn_glVertexAttribI1iv
GLAPI PFNGLVERTEXATTRIBI1IV pfn_glVertexAttribI1iv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UI) (GLuint index, GLuint x);
#define glVertexAttribI1ui pfn_glVertexAttribI1ui
GLAPI PFNGLVERTEXATTRIBI1UI pfn_glVertexAttribI1ui;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIV) (GLuint index, const GLuint *v);
#define glVertexAttribI1uiv pfn_glVertexAttribI1uiv
GLAPI PFNGLVERTEXATTRIBI1UIV pfn_glVertexAttribI1uiv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2I) (GLuint index, GLint x, GLint y);
#define glVertexAttribI2i pfn_glVertexAttribI2i
GLAPI PFNGLVERTEXATTRIBI2I pfn_glVertexAttribI2i;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IV) (GLuint index, const GLint *v);
#define glVertexAttribI2iv pfn_glVertexAttribI2iv
GLAPI PFNGLVERTEXATTRIBI2IV pfn_glVertexAttribI2iv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UI) (GLuint index, GLuint x, GLuint y);
#define glVertexAttribI2ui pfn_glVertexAttribI2ui
GLAPI PFNGLVERTEXATTRIBI2UI pfn_glVertexAttribI2ui;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIV) (GLuint index, const GLuint *v);
#define glVertexAttribI2uiv pfn_glVertexAttribI2uiv
GLAPI PFNGLVERTEXATTRIBI2UIV pfn_glVertexAttribI2uiv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3I) (GLuint index, GLint x, GLint y, GLint z);
#define glVertexAttribI3i pfn_glVertexAttribI3i
GLAPI PFNGLVERTEXATTRIBI3I pfn_glVertexAttribI3i;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IV) (GLuint index, const GLint *v);
#define glVertexAttribI3iv pfn_glVertexAttribI3iv
GLAPI PFNGLVERTEXATTRIBI3IV pfn_glVertexAttribI3iv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UI) (GLuint index, GLuint x, GLuint y, GLuint z);
#define glVertexAttribI3ui pfn_glVertexAttribI3ui
GLAPI PFNGLVERTEXATTRIBI3UI pfn_glVertexAttribI3ui;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIV) (GLuint index, const GLuint *v);
#define glVertexAttribI3uiv pfn_glVertexAttribI3uiv
GLAPI PFNGLVERTEXATTRIBI3UIV pfn_glVertexAttribI3uiv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BV) (GLuint index, const GLbyte *v);
#define glVertexAttribI4bv pfn_glVertexAttribI4bv
GLAPI PFNGLVERTEXATTRIBI4BV pfn_glVertexAttribI4bv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4I) (GLuint index, GLint x, GLint y, GLint z, GLint w);
#define glVertexAttribI4i pfn_glVertexAttribI4i
GLAPI PFNGLVERTEXATTRIBI4I pfn_glVertexAttribI4i;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IV) (GLuint index, const GLint *v);
#define glVertexAttribI4iv pfn_glVertexAttribI4iv
GLAPI PFNGLVERTEXATTRIBI4IV pfn_glVertexAttribI4iv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4SV) (GLuint index, const GLshort *v);
#define glVertexAttribI4sv pfn_glVertexAttribI4sv
GLAPI PFNGLVERTEXATTRIBI4SV pfn_glVertexAttribI4sv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBV) (GLuint index, const GLubyte *v);
#define glVertexAttribI4ubv pfn_glVertexAttribI4ubv
GLAPI PFNGLVERTEXATTRIBI4UBV pfn_glVertexAttribI4ubv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UI) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
#define glVertexAttribI4ui pfn_glVertexAttribI4ui
GLAPI PFNGLVERTEXATTRIBI4UI pfn_glVertexAttribI4ui;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIV) (GLuint index, const GLuint *v);
#define glVertexAttribI4uiv pfn_glVertexAttribI4uiv
GLAPI PFNGLVERTEXATTRIBI4UIV pfn_glVertexAttribI4uiv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USV) (GLuint index, const GLushort *v);
#define glVertexAttribI4usv pfn_glVertexAttribI4usv
GLAPI PFNGLVERTEXATTRIBI4USV pfn_glVertexAttribI4usv;
typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTER) (GLuint index, GLint size, GLenum type_, GLsizei stride, const void *pointer);
#define glVertexAttribIPointer pfn_glVertexAttribIPointer
GLAPI PFNGLVERTEXATTRIBIPOINTER pfn_glVertexAttribIPointer;

#endif /* !CGOTAG_gles2 */

struct Version_ {
    int major;
    int minor;
};

GLAPI struct Version_ GLVersion;

#endif /* _GROG_GL_H_ */
