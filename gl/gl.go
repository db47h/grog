// Code generated by gogl (https://github.com/db47h/gogl); DO NOT EDIT

// +build !gles2 darwin

package gl

/*
#cgo linux freebsd    pkg-config: gl
#cgo                  CFLAGS: -DGOTAG_gl

#include "gl.h"
#include <stdio.h>

struct Version_ GLVersion;

PFNGLACCUM pfn_glAccum = NULL;
void gogl_glAccum(GLenum op, GLfloat value) {
    glAccum(op, value);
}

PFNGLALPHAFUNC pfn_glAlphaFunc = NULL;
void gogl_glAlphaFunc(GLenum func_, GLfloat ref) {
    glAlphaFunc(func_, ref);
}

PFNGLBEGIN pfn_glBegin = NULL;
void gogl_glBegin(GLenum mode) {
    glBegin(mode);
}

PFNGLBITMAP pfn_glBitmap = NULL;
void gogl_glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap) {
    glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap);
}

PFNGLBLENDFUNC pfn_glBlendFunc = NULL;
void gogl_glBlendFunc(GLenum sfactor, GLenum dfactor) {
    glBlendFunc(sfactor, dfactor);
}

PFNGLCALLLIST pfn_glCallList = NULL;
void gogl_glCallList(GLuint list) {
    glCallList(list);
}

PFNGLCALLLISTS pfn_glCallLists = NULL;
void gogl_glCallLists(GLsizei n, GLenum type_, const void *lists) {
    glCallLists(n, type_, lists);
}

PFNGLCLEAR pfn_glClear = NULL;
void gogl_glClear(GLbitfield mask) {
    glClear(mask);
}

PFNGLCLEARACCUM pfn_glClearAccum = NULL;
void gogl_glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
    glClearAccum(red, green, blue, alpha);
}

PFNGLCLEARCOLOR pfn_glClearColor = NULL;
void gogl_glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
    glClearColor(red, green, blue, alpha);
}

PFNGLCLEARDEPTH pfn_glClearDepth = NULL;
void gogl_glClearDepth(GLdouble depth) {
    glClearDepth(depth);
}

PFNGLCLEARINDEX pfn_glClearIndex = NULL;
void gogl_glClearIndex(GLfloat c) {
    glClearIndex(c);
}

PFNGLCLEARSTENCIL pfn_glClearStencil = NULL;
void gogl_glClearStencil(GLint s) {
    glClearStencil(s);
}

PFNGLCLIPPLANE pfn_glClipPlane = NULL;
void gogl_glClipPlane(GLenum plane, const GLdouble *equation) {
    glClipPlane(plane, equation);
}

PFNGLCOLOR3B pfn_glColor3b = NULL;
void gogl_glColor3b(GLbyte red, GLbyte green, GLbyte blue) {
    glColor3b(red, green, blue);
}

PFNGLCOLOR3BV pfn_glColor3bv = NULL;
void gogl_glColor3bv(const GLbyte *v) {
    glColor3bv(v);
}

PFNGLCOLOR3D pfn_glColor3d = NULL;
void gogl_glColor3d(GLdouble red, GLdouble green, GLdouble blue) {
    glColor3d(red, green, blue);
}

PFNGLCOLOR3DV pfn_glColor3dv = NULL;
void gogl_glColor3dv(const GLdouble *v) {
    glColor3dv(v);
}

PFNGLCOLOR3F pfn_glColor3f = NULL;
void gogl_glColor3f(GLfloat red, GLfloat green, GLfloat blue) {
    glColor3f(red, green, blue);
}

PFNGLCOLOR3FV pfn_glColor3fv = NULL;
void gogl_glColor3fv(const GLfloat *v) {
    glColor3fv(v);
}

PFNGLCOLOR3I pfn_glColor3i = NULL;
void gogl_glColor3i(GLint red, GLint green, GLint blue) {
    glColor3i(red, green, blue);
}

PFNGLCOLOR3IV pfn_glColor3iv = NULL;
void gogl_glColor3iv(const GLint *v) {
    glColor3iv(v);
}

PFNGLCOLOR3S pfn_glColor3s = NULL;
void gogl_glColor3s(GLshort red, GLshort green, GLshort blue) {
    glColor3s(red, green, blue);
}

PFNGLCOLOR3SV pfn_glColor3sv = NULL;
void gogl_glColor3sv(const GLshort *v) {
    glColor3sv(v);
}

PFNGLCOLOR3UB pfn_glColor3ub = NULL;
void gogl_glColor3ub(GLubyte red, GLubyte green, GLubyte blue) {
    glColor3ub(red, green, blue);
}

PFNGLCOLOR3UBV pfn_glColor3ubv = NULL;
void gogl_glColor3ubv(const GLubyte *v) {
    glColor3ubv(v);
}

PFNGLCOLOR3UI pfn_glColor3ui = NULL;
void gogl_glColor3ui(GLuint red, GLuint green, GLuint blue) {
    glColor3ui(red, green, blue);
}

PFNGLCOLOR3UIV pfn_glColor3uiv = NULL;
void gogl_glColor3uiv(const GLuint *v) {
    glColor3uiv(v);
}

PFNGLCOLOR3US pfn_glColor3us = NULL;
void gogl_glColor3us(GLushort red, GLushort green, GLushort blue) {
    glColor3us(red, green, blue);
}

PFNGLCOLOR3USV pfn_glColor3usv = NULL;
void gogl_glColor3usv(const GLushort *v) {
    glColor3usv(v);
}

PFNGLCOLOR4B pfn_glColor4b = NULL;
void gogl_glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) {
    glColor4b(red, green, blue, alpha);
}

PFNGLCOLOR4BV pfn_glColor4bv = NULL;
void gogl_glColor4bv(const GLbyte *v) {
    glColor4bv(v);
}

PFNGLCOLOR4D pfn_glColor4d = NULL;
void gogl_glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) {
    glColor4d(red, green, blue, alpha);
}

PFNGLCOLOR4DV pfn_glColor4dv = NULL;
void gogl_glColor4dv(const GLdouble *v) {
    glColor4dv(v);
}

PFNGLCOLOR4F pfn_glColor4f = NULL;
void gogl_glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
    glColor4f(red, green, blue, alpha);
}

PFNGLCOLOR4FV pfn_glColor4fv = NULL;
void gogl_glColor4fv(const GLfloat *v) {
    glColor4fv(v);
}

PFNGLCOLOR4I pfn_glColor4i = NULL;
void gogl_glColor4i(GLint red, GLint green, GLint blue, GLint alpha) {
    glColor4i(red, green, blue, alpha);
}

PFNGLCOLOR4IV pfn_glColor4iv = NULL;
void gogl_glColor4iv(const GLint *v) {
    glColor4iv(v);
}

PFNGLCOLOR4S pfn_glColor4s = NULL;
void gogl_glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha) {
    glColor4s(red, green, blue, alpha);
}

PFNGLCOLOR4SV pfn_glColor4sv = NULL;
void gogl_glColor4sv(const GLshort *v) {
    glColor4sv(v);
}

PFNGLCOLOR4UB pfn_glColor4ub = NULL;
void gogl_glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) {
    glColor4ub(red, green, blue, alpha);
}

PFNGLCOLOR4UBV pfn_glColor4ubv = NULL;
void gogl_glColor4ubv(const GLubyte *v) {
    glColor4ubv(v);
}

PFNGLCOLOR4UI pfn_glColor4ui = NULL;
void gogl_glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha) {
    glColor4ui(red, green, blue, alpha);
}

PFNGLCOLOR4UIV pfn_glColor4uiv = NULL;
void gogl_glColor4uiv(const GLuint *v) {
    glColor4uiv(v);
}

PFNGLCOLOR4US pfn_glColor4us = NULL;
void gogl_glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha) {
    glColor4us(red, green, blue, alpha);
}

PFNGLCOLOR4USV pfn_glColor4usv = NULL;
void gogl_glColor4usv(const GLushort *v) {
    glColor4usv(v);
}

PFNGLCOLORMASK pfn_glColorMask = NULL;
void gogl_glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) {
    glColorMask(red, green, blue, alpha);
}

PFNGLCOLORMATERIAL pfn_glColorMaterial = NULL;
void gogl_glColorMaterial(GLenum face, GLenum mode) {
    glColorMaterial(face, mode);
}

PFNGLCOPYPIXELS pfn_glCopyPixels = NULL;
void gogl_glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type_) {
    glCopyPixels(x, y, width, height, type_);
}

PFNGLCULLFACE pfn_glCullFace = NULL;
void gogl_glCullFace(GLenum mode) {
    glCullFace(mode);
}

PFNGLDELETELISTS pfn_glDeleteLists = NULL;
void gogl_glDeleteLists(GLuint list, GLsizei range_) {
    glDeleteLists(list, range_);
}

PFNGLDEPTHFUNC pfn_glDepthFunc = NULL;
void gogl_glDepthFunc(GLenum func_) {
    glDepthFunc(func_);
}

PFNGLDEPTHMASK pfn_glDepthMask = NULL;
void gogl_glDepthMask(GLboolean flag) {
    glDepthMask(flag);
}

PFNGLDEPTHRANGE pfn_glDepthRange = NULL;
void gogl_glDepthRange(GLdouble n, GLdouble f) {
    glDepthRange(n, f);
}

PFNGLDISABLE pfn_glDisable = NULL;
void gogl_glDisable(GLenum cap) {
    glDisable(cap);
}

PFNGLDRAWBUFFER pfn_glDrawBuffer = NULL;
void gogl_glDrawBuffer(GLenum buf) {
    glDrawBuffer(buf);
}

PFNGLDRAWPIXELS pfn_glDrawPixels = NULL;
void gogl_glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type_, const void *pixels) {
    glDrawPixels(width, height, format, type_, pixels);
}

PFNGLEDGEFLAG pfn_glEdgeFlag = NULL;
void gogl_glEdgeFlag(GLboolean flag) {
    glEdgeFlag(flag);
}

PFNGLEDGEFLAGV pfn_glEdgeFlagv = NULL;
void gogl_glEdgeFlagv(const GLboolean *flag) {
    glEdgeFlagv(flag);
}

PFNGLENABLE pfn_glEnable = NULL;
void gogl_glEnable(GLenum cap) {
    glEnable(cap);
}

PFNGLEND pfn_glEnd = NULL;
void gogl_glEnd() {
    glEnd();
}

PFNGLENDLIST pfn_glEndList = NULL;
void gogl_glEndList() {
    glEndList();
}

PFNGLEVALCOORD1D pfn_glEvalCoord1d = NULL;
void gogl_glEvalCoord1d(GLdouble u) {
    glEvalCoord1d(u);
}

PFNGLEVALCOORD1DV pfn_glEvalCoord1dv = NULL;
void gogl_glEvalCoord1dv(const GLdouble *u) {
    glEvalCoord1dv(u);
}

PFNGLEVALCOORD1F pfn_glEvalCoord1f = NULL;
void gogl_glEvalCoord1f(GLfloat u) {
    glEvalCoord1f(u);
}

PFNGLEVALCOORD1FV pfn_glEvalCoord1fv = NULL;
void gogl_glEvalCoord1fv(const GLfloat *u) {
    glEvalCoord1fv(u);
}

PFNGLEVALCOORD2D pfn_glEvalCoord2d = NULL;
void gogl_glEvalCoord2d(GLdouble u, GLdouble v) {
    glEvalCoord2d(u, v);
}

PFNGLEVALCOORD2DV pfn_glEvalCoord2dv = NULL;
void gogl_glEvalCoord2dv(const GLdouble *u) {
    glEvalCoord2dv(u);
}

PFNGLEVALCOORD2F pfn_glEvalCoord2f = NULL;
void gogl_glEvalCoord2f(GLfloat u, GLfloat v) {
    glEvalCoord2f(u, v);
}

PFNGLEVALCOORD2FV pfn_glEvalCoord2fv = NULL;
void gogl_glEvalCoord2fv(const GLfloat *u) {
    glEvalCoord2fv(u);
}

PFNGLEVALMESH1 pfn_glEvalMesh1 = NULL;
void gogl_glEvalMesh1(GLenum mode, GLint i1, GLint i2) {
    glEvalMesh1(mode, i1, i2);
}

PFNGLEVALMESH2 pfn_glEvalMesh2 = NULL;
void gogl_glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) {
    glEvalMesh2(mode, i1, i2, j1, j2);
}

PFNGLEVALPOINT1 pfn_glEvalPoint1 = NULL;
void gogl_glEvalPoint1(GLint i) {
    glEvalPoint1(i);
}

PFNGLEVALPOINT2 pfn_glEvalPoint2 = NULL;
void gogl_glEvalPoint2(GLint i, GLint j) {
    glEvalPoint2(i, j);
}

PFNGLFEEDBACKBUFFER pfn_glFeedbackBuffer = NULL;
void gogl_glFeedbackBuffer(GLsizei size, GLenum type_, GLfloat *buffer) {
    glFeedbackBuffer(size, type_, buffer);
}

PFNGLFINISH pfn_glFinish = NULL;
void gogl_glFinish() {
    glFinish();
}

PFNGLFLUSH pfn_glFlush = NULL;
void gogl_glFlush() {
    glFlush();
}

PFNGLFOGF pfn_glFogf = NULL;
void gogl_glFogf(GLenum pname, GLfloat param) {
    glFogf(pname, param);
}

PFNGLFOGFV pfn_glFogfv = NULL;
void gogl_glFogfv(GLenum pname, const GLfloat *params) {
    glFogfv(pname, params);
}

PFNGLFOGI pfn_glFogi = NULL;
void gogl_glFogi(GLenum pname, GLint param) {
    glFogi(pname, param);
}

PFNGLFOGIV pfn_glFogiv = NULL;
void gogl_glFogiv(GLenum pname, const GLint *params) {
    glFogiv(pname, params);
}

PFNGLFRONTFACE pfn_glFrontFace = NULL;
void gogl_glFrontFace(GLenum mode) {
    glFrontFace(mode);
}

PFNGLFRUSTUM pfn_glFrustum = NULL;
void gogl_glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
    glFrustum(left, right, bottom, top, zNear, zFar);
}

PFNGLGENLISTS pfn_glGenLists = NULL;
GLuint gogl_glGenLists(GLsizei range_) {
    return glGenLists(range_);
}

PFNGLGETBOOLEANV pfn_glGetBooleanv = NULL;
void gogl_glGetBooleanv(GLenum pname, GLboolean *data) {
    glGetBooleanv(pname, data);
}

PFNGLGETCLIPPLANE pfn_glGetClipPlane = NULL;
void gogl_glGetClipPlane(GLenum plane, GLdouble *equation) {
    glGetClipPlane(plane, equation);
}

PFNGLGETDOUBLEV pfn_glGetDoublev = NULL;
void gogl_glGetDoublev(GLenum pname, GLdouble *data) {
    glGetDoublev(pname, data);
}

PFNGLGETERROR pfn_glGetError = NULL;
GLenum gogl_glGetError() {
    return glGetError();
}

PFNGLGETFLOATV pfn_glGetFloatv = NULL;
void gogl_glGetFloatv(GLenum pname, GLfloat *data) {
    glGetFloatv(pname, data);
}

PFNGLGETINTEGERV pfn_glGetIntegerv = NULL;
void gogl_glGetIntegerv(GLenum pname, GLint *data) {
    glGetIntegerv(pname, data);
}

PFNGLGETLIGHTFV pfn_glGetLightfv = NULL;
void gogl_glGetLightfv(GLenum light, GLenum pname, GLfloat *params) {
    glGetLightfv(light, pname, params);
}

PFNGLGETLIGHTIV pfn_glGetLightiv = NULL;
void gogl_glGetLightiv(GLenum light, GLenum pname, GLint *params) {
    glGetLightiv(light, pname, params);
}

PFNGLGETMAPDV pfn_glGetMapdv = NULL;
void gogl_glGetMapdv(GLenum target, GLenum query, GLdouble *v) {
    glGetMapdv(target, query, v);
}

PFNGLGETMAPFV pfn_glGetMapfv = NULL;
void gogl_glGetMapfv(GLenum target, GLenum query, GLfloat *v) {
    glGetMapfv(target, query, v);
}

PFNGLGETMAPIV pfn_glGetMapiv = NULL;
void gogl_glGetMapiv(GLenum target, GLenum query, GLint *v) {
    glGetMapiv(target, query, v);
}

PFNGLGETMATERIALFV pfn_glGetMaterialfv = NULL;
void gogl_glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params) {
    glGetMaterialfv(face, pname, params);
}

PFNGLGETMATERIALIV pfn_glGetMaterialiv = NULL;
void gogl_glGetMaterialiv(GLenum face, GLenum pname, GLint *params) {
    glGetMaterialiv(face, pname, params);
}

PFNGLGETPIXELMAPFV pfn_glGetPixelMapfv = NULL;
void gogl_glGetPixelMapfv(GLenum map_, GLfloat *values) {
    glGetPixelMapfv(map_, values);
}

PFNGLGETPIXELMAPUIV pfn_glGetPixelMapuiv = NULL;
void gogl_glGetPixelMapuiv(GLenum map_, GLuint *values) {
    glGetPixelMapuiv(map_, values);
}

PFNGLGETPIXELMAPUSV pfn_glGetPixelMapusv = NULL;
void gogl_glGetPixelMapusv(GLenum map_, GLushort *values) {
    glGetPixelMapusv(map_, values);
}

PFNGLGETPOLYGONSTIPPLE pfn_glGetPolygonStipple = NULL;
void gogl_glGetPolygonStipple(GLubyte *mask) {
    glGetPolygonStipple(mask);
}

PFNGLGETSTRING pfn_glGetString = NULL;
const GLubyte * gogl_glGetString(GLenum name) {
    return glGetString(name);
}

PFNGLGETTEXENVFV pfn_glGetTexEnvfv = NULL;
void gogl_glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params) {
    glGetTexEnvfv(target, pname, params);
}

PFNGLGETTEXENVIV pfn_glGetTexEnviv = NULL;
void gogl_glGetTexEnviv(GLenum target, GLenum pname, GLint *params) {
    glGetTexEnviv(target, pname, params);
}

PFNGLGETTEXGENDV pfn_glGetTexGendv = NULL;
void gogl_glGetTexGendv(GLenum coord, GLenum pname, GLdouble *params) {
    glGetTexGendv(coord, pname, params);
}

PFNGLGETTEXGENFV pfn_glGetTexGenfv = NULL;
void gogl_glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params) {
    glGetTexGenfv(coord, pname, params);
}

PFNGLGETTEXGENIV pfn_glGetTexGeniv = NULL;
void gogl_glGetTexGeniv(GLenum coord, GLenum pname, GLint *params) {
    glGetTexGeniv(coord, pname, params);
}

PFNGLGETTEXIMAGE pfn_glGetTexImage = NULL;
void gogl_glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type_, void *pixels) {
    glGetTexImage(target, level, format, type_, pixels);
}

PFNGLGETTEXLEVELPARAMETERFV pfn_glGetTexLevelParameterfv = NULL;
void gogl_glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params) {
    glGetTexLevelParameterfv(target, level, pname, params);
}

PFNGLGETTEXLEVELPARAMETERIV pfn_glGetTexLevelParameteriv = NULL;
void gogl_glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params) {
    glGetTexLevelParameteriv(target, level, pname, params);
}

PFNGLGETTEXPARAMETERFV pfn_glGetTexParameterfv = NULL;
void gogl_glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params) {
    glGetTexParameterfv(target, pname, params);
}

PFNGLGETTEXPARAMETERIV pfn_glGetTexParameteriv = NULL;
void gogl_glGetTexParameteriv(GLenum target, GLenum pname, GLint *params) {
    glGetTexParameteriv(target, pname, params);
}

PFNGLHINT pfn_glHint = NULL;
void gogl_glHint(GLenum target, GLenum mode) {
    glHint(target, mode);
}

PFNGLINDEXMASK pfn_glIndexMask = NULL;
void gogl_glIndexMask(GLuint mask) {
    glIndexMask(mask);
}

PFNGLINDEXD pfn_glIndexd = NULL;
void gogl_glIndexd(GLdouble c) {
    glIndexd(c);
}

PFNGLINDEXDV pfn_glIndexdv = NULL;
void gogl_glIndexdv(const GLdouble *c) {
    glIndexdv(c);
}

PFNGLINDEXF pfn_glIndexf = NULL;
void gogl_glIndexf(GLfloat c) {
    glIndexf(c);
}

PFNGLINDEXFV pfn_glIndexfv = NULL;
void gogl_glIndexfv(const GLfloat *c) {
    glIndexfv(c);
}

PFNGLINDEXI pfn_glIndexi = NULL;
void gogl_glIndexi(GLint c) {
    glIndexi(c);
}

PFNGLINDEXIV pfn_glIndexiv = NULL;
void gogl_glIndexiv(const GLint *c) {
    glIndexiv(c);
}

PFNGLINDEXS pfn_glIndexs = NULL;
void gogl_glIndexs(GLshort c) {
    glIndexs(c);
}

PFNGLINDEXSV pfn_glIndexsv = NULL;
void gogl_glIndexsv(const GLshort *c) {
    glIndexsv(c);
}

PFNGLINITNAMES pfn_glInitNames = NULL;
void gogl_glInitNames() {
    glInitNames();
}

PFNGLISENABLED pfn_glIsEnabled = NULL;
GLboolean gogl_glIsEnabled(GLenum cap) {
    return glIsEnabled(cap);
}

PFNGLISLIST pfn_glIsList = NULL;
GLboolean gogl_glIsList(GLuint list) {
    return glIsList(list);
}

PFNGLLIGHTMODELF pfn_glLightModelf = NULL;
void gogl_glLightModelf(GLenum pname, GLfloat param) {
    glLightModelf(pname, param);
}

PFNGLLIGHTMODELFV pfn_glLightModelfv = NULL;
void gogl_glLightModelfv(GLenum pname, const GLfloat *params) {
    glLightModelfv(pname, params);
}

PFNGLLIGHTMODELI pfn_glLightModeli = NULL;
void gogl_glLightModeli(GLenum pname, GLint param) {
    glLightModeli(pname, param);
}

PFNGLLIGHTMODELIV pfn_glLightModeliv = NULL;
void gogl_glLightModeliv(GLenum pname, const GLint *params) {
    glLightModeliv(pname, params);
}

PFNGLLIGHTF pfn_glLightf = NULL;
void gogl_glLightf(GLenum light, GLenum pname, GLfloat param) {
    glLightf(light, pname, param);
}

PFNGLLIGHTFV pfn_glLightfv = NULL;
void gogl_glLightfv(GLenum light, GLenum pname, const GLfloat *params) {
    glLightfv(light, pname, params);
}

PFNGLLIGHTI pfn_glLighti = NULL;
void gogl_glLighti(GLenum light, GLenum pname, GLint param) {
    glLighti(light, pname, param);
}

PFNGLLIGHTIV pfn_glLightiv = NULL;
void gogl_glLightiv(GLenum light, GLenum pname, const GLint *params) {
    glLightiv(light, pname, params);
}

PFNGLLINESTIPPLE pfn_glLineStipple = NULL;
void gogl_glLineStipple(GLint factor, GLushort pattern) {
    glLineStipple(factor, pattern);
}

PFNGLLINEWIDTH pfn_glLineWidth = NULL;
void gogl_glLineWidth(GLfloat width) {
    glLineWidth(width);
}

PFNGLLISTBASE pfn_glListBase = NULL;
void gogl_glListBase(GLuint base) {
    glListBase(base);
}

PFNGLLOADIDENTITY pfn_glLoadIdentity = NULL;
void gogl_glLoadIdentity() {
    glLoadIdentity();
}

PFNGLLOADMATRIXD pfn_glLoadMatrixd = NULL;
void gogl_glLoadMatrixd(const GLdouble *m) {
    glLoadMatrixd(m);
}

PFNGLLOADMATRIXF pfn_glLoadMatrixf = NULL;
void gogl_glLoadMatrixf(const GLfloat *m) {
    glLoadMatrixf(m);
}

PFNGLLOADNAME pfn_glLoadName = NULL;
void gogl_glLoadName(GLuint name) {
    glLoadName(name);
}

PFNGLLOGICOP pfn_glLogicOp = NULL;
void gogl_glLogicOp(GLenum opcode) {
    glLogicOp(opcode);
}

PFNGLMAP1D pfn_glMap1d = NULL;
void gogl_glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points) {
    glMap1d(target, u1, u2, stride, order, points);
}

PFNGLMAP1F pfn_glMap1f = NULL;
void gogl_glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points) {
    glMap1f(target, u1, u2, stride, order, points);
}

PFNGLMAP2D pfn_glMap2d = NULL;
void gogl_glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points) {
    glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

PFNGLMAP2F pfn_glMap2f = NULL;
void gogl_glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points) {
    glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

PFNGLMAPGRID1D pfn_glMapGrid1d = NULL;
void gogl_glMapGrid1d(GLint un, GLdouble u1, GLdouble u2) {
    glMapGrid1d(un, u1, u2);
}

PFNGLMAPGRID1F pfn_glMapGrid1f = NULL;
void gogl_glMapGrid1f(GLint un, GLfloat u1, GLfloat u2) {
    glMapGrid1f(un, u1, u2);
}

PFNGLMAPGRID2D pfn_glMapGrid2d = NULL;
void gogl_glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) {
    glMapGrid2d(un, u1, u2, vn, v1, v2);
}

PFNGLMAPGRID2F pfn_glMapGrid2f = NULL;
void gogl_glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) {
    glMapGrid2f(un, u1, u2, vn, v1, v2);
}

PFNGLMATERIALF pfn_glMaterialf = NULL;
void gogl_glMaterialf(GLenum face, GLenum pname, GLfloat param) {
    glMaterialf(face, pname, param);
}

PFNGLMATERIALFV pfn_glMaterialfv = NULL;
void gogl_glMaterialfv(GLenum face, GLenum pname, const GLfloat *params) {
    glMaterialfv(face, pname, params);
}

PFNGLMATERIALI pfn_glMateriali = NULL;
void gogl_glMateriali(GLenum face, GLenum pname, GLint param) {
    glMateriali(face, pname, param);
}

PFNGLMATERIALIV pfn_glMaterialiv = NULL;
void gogl_glMaterialiv(GLenum face, GLenum pname, const GLint *params) {
    glMaterialiv(face, pname, params);
}

PFNGLMATRIXMODE pfn_glMatrixMode = NULL;
void gogl_glMatrixMode(GLenum mode) {
    glMatrixMode(mode);
}

PFNGLMULTMATRIXD pfn_glMultMatrixd = NULL;
void gogl_glMultMatrixd(const GLdouble *m) {
    glMultMatrixd(m);
}

PFNGLMULTMATRIXF pfn_glMultMatrixf = NULL;
void gogl_glMultMatrixf(const GLfloat *m) {
    glMultMatrixf(m);
}

PFNGLNEWLIST pfn_glNewList = NULL;
void gogl_glNewList(GLuint list, GLenum mode) {
    glNewList(list, mode);
}

PFNGLNORMAL3B pfn_glNormal3b = NULL;
void gogl_glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz) {
    glNormal3b(nx, ny, nz);
}

PFNGLNORMAL3BV pfn_glNormal3bv = NULL;
void gogl_glNormal3bv(const GLbyte *v) {
    glNormal3bv(v);
}

PFNGLNORMAL3D pfn_glNormal3d = NULL;
void gogl_glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz) {
    glNormal3d(nx, ny, nz);
}

PFNGLNORMAL3DV pfn_glNormal3dv = NULL;
void gogl_glNormal3dv(const GLdouble *v) {
    glNormal3dv(v);
}

PFNGLNORMAL3F pfn_glNormal3f = NULL;
void gogl_glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz) {
    glNormal3f(nx, ny, nz);
}

PFNGLNORMAL3FV pfn_glNormal3fv = NULL;
void gogl_glNormal3fv(const GLfloat *v) {
    glNormal3fv(v);
}

PFNGLNORMAL3I pfn_glNormal3i = NULL;
void gogl_glNormal3i(GLint nx, GLint ny, GLint nz) {
    glNormal3i(nx, ny, nz);
}

PFNGLNORMAL3IV pfn_glNormal3iv = NULL;
void gogl_glNormal3iv(const GLint *v) {
    glNormal3iv(v);
}

PFNGLNORMAL3S pfn_glNormal3s = NULL;
void gogl_glNormal3s(GLshort nx, GLshort ny, GLshort nz) {
    glNormal3s(nx, ny, nz);
}

PFNGLNORMAL3SV pfn_glNormal3sv = NULL;
void gogl_glNormal3sv(const GLshort *v) {
    glNormal3sv(v);
}

PFNGLORTHO pfn_glOrtho = NULL;
void gogl_glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
    glOrtho(left, right, bottom, top, zNear, zFar);
}

PFNGLPASSTHROUGH pfn_glPassThrough = NULL;
void gogl_glPassThrough(GLfloat token) {
    glPassThrough(token);
}

PFNGLPIXELMAPFV pfn_glPixelMapfv = NULL;
void gogl_glPixelMapfv(GLenum map_, GLsizei mapsize, const GLfloat *values) {
    glPixelMapfv(map_, mapsize, values);
}

PFNGLPIXELMAPUIV pfn_glPixelMapuiv = NULL;
void gogl_glPixelMapuiv(GLenum map_, GLsizei mapsize, const GLuint *values) {
    glPixelMapuiv(map_, mapsize, values);
}

PFNGLPIXELMAPUSV pfn_glPixelMapusv = NULL;
void gogl_glPixelMapusv(GLenum map_, GLsizei mapsize, const GLushort *values) {
    glPixelMapusv(map_, mapsize, values);
}

PFNGLPIXELSTOREF pfn_glPixelStoref = NULL;
void gogl_glPixelStoref(GLenum pname, GLfloat param) {
    glPixelStoref(pname, param);
}

PFNGLPIXELSTOREI pfn_glPixelStorei = NULL;
void gogl_glPixelStorei(GLenum pname, GLint param) {
    glPixelStorei(pname, param);
}

PFNGLPIXELTRANSFERF pfn_glPixelTransferf = NULL;
void gogl_glPixelTransferf(GLenum pname, GLfloat param) {
    glPixelTransferf(pname, param);
}

PFNGLPIXELTRANSFERI pfn_glPixelTransferi = NULL;
void gogl_glPixelTransferi(GLenum pname, GLint param) {
    glPixelTransferi(pname, param);
}

PFNGLPIXELZOOM pfn_glPixelZoom = NULL;
void gogl_glPixelZoom(GLfloat xfactor, GLfloat yfactor) {
    glPixelZoom(xfactor, yfactor);
}

PFNGLPOINTSIZE pfn_glPointSize = NULL;
void gogl_glPointSize(GLfloat size) {
    glPointSize(size);
}

PFNGLPOLYGONMODE pfn_glPolygonMode = NULL;
void gogl_glPolygonMode(GLenum face, GLenum mode) {
    glPolygonMode(face, mode);
}

PFNGLPOLYGONSTIPPLE pfn_glPolygonStipple = NULL;
void gogl_glPolygonStipple(const GLubyte *mask) {
    glPolygonStipple(mask);
}

PFNGLPOPATTRIB pfn_glPopAttrib = NULL;
void gogl_glPopAttrib() {
    glPopAttrib();
}

PFNGLPOPMATRIX pfn_glPopMatrix = NULL;
void gogl_glPopMatrix() {
    glPopMatrix();
}

PFNGLPOPNAME pfn_glPopName = NULL;
void gogl_glPopName() {
    glPopName();
}

PFNGLPUSHATTRIB pfn_glPushAttrib = NULL;
void gogl_glPushAttrib(GLbitfield mask) {
    glPushAttrib(mask);
}

PFNGLPUSHMATRIX pfn_glPushMatrix = NULL;
void gogl_glPushMatrix() {
    glPushMatrix();
}

PFNGLPUSHNAME pfn_glPushName = NULL;
void gogl_glPushName(GLuint name) {
    glPushName(name);
}

PFNGLRASTERPOS2D pfn_glRasterPos2d = NULL;
void gogl_glRasterPos2d(GLdouble x, GLdouble y) {
    glRasterPos2d(x, y);
}

PFNGLRASTERPOS2DV pfn_glRasterPos2dv = NULL;
void gogl_glRasterPos2dv(const GLdouble *v) {
    glRasterPos2dv(v);
}

PFNGLRASTERPOS2F pfn_glRasterPos2f = NULL;
void gogl_glRasterPos2f(GLfloat x, GLfloat y) {
    glRasterPos2f(x, y);
}

PFNGLRASTERPOS2FV pfn_glRasterPos2fv = NULL;
void gogl_glRasterPos2fv(const GLfloat *v) {
    glRasterPos2fv(v);
}

PFNGLRASTERPOS2I pfn_glRasterPos2i = NULL;
void gogl_glRasterPos2i(GLint x, GLint y) {
    glRasterPos2i(x, y);
}

PFNGLRASTERPOS2IV pfn_glRasterPos2iv = NULL;
void gogl_glRasterPos2iv(const GLint *v) {
    glRasterPos2iv(v);
}

PFNGLRASTERPOS2S pfn_glRasterPos2s = NULL;
void gogl_glRasterPos2s(GLshort x, GLshort y) {
    glRasterPos2s(x, y);
}

PFNGLRASTERPOS2SV pfn_glRasterPos2sv = NULL;
void gogl_glRasterPos2sv(const GLshort *v) {
    glRasterPos2sv(v);
}

PFNGLRASTERPOS3D pfn_glRasterPos3d = NULL;
void gogl_glRasterPos3d(GLdouble x, GLdouble y, GLdouble z) {
    glRasterPos3d(x, y, z);
}

PFNGLRASTERPOS3DV pfn_glRasterPos3dv = NULL;
void gogl_glRasterPos3dv(const GLdouble *v) {
    glRasterPos3dv(v);
}

PFNGLRASTERPOS3F pfn_glRasterPos3f = NULL;
void gogl_glRasterPos3f(GLfloat x, GLfloat y, GLfloat z) {
    glRasterPos3f(x, y, z);
}

PFNGLRASTERPOS3FV pfn_glRasterPos3fv = NULL;
void gogl_glRasterPos3fv(const GLfloat *v) {
    glRasterPos3fv(v);
}

PFNGLRASTERPOS3I pfn_glRasterPos3i = NULL;
void gogl_glRasterPos3i(GLint x, GLint y, GLint z) {
    glRasterPos3i(x, y, z);
}

PFNGLRASTERPOS3IV pfn_glRasterPos3iv = NULL;
void gogl_glRasterPos3iv(const GLint *v) {
    glRasterPos3iv(v);
}

PFNGLRASTERPOS3S pfn_glRasterPos3s = NULL;
void gogl_glRasterPos3s(GLshort x, GLshort y, GLshort z) {
    glRasterPos3s(x, y, z);
}

PFNGLRASTERPOS3SV pfn_glRasterPos3sv = NULL;
void gogl_glRasterPos3sv(const GLshort *v) {
    glRasterPos3sv(v);
}

PFNGLRASTERPOS4D pfn_glRasterPos4d = NULL;
void gogl_glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glRasterPos4d(x, y, z, w);
}

PFNGLRASTERPOS4DV pfn_glRasterPos4dv = NULL;
void gogl_glRasterPos4dv(const GLdouble *v) {
    glRasterPos4dv(v);
}

PFNGLRASTERPOS4F pfn_glRasterPos4f = NULL;
void gogl_glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    glRasterPos4f(x, y, z, w);
}

PFNGLRASTERPOS4FV pfn_glRasterPos4fv = NULL;
void gogl_glRasterPos4fv(const GLfloat *v) {
    glRasterPos4fv(v);
}

PFNGLRASTERPOS4I pfn_glRasterPos4i = NULL;
void gogl_glRasterPos4i(GLint x, GLint y, GLint z, GLint w) {
    glRasterPos4i(x, y, z, w);
}

PFNGLRASTERPOS4IV pfn_glRasterPos4iv = NULL;
void gogl_glRasterPos4iv(const GLint *v) {
    glRasterPos4iv(v);
}

PFNGLRASTERPOS4S pfn_glRasterPos4s = NULL;
void gogl_glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w) {
    glRasterPos4s(x, y, z, w);
}

PFNGLRASTERPOS4SV pfn_glRasterPos4sv = NULL;
void gogl_glRasterPos4sv(const GLshort *v) {
    glRasterPos4sv(v);
}

PFNGLREADBUFFER pfn_glReadBuffer = NULL;
void gogl_glReadBuffer(GLenum src) {
    glReadBuffer(src);
}

PFNGLREADPIXELS pfn_glReadPixels = NULL;
void gogl_glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type_, void *pixels) {
    glReadPixels(x, y, width, height, format, type_, pixels);
}

PFNGLRECTD pfn_glRectd = NULL;
void gogl_glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) {
    glRectd(x1, y1, x2, y2);
}

PFNGLRECTDV pfn_glRectdv = NULL;
void gogl_glRectdv(const GLdouble *v1, const GLdouble *v2) {
    glRectdv(v1, v2);
}

PFNGLRECTF pfn_glRectf = NULL;
void gogl_glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) {
    glRectf(x1, y1, x2, y2);
}

PFNGLRECTFV pfn_glRectfv = NULL;
void gogl_glRectfv(const GLfloat *v1, const GLfloat *v2) {
    glRectfv(v1, v2);
}

PFNGLRECTI pfn_glRecti = NULL;
void gogl_glRecti(GLint x1, GLint y1, GLint x2, GLint y2) {
    glRecti(x1, y1, x2, y2);
}

PFNGLRECTIV pfn_glRectiv = NULL;
void gogl_glRectiv(const GLint *v1, const GLint *v2) {
    glRectiv(v1, v2);
}

PFNGLRECTS pfn_glRects = NULL;
void gogl_glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2) {
    glRects(x1, y1, x2, y2);
}

PFNGLRECTSV pfn_glRectsv = NULL;
void gogl_glRectsv(const GLshort *v1, const GLshort *v2) {
    glRectsv(v1, v2);
}

PFNGLRENDERMODE pfn_glRenderMode = NULL;
GLint gogl_glRenderMode(GLenum mode) {
    return glRenderMode(mode);
}

PFNGLROTATED pfn_glRotated = NULL;
void gogl_glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z) {
    glRotated(angle, x, y, z);
}

PFNGLROTATEF pfn_glRotatef = NULL;
void gogl_glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z) {
    glRotatef(angle, x, y, z);
}

PFNGLSCALED pfn_glScaled = NULL;
void gogl_glScaled(GLdouble x, GLdouble y, GLdouble z) {
    glScaled(x, y, z);
}

PFNGLSCALEF pfn_glScalef = NULL;
void gogl_glScalef(GLfloat x, GLfloat y, GLfloat z) {
    glScalef(x, y, z);
}

PFNGLSCISSOR pfn_glScissor = NULL;
void gogl_glScissor(GLint x, GLint y, GLsizei width, GLsizei height) {
    glScissor(x, y, width, height);
}

PFNGLSELECTBUFFER pfn_glSelectBuffer = NULL;
void gogl_glSelectBuffer(GLsizei size, GLuint *buffer) {
    glSelectBuffer(size, buffer);
}

PFNGLSHADEMODEL pfn_glShadeModel = NULL;
void gogl_glShadeModel(GLenum mode) {
    glShadeModel(mode);
}

PFNGLSTENCILFUNC pfn_glStencilFunc = NULL;
void gogl_glStencilFunc(GLenum func_, GLint ref, GLuint mask) {
    glStencilFunc(func_, ref, mask);
}

PFNGLSTENCILMASK pfn_glStencilMask = NULL;
void gogl_glStencilMask(GLuint mask) {
    glStencilMask(mask);
}

PFNGLSTENCILOP pfn_glStencilOp = NULL;
void gogl_glStencilOp(GLenum fail, GLenum zfail, GLenum zpass) {
    glStencilOp(fail, zfail, zpass);
}

PFNGLTEXCOORD1D pfn_glTexCoord1d = NULL;
void gogl_glTexCoord1d(GLdouble s) {
    glTexCoord1d(s);
}

PFNGLTEXCOORD1DV pfn_glTexCoord1dv = NULL;
void gogl_glTexCoord1dv(const GLdouble *v) {
    glTexCoord1dv(v);
}

PFNGLTEXCOORD1F pfn_glTexCoord1f = NULL;
void gogl_glTexCoord1f(GLfloat s) {
    glTexCoord1f(s);
}

PFNGLTEXCOORD1FV pfn_glTexCoord1fv = NULL;
void gogl_glTexCoord1fv(const GLfloat *v) {
    glTexCoord1fv(v);
}

PFNGLTEXCOORD1I pfn_glTexCoord1i = NULL;
void gogl_glTexCoord1i(GLint s) {
    glTexCoord1i(s);
}

PFNGLTEXCOORD1IV pfn_glTexCoord1iv = NULL;
void gogl_glTexCoord1iv(const GLint *v) {
    glTexCoord1iv(v);
}

PFNGLTEXCOORD1S pfn_glTexCoord1s = NULL;
void gogl_glTexCoord1s(GLshort s) {
    glTexCoord1s(s);
}

PFNGLTEXCOORD1SV pfn_glTexCoord1sv = NULL;
void gogl_glTexCoord1sv(const GLshort *v) {
    glTexCoord1sv(v);
}

PFNGLTEXCOORD2D pfn_glTexCoord2d = NULL;
void gogl_glTexCoord2d(GLdouble s, GLdouble t) {
    glTexCoord2d(s, t);
}

PFNGLTEXCOORD2DV pfn_glTexCoord2dv = NULL;
void gogl_glTexCoord2dv(const GLdouble *v) {
    glTexCoord2dv(v);
}

PFNGLTEXCOORD2F pfn_glTexCoord2f = NULL;
void gogl_glTexCoord2f(GLfloat s, GLfloat t) {
    glTexCoord2f(s, t);
}

PFNGLTEXCOORD2FV pfn_glTexCoord2fv = NULL;
void gogl_glTexCoord2fv(const GLfloat *v) {
    glTexCoord2fv(v);
}

PFNGLTEXCOORD2I pfn_glTexCoord2i = NULL;
void gogl_glTexCoord2i(GLint s, GLint t) {
    glTexCoord2i(s, t);
}

PFNGLTEXCOORD2IV pfn_glTexCoord2iv = NULL;
void gogl_glTexCoord2iv(const GLint *v) {
    glTexCoord2iv(v);
}

PFNGLTEXCOORD2S pfn_glTexCoord2s = NULL;
void gogl_glTexCoord2s(GLshort s, GLshort t) {
    glTexCoord2s(s, t);
}

PFNGLTEXCOORD2SV pfn_glTexCoord2sv = NULL;
void gogl_glTexCoord2sv(const GLshort *v) {
    glTexCoord2sv(v);
}

PFNGLTEXCOORD3D pfn_glTexCoord3d = NULL;
void gogl_glTexCoord3d(GLdouble s, GLdouble t, GLdouble r) {
    glTexCoord3d(s, t, r);
}

PFNGLTEXCOORD3DV pfn_glTexCoord3dv = NULL;
void gogl_glTexCoord3dv(const GLdouble *v) {
    glTexCoord3dv(v);
}

PFNGLTEXCOORD3F pfn_glTexCoord3f = NULL;
void gogl_glTexCoord3f(GLfloat s, GLfloat t, GLfloat r) {
    glTexCoord3f(s, t, r);
}

PFNGLTEXCOORD3FV pfn_glTexCoord3fv = NULL;
void gogl_glTexCoord3fv(const GLfloat *v) {
    glTexCoord3fv(v);
}

PFNGLTEXCOORD3I pfn_glTexCoord3i = NULL;
void gogl_glTexCoord3i(GLint s, GLint t, GLint r) {
    glTexCoord3i(s, t, r);
}

PFNGLTEXCOORD3IV pfn_glTexCoord3iv = NULL;
void gogl_glTexCoord3iv(const GLint *v) {
    glTexCoord3iv(v);
}

PFNGLTEXCOORD3S pfn_glTexCoord3s = NULL;
void gogl_glTexCoord3s(GLshort s, GLshort t, GLshort r) {
    glTexCoord3s(s, t, r);
}

PFNGLTEXCOORD3SV pfn_glTexCoord3sv = NULL;
void gogl_glTexCoord3sv(const GLshort *v) {
    glTexCoord3sv(v);
}

PFNGLTEXCOORD4D pfn_glTexCoord4d = NULL;
void gogl_glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
    glTexCoord4d(s, t, r, q);
}

PFNGLTEXCOORD4DV pfn_glTexCoord4dv = NULL;
void gogl_glTexCoord4dv(const GLdouble *v) {
    glTexCoord4dv(v);
}

PFNGLTEXCOORD4F pfn_glTexCoord4f = NULL;
void gogl_glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
    glTexCoord4f(s, t, r, q);
}

PFNGLTEXCOORD4FV pfn_glTexCoord4fv = NULL;
void gogl_glTexCoord4fv(const GLfloat *v) {
    glTexCoord4fv(v);
}

PFNGLTEXCOORD4I pfn_glTexCoord4i = NULL;
void gogl_glTexCoord4i(GLint s, GLint t, GLint r, GLint q) {
    glTexCoord4i(s, t, r, q);
}

PFNGLTEXCOORD4IV pfn_glTexCoord4iv = NULL;
void gogl_glTexCoord4iv(const GLint *v) {
    glTexCoord4iv(v);
}

PFNGLTEXCOORD4S pfn_glTexCoord4s = NULL;
void gogl_glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q) {
    glTexCoord4s(s, t, r, q);
}

PFNGLTEXCOORD4SV pfn_glTexCoord4sv = NULL;
void gogl_glTexCoord4sv(const GLshort *v) {
    glTexCoord4sv(v);
}

PFNGLTEXENVF pfn_glTexEnvf = NULL;
void gogl_glTexEnvf(GLenum target, GLenum pname, GLfloat param) {
    glTexEnvf(target, pname, param);
}

PFNGLTEXENVFV pfn_glTexEnvfv = NULL;
void gogl_glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params) {
    glTexEnvfv(target, pname, params);
}

PFNGLTEXENVI pfn_glTexEnvi = NULL;
void gogl_glTexEnvi(GLenum target, GLenum pname, GLint param) {
    glTexEnvi(target, pname, param);
}

PFNGLTEXENVIV pfn_glTexEnviv = NULL;
void gogl_glTexEnviv(GLenum target, GLenum pname, const GLint *params) {
    glTexEnviv(target, pname, params);
}

PFNGLTEXGEND pfn_glTexGend = NULL;
void gogl_glTexGend(GLenum coord, GLenum pname, GLdouble param) {
    glTexGend(coord, pname, param);
}

PFNGLTEXGENDV pfn_glTexGendv = NULL;
void gogl_glTexGendv(GLenum coord, GLenum pname, const GLdouble *params) {
    glTexGendv(coord, pname, params);
}

PFNGLTEXGENF pfn_glTexGenf = NULL;
void gogl_glTexGenf(GLenum coord, GLenum pname, GLfloat param) {
    glTexGenf(coord, pname, param);
}

PFNGLTEXGENFV pfn_glTexGenfv = NULL;
void gogl_glTexGenfv(GLenum coord, GLenum pname, const GLfloat *params) {
    glTexGenfv(coord, pname, params);
}

PFNGLTEXGENI pfn_glTexGeni = NULL;
void gogl_glTexGeni(GLenum coord, GLenum pname, GLint param) {
    glTexGeni(coord, pname, param);
}

PFNGLTEXGENIV pfn_glTexGeniv = NULL;
void gogl_glTexGeniv(GLenum coord, GLenum pname, const GLint *params) {
    glTexGeniv(coord, pname, params);
}

PFNGLTEXIMAGE1D pfn_glTexImage1D = NULL;
void gogl_glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type_, const void *pixels) {
    glTexImage1D(target, level, internalformat, width, border, format, type_, pixels);
}

PFNGLTEXIMAGE2D pfn_glTexImage2D = NULL;
void gogl_glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type_, const void *pixels) {
    glTexImage2D(target, level, internalformat, width, height, border, format, type_, pixels);
}

PFNGLTEXPARAMETERF pfn_glTexParameterf = NULL;
void gogl_glTexParameterf(GLenum target, GLenum pname, GLfloat param) {
    glTexParameterf(target, pname, param);
}

PFNGLTEXPARAMETERFV pfn_glTexParameterfv = NULL;
void gogl_glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params) {
    glTexParameterfv(target, pname, params);
}

PFNGLTEXPARAMETERI pfn_glTexParameteri = NULL;
void gogl_glTexParameteri(GLenum target, GLenum pname, GLint param) {
    glTexParameteri(target, pname, param);
}

PFNGLTEXPARAMETERIV pfn_glTexParameteriv = NULL;
void gogl_glTexParameteriv(GLenum target, GLenum pname, const GLint *params) {
    glTexParameteriv(target, pname, params);
}

PFNGLTRANSLATED pfn_glTranslated = NULL;
void gogl_glTranslated(GLdouble x, GLdouble y, GLdouble z) {
    glTranslated(x, y, z);
}

PFNGLTRANSLATEF pfn_glTranslatef = NULL;
void gogl_glTranslatef(GLfloat x, GLfloat y, GLfloat z) {
    glTranslatef(x, y, z);
}

PFNGLVERTEX2D pfn_glVertex2d = NULL;
void gogl_glVertex2d(GLdouble x, GLdouble y) {
    glVertex2d(x, y);
}

PFNGLVERTEX2DV pfn_glVertex2dv = NULL;
void gogl_glVertex2dv(const GLdouble *v) {
    glVertex2dv(v);
}

PFNGLVERTEX2F pfn_glVertex2f = NULL;
void gogl_glVertex2f(GLfloat x, GLfloat y) {
    glVertex2f(x, y);
}

PFNGLVERTEX2FV pfn_glVertex2fv = NULL;
void gogl_glVertex2fv(const GLfloat *v) {
    glVertex2fv(v);
}

PFNGLVERTEX2I pfn_glVertex2i = NULL;
void gogl_glVertex2i(GLint x, GLint y) {
    glVertex2i(x, y);
}

PFNGLVERTEX2IV pfn_glVertex2iv = NULL;
void gogl_glVertex2iv(const GLint *v) {
    glVertex2iv(v);
}

PFNGLVERTEX2S pfn_glVertex2s = NULL;
void gogl_glVertex2s(GLshort x, GLshort y) {
    glVertex2s(x, y);
}

PFNGLVERTEX2SV pfn_glVertex2sv = NULL;
void gogl_glVertex2sv(const GLshort *v) {
    glVertex2sv(v);
}

PFNGLVERTEX3D pfn_glVertex3d = NULL;
void gogl_glVertex3d(GLdouble x, GLdouble y, GLdouble z) {
    glVertex3d(x, y, z);
}

PFNGLVERTEX3DV pfn_glVertex3dv = NULL;
void gogl_glVertex3dv(const GLdouble *v) {
    glVertex3dv(v);
}

PFNGLVERTEX3F pfn_glVertex3f = NULL;
void gogl_glVertex3f(GLfloat x, GLfloat y, GLfloat z) {
    glVertex3f(x, y, z);
}

PFNGLVERTEX3FV pfn_glVertex3fv = NULL;
void gogl_glVertex3fv(const GLfloat *v) {
    glVertex3fv(v);
}

PFNGLVERTEX3I pfn_glVertex3i = NULL;
void gogl_glVertex3i(GLint x, GLint y, GLint z) {
    glVertex3i(x, y, z);
}

PFNGLVERTEX3IV pfn_glVertex3iv = NULL;
void gogl_glVertex3iv(const GLint *v) {
    glVertex3iv(v);
}

PFNGLVERTEX3S pfn_glVertex3s = NULL;
void gogl_glVertex3s(GLshort x, GLshort y, GLshort z) {
    glVertex3s(x, y, z);
}

PFNGLVERTEX3SV pfn_glVertex3sv = NULL;
void gogl_glVertex3sv(const GLshort *v) {
    glVertex3sv(v);
}

PFNGLVERTEX4D pfn_glVertex4d = NULL;
void gogl_glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glVertex4d(x, y, z, w);
}

PFNGLVERTEX4DV pfn_glVertex4dv = NULL;
void gogl_glVertex4dv(const GLdouble *v) {
    glVertex4dv(v);
}

PFNGLVERTEX4F pfn_glVertex4f = NULL;
void gogl_glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    glVertex4f(x, y, z, w);
}

PFNGLVERTEX4FV pfn_glVertex4fv = NULL;
void gogl_glVertex4fv(const GLfloat *v) {
    glVertex4fv(v);
}

PFNGLVERTEX4I pfn_glVertex4i = NULL;
void gogl_glVertex4i(GLint x, GLint y, GLint z, GLint w) {
    glVertex4i(x, y, z, w);
}

PFNGLVERTEX4IV pfn_glVertex4iv = NULL;
void gogl_glVertex4iv(const GLint *v) {
    glVertex4iv(v);
}

PFNGLVERTEX4S pfn_glVertex4s = NULL;
void gogl_glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w) {
    glVertex4s(x, y, z, w);
}

PFNGLVERTEX4SV pfn_glVertex4sv = NULL;
void gogl_glVertex4sv(const GLshort *v) {
    glVertex4sv(v);
}

PFNGLVIEWPORT pfn_glViewport = NULL;
void gogl_glViewport(GLint x, GLint y, GLsizei width, GLsizei height) {
    glViewport(x, y, width, height);
}

PFNGLARETEXTURESRESIDENT pfn_glAreTexturesResident = NULL;
GLboolean gogl_glAreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences) {
    return glAreTexturesResident(n, textures, residences);
}

PFNGLARRAYELEMENT pfn_glArrayElement = NULL;
void gogl_glArrayElement(GLint i) {
    glArrayElement(i);
}

PFNGLBINDTEXTURE pfn_glBindTexture = NULL;
void gogl_glBindTexture(GLenum target, GLuint texture) {
    glBindTexture(target, texture);
}

PFNGLCOLORPOINTER pfn_glColorPointer = NULL;
void gogl_glColorPointer(GLint size, GLenum type_, GLsizei stride, const void *pointer) {
    glColorPointer(size, type_, stride, pointer);
}

PFNGLCOPYTEXIMAGE1D pfn_glCopyTexImage1D = NULL;
void gogl_glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
    glCopyTexImage1D(target, level, internalformat, x, y, width, border);
}

PFNGLCOPYTEXIMAGE2D pfn_glCopyTexImage2D = NULL;
void gogl_glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
    glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
}

PFNGLCOPYTEXSUBIMAGE1D pfn_glCopyTexSubImage1D = NULL;
void gogl_glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
    glCopyTexSubImage1D(target, level, xoffset, x, y, width);
}

PFNGLCOPYTEXSUBIMAGE2D pfn_glCopyTexSubImage2D = NULL;
void gogl_glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
    glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
}

PFNGLDELETETEXTURES pfn_glDeleteTextures = NULL;
void gogl_glDeleteTextures(GLsizei n, const GLuint *textures) {
    glDeleteTextures(n, textures);
}

PFNGLDISABLECLIENTSTATE pfn_glDisableClientState = NULL;
void gogl_glDisableClientState(GLenum array) {
    glDisableClientState(array);
}

PFNGLDRAWARRAYS pfn_glDrawArrays = NULL;
void gogl_glDrawArrays(GLenum mode, GLint first, GLsizei count) {
    glDrawArrays(mode, first, count);
}

PFNGLDRAWELEMENTS pfn_glDrawElements = NULL;
void gogl_glDrawElements(GLenum mode, GLsizei count, GLenum type_, const void *indices) {
    glDrawElements(mode, count, type_, indices);
}

PFNGLEDGEFLAGPOINTER pfn_glEdgeFlagPointer = NULL;
void gogl_glEdgeFlagPointer(GLsizei stride, const void *pointer) {
    glEdgeFlagPointer(stride, pointer);
}

PFNGLENABLECLIENTSTATE pfn_glEnableClientState = NULL;
void gogl_glEnableClientState(GLenum array) {
    glEnableClientState(array);
}

PFNGLGENTEXTURES pfn_glGenTextures = NULL;
void gogl_glGenTextures(GLsizei n, GLuint *textures) {
    glGenTextures(n, textures);
}

PFNGLGETPOINTERV pfn_glGetPointerv = NULL;
void gogl_glGetPointerv(GLenum pname, void **params) {
    glGetPointerv(pname, params);
}

PFNGLINDEXPOINTER pfn_glIndexPointer = NULL;
void gogl_glIndexPointer(GLenum type_, GLsizei stride, const void *pointer) {
    glIndexPointer(type_, stride, pointer);
}

PFNGLINDEXUB pfn_glIndexub = NULL;
void gogl_glIndexub(GLubyte c) {
    glIndexub(c);
}

PFNGLINDEXUBV pfn_glIndexubv = NULL;
void gogl_glIndexubv(const GLubyte *c) {
    glIndexubv(c);
}

PFNGLINTERLEAVEDARRAYS pfn_glInterleavedArrays = NULL;
void gogl_glInterleavedArrays(GLenum format, GLsizei stride, const void *pointer) {
    glInterleavedArrays(format, stride, pointer);
}

PFNGLISTEXTURE pfn_glIsTexture = NULL;
GLboolean gogl_glIsTexture(GLuint texture) {
    return glIsTexture(texture);
}

PFNGLNORMALPOINTER pfn_glNormalPointer = NULL;
void gogl_glNormalPointer(GLenum type_, GLsizei stride, const void *pointer) {
    glNormalPointer(type_, stride, pointer);
}

PFNGLPOLYGONOFFSET pfn_glPolygonOffset = NULL;
void gogl_glPolygonOffset(GLfloat factor, GLfloat units) {
    glPolygonOffset(factor, units);
}

PFNGLPOPCLIENTATTRIB pfn_glPopClientAttrib = NULL;
void gogl_glPopClientAttrib() {
    glPopClientAttrib();
}

PFNGLPRIORITIZETEXTURES pfn_glPrioritizeTextures = NULL;
void gogl_glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLfloat *priorities) {
    glPrioritizeTextures(n, textures, priorities);
}

PFNGLPUSHCLIENTATTRIB pfn_glPushClientAttrib = NULL;
void gogl_glPushClientAttrib(GLbitfield mask) {
    glPushClientAttrib(mask);
}

PFNGLTEXCOORDPOINTER pfn_glTexCoordPointer = NULL;
void gogl_glTexCoordPointer(GLint size, GLenum type_, GLsizei stride, const void *pointer) {
    glTexCoordPointer(size, type_, stride, pointer);
}

PFNGLTEXSUBIMAGE1D pfn_glTexSubImage1D = NULL;
void gogl_glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type_, const void *pixels) {
    glTexSubImage1D(target, level, xoffset, width, format, type_, pixels);
}

PFNGLTEXSUBIMAGE2D pfn_glTexSubImage2D = NULL;
void gogl_glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type_, const void *pixels) {
    glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type_, pixels);
}

PFNGLVERTEXPOINTER pfn_glVertexPointer = NULL;
void gogl_glVertexPointer(GLint size, GLenum type_, GLsizei stride, const void *pointer) {
    glVertexPointer(size, type_, stride, pointer);
}

PFNGLCOPYTEXSUBIMAGE3D pfn_glCopyTexSubImage3D = NULL;
void gogl_glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
    glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

PFNGLDRAWRANGEELEMENTS pfn_glDrawRangeElements = NULL;
void gogl_glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type_, const void *indices) {
    glDrawRangeElements(mode, start, end, count, type_, indices);
}

PFNGLTEXIMAGE3D pfn_glTexImage3D = NULL;
void gogl_glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type_, const void *pixels) {
    glTexImage3D(target, level, internalformat, width, height, depth, border, format, type_, pixels);
}

PFNGLTEXSUBIMAGE3D pfn_glTexSubImage3D = NULL;
void gogl_glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type_, const void *pixels) {
    glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type_, pixels);
}

PFNGLACTIVETEXTURE pfn_glActiveTexture = NULL;
void gogl_glActiveTexture(GLenum texture) {
    glActiveTexture(texture);
}

PFNGLCLIENTACTIVETEXTURE pfn_glClientActiveTexture = NULL;
void gogl_glClientActiveTexture(GLenum texture) {
    glClientActiveTexture(texture);
}

PFNGLCOMPRESSEDTEXIMAGE1D pfn_glCompressedTexImage1D = NULL;
void gogl_glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data) {
    glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);
}

PFNGLCOMPRESSEDTEXIMAGE2D pfn_glCompressedTexImage2D = NULL;
void gogl_glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data) {
    glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
}

PFNGLCOMPRESSEDTEXIMAGE3D pfn_glCompressedTexImage3D = NULL;
void gogl_glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data) {
    glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
}

PFNGLCOMPRESSEDTEXSUBIMAGE1D pfn_glCompressedTexSubImage1D = NULL;
void gogl_glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data) {
    glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);
}

PFNGLCOMPRESSEDTEXSUBIMAGE2D pfn_glCompressedTexSubImage2D = NULL;
void gogl_glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data) {
    glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

PFNGLCOMPRESSEDTEXSUBIMAGE3D pfn_glCompressedTexSubImage3D = NULL;
void gogl_glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data) {
    glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

PFNGLGETCOMPRESSEDTEXIMAGE pfn_glGetCompressedTexImage = NULL;
void gogl_glGetCompressedTexImage(GLenum target, GLint level, void *img) {
    glGetCompressedTexImage(target, level, img);
}

PFNGLLOADTRANSPOSEMATRIXD pfn_glLoadTransposeMatrixd = NULL;
void gogl_glLoadTransposeMatrixd(const GLdouble *m) {
    glLoadTransposeMatrixd(m);
}

PFNGLLOADTRANSPOSEMATRIXF pfn_glLoadTransposeMatrixf = NULL;
void gogl_glLoadTransposeMatrixf(const GLfloat *m) {
    glLoadTransposeMatrixf(m);
}

PFNGLMULTTRANSPOSEMATRIXD pfn_glMultTransposeMatrixd = NULL;
void gogl_glMultTransposeMatrixd(const GLdouble *m) {
    glMultTransposeMatrixd(m);
}

PFNGLMULTTRANSPOSEMATRIXF pfn_glMultTransposeMatrixf = NULL;
void gogl_glMultTransposeMatrixf(const GLfloat *m) {
    glMultTransposeMatrixf(m);
}

PFNGLMULTITEXCOORD1D pfn_glMultiTexCoord1d = NULL;
void gogl_glMultiTexCoord1d(GLenum target, GLdouble s) {
    glMultiTexCoord1d(target, s);
}

PFNGLMULTITEXCOORD1DV pfn_glMultiTexCoord1dv = NULL;
void gogl_glMultiTexCoord1dv(GLenum target, const GLdouble *v) {
    glMultiTexCoord1dv(target, v);
}

PFNGLMULTITEXCOORD1F pfn_glMultiTexCoord1f = NULL;
void gogl_glMultiTexCoord1f(GLenum target, GLfloat s) {
    glMultiTexCoord1f(target, s);
}

PFNGLMULTITEXCOORD1FV pfn_glMultiTexCoord1fv = NULL;
void gogl_glMultiTexCoord1fv(GLenum target, const GLfloat *v) {
    glMultiTexCoord1fv(target, v);
}

PFNGLMULTITEXCOORD1I pfn_glMultiTexCoord1i = NULL;
void gogl_glMultiTexCoord1i(GLenum target, GLint s) {
    glMultiTexCoord1i(target, s);
}

PFNGLMULTITEXCOORD1IV pfn_glMultiTexCoord1iv = NULL;
void gogl_glMultiTexCoord1iv(GLenum target, const GLint *v) {
    glMultiTexCoord1iv(target, v);
}

PFNGLMULTITEXCOORD1S pfn_glMultiTexCoord1s = NULL;
void gogl_glMultiTexCoord1s(GLenum target, GLshort s) {
    glMultiTexCoord1s(target, s);
}

PFNGLMULTITEXCOORD1SV pfn_glMultiTexCoord1sv = NULL;
void gogl_glMultiTexCoord1sv(GLenum target, const GLshort *v) {
    glMultiTexCoord1sv(target, v);
}

PFNGLMULTITEXCOORD2D pfn_glMultiTexCoord2d = NULL;
void gogl_glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t) {
    glMultiTexCoord2d(target, s, t);
}

PFNGLMULTITEXCOORD2DV pfn_glMultiTexCoord2dv = NULL;
void gogl_glMultiTexCoord2dv(GLenum target, const GLdouble *v) {
    glMultiTexCoord2dv(target, v);
}

PFNGLMULTITEXCOORD2F pfn_glMultiTexCoord2f = NULL;
void gogl_glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t) {
    glMultiTexCoord2f(target, s, t);
}

PFNGLMULTITEXCOORD2FV pfn_glMultiTexCoord2fv = NULL;
void gogl_glMultiTexCoord2fv(GLenum target, const GLfloat *v) {
    glMultiTexCoord2fv(target, v);
}

PFNGLMULTITEXCOORD2I pfn_glMultiTexCoord2i = NULL;
void gogl_glMultiTexCoord2i(GLenum target, GLint s, GLint t) {
    glMultiTexCoord2i(target, s, t);
}

PFNGLMULTITEXCOORD2IV pfn_glMultiTexCoord2iv = NULL;
void gogl_glMultiTexCoord2iv(GLenum target, const GLint *v) {
    glMultiTexCoord2iv(target, v);
}

PFNGLMULTITEXCOORD2S pfn_glMultiTexCoord2s = NULL;
void gogl_glMultiTexCoord2s(GLenum target, GLshort s, GLshort t) {
    glMultiTexCoord2s(target, s, t);
}

PFNGLMULTITEXCOORD2SV pfn_glMultiTexCoord2sv = NULL;
void gogl_glMultiTexCoord2sv(GLenum target, const GLshort *v) {
    glMultiTexCoord2sv(target, v);
}

PFNGLMULTITEXCOORD3D pfn_glMultiTexCoord3d = NULL;
void gogl_glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r) {
    glMultiTexCoord3d(target, s, t, r);
}

PFNGLMULTITEXCOORD3DV pfn_glMultiTexCoord3dv = NULL;
void gogl_glMultiTexCoord3dv(GLenum target, const GLdouble *v) {
    glMultiTexCoord3dv(target, v);
}

PFNGLMULTITEXCOORD3F pfn_glMultiTexCoord3f = NULL;
void gogl_glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r) {
    glMultiTexCoord3f(target, s, t, r);
}

PFNGLMULTITEXCOORD3FV pfn_glMultiTexCoord3fv = NULL;
void gogl_glMultiTexCoord3fv(GLenum target, const GLfloat *v) {
    glMultiTexCoord3fv(target, v);
}

PFNGLMULTITEXCOORD3I pfn_glMultiTexCoord3i = NULL;
void gogl_glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r) {
    glMultiTexCoord3i(target, s, t, r);
}

PFNGLMULTITEXCOORD3IV pfn_glMultiTexCoord3iv = NULL;
void gogl_glMultiTexCoord3iv(GLenum target, const GLint *v) {
    glMultiTexCoord3iv(target, v);
}

PFNGLMULTITEXCOORD3S pfn_glMultiTexCoord3s = NULL;
void gogl_glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r) {
    glMultiTexCoord3s(target, s, t, r);
}

PFNGLMULTITEXCOORD3SV pfn_glMultiTexCoord3sv = NULL;
void gogl_glMultiTexCoord3sv(GLenum target, const GLshort *v) {
    glMultiTexCoord3sv(target, v);
}

PFNGLMULTITEXCOORD4D pfn_glMultiTexCoord4d = NULL;
void gogl_glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
    glMultiTexCoord4d(target, s, t, r, q);
}

PFNGLMULTITEXCOORD4DV pfn_glMultiTexCoord4dv = NULL;
void gogl_glMultiTexCoord4dv(GLenum target, const GLdouble *v) {
    glMultiTexCoord4dv(target, v);
}

PFNGLMULTITEXCOORD4F pfn_glMultiTexCoord4f = NULL;
void gogl_glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
    glMultiTexCoord4f(target, s, t, r, q);
}

PFNGLMULTITEXCOORD4FV pfn_glMultiTexCoord4fv = NULL;
void gogl_glMultiTexCoord4fv(GLenum target, const GLfloat *v) {
    glMultiTexCoord4fv(target, v);
}

PFNGLMULTITEXCOORD4I pfn_glMultiTexCoord4i = NULL;
void gogl_glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q) {
    glMultiTexCoord4i(target, s, t, r, q);
}

PFNGLMULTITEXCOORD4IV pfn_glMultiTexCoord4iv = NULL;
void gogl_glMultiTexCoord4iv(GLenum target, const GLint *v) {
    glMultiTexCoord4iv(target, v);
}

PFNGLMULTITEXCOORD4S pfn_glMultiTexCoord4s = NULL;
void gogl_glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) {
    glMultiTexCoord4s(target, s, t, r, q);
}

PFNGLMULTITEXCOORD4SV pfn_glMultiTexCoord4sv = NULL;
void gogl_glMultiTexCoord4sv(GLenum target, const GLshort *v) {
    glMultiTexCoord4sv(target, v);
}

PFNGLSAMPLECOVERAGE pfn_glSampleCoverage = NULL;
void gogl_glSampleCoverage(GLfloat value, GLboolean invert) {
    glSampleCoverage(value, invert);
}

PFNGLBLENDCOLOR pfn_glBlendColor = NULL;
void gogl_glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
    glBlendColor(red, green, blue, alpha);
}

PFNGLBLENDEQUATION pfn_glBlendEquation = NULL;
void gogl_glBlendEquation(GLenum mode) {
    glBlendEquation(mode);
}

PFNGLBLENDFUNCSEPARATE pfn_glBlendFuncSeparate = NULL;
void gogl_glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {
    glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

PFNGLFOGCOORDPOINTER pfn_glFogCoordPointer = NULL;
void gogl_glFogCoordPointer(GLenum type_, GLsizei stride, const void *pointer) {
    glFogCoordPointer(type_, stride, pointer);
}

PFNGLFOGCOORDD pfn_glFogCoordd = NULL;
void gogl_glFogCoordd(GLdouble coord) {
    glFogCoordd(coord);
}

PFNGLFOGCOORDDV pfn_glFogCoorddv = NULL;
void gogl_glFogCoorddv(const GLdouble *coord) {
    glFogCoorddv(coord);
}

PFNGLFOGCOORDF pfn_glFogCoordf = NULL;
void gogl_glFogCoordf(GLfloat coord) {
    glFogCoordf(coord);
}

PFNGLFOGCOORDFV pfn_glFogCoordfv = NULL;
void gogl_glFogCoordfv(const GLfloat *coord) {
    glFogCoordfv(coord);
}

PFNGLMULTIDRAWARRAYS pfn_glMultiDrawArrays = NULL;
void gogl_glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount) {
    glMultiDrawArrays(mode, first, count, drawcount);
}

PFNGLMULTIDRAWELEMENTS pfn_glMultiDrawElements = NULL;
void gogl_glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type_, const void *const*indices, GLsizei drawcount) {
    glMultiDrawElements(mode, count, type_, indices, drawcount);
}

PFNGLPOINTPARAMETERF pfn_glPointParameterf = NULL;
void gogl_glPointParameterf(GLenum pname, GLfloat param) {
    glPointParameterf(pname, param);
}

PFNGLPOINTPARAMETERFV pfn_glPointParameterfv = NULL;
void gogl_glPointParameterfv(GLenum pname, const GLfloat *params) {
    glPointParameterfv(pname, params);
}

PFNGLPOINTPARAMETERI pfn_glPointParameteri = NULL;
void gogl_glPointParameteri(GLenum pname, GLint param) {
    glPointParameteri(pname, param);
}

PFNGLPOINTPARAMETERIV pfn_glPointParameteriv = NULL;
void gogl_glPointParameteriv(GLenum pname, const GLint *params) {
    glPointParameteriv(pname, params);
}

PFNGLSECONDARYCOLOR3B pfn_glSecondaryColor3b = NULL;
void gogl_glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue) {
    glSecondaryColor3b(red, green, blue);
}

PFNGLSECONDARYCOLOR3BV pfn_glSecondaryColor3bv = NULL;
void gogl_glSecondaryColor3bv(const GLbyte *v) {
    glSecondaryColor3bv(v);
}

PFNGLSECONDARYCOLOR3D pfn_glSecondaryColor3d = NULL;
void gogl_glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue) {
    glSecondaryColor3d(red, green, blue);
}

PFNGLSECONDARYCOLOR3DV pfn_glSecondaryColor3dv = NULL;
void gogl_glSecondaryColor3dv(const GLdouble *v) {
    glSecondaryColor3dv(v);
}

PFNGLSECONDARYCOLOR3F pfn_glSecondaryColor3f = NULL;
void gogl_glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue) {
    glSecondaryColor3f(red, green, blue);
}

PFNGLSECONDARYCOLOR3FV pfn_glSecondaryColor3fv = NULL;
void gogl_glSecondaryColor3fv(const GLfloat *v) {
    glSecondaryColor3fv(v);
}

PFNGLSECONDARYCOLOR3I pfn_glSecondaryColor3i = NULL;
void gogl_glSecondaryColor3i(GLint red, GLint green, GLint blue) {
    glSecondaryColor3i(red, green, blue);
}

PFNGLSECONDARYCOLOR3IV pfn_glSecondaryColor3iv = NULL;
void gogl_glSecondaryColor3iv(const GLint *v) {
    glSecondaryColor3iv(v);
}

PFNGLSECONDARYCOLOR3S pfn_glSecondaryColor3s = NULL;
void gogl_glSecondaryColor3s(GLshort red, GLshort green, GLshort blue) {
    glSecondaryColor3s(red, green, blue);
}

PFNGLSECONDARYCOLOR3SV pfn_glSecondaryColor3sv = NULL;
void gogl_glSecondaryColor3sv(const GLshort *v) {
    glSecondaryColor3sv(v);
}

PFNGLSECONDARYCOLOR3UB pfn_glSecondaryColor3ub = NULL;
void gogl_glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue) {
    glSecondaryColor3ub(red, green, blue);
}

PFNGLSECONDARYCOLOR3UBV pfn_glSecondaryColor3ubv = NULL;
void gogl_glSecondaryColor3ubv(const GLubyte *v) {
    glSecondaryColor3ubv(v);
}

PFNGLSECONDARYCOLOR3UI pfn_glSecondaryColor3ui = NULL;
void gogl_glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue) {
    glSecondaryColor3ui(red, green, blue);
}

PFNGLSECONDARYCOLOR3UIV pfn_glSecondaryColor3uiv = NULL;
void gogl_glSecondaryColor3uiv(const GLuint *v) {
    glSecondaryColor3uiv(v);
}

PFNGLSECONDARYCOLOR3US pfn_glSecondaryColor3us = NULL;
void gogl_glSecondaryColor3us(GLushort red, GLushort green, GLushort blue) {
    glSecondaryColor3us(red, green, blue);
}

PFNGLSECONDARYCOLOR3USV pfn_glSecondaryColor3usv = NULL;
void gogl_glSecondaryColor3usv(const GLushort *v) {
    glSecondaryColor3usv(v);
}

PFNGLSECONDARYCOLORPOINTER pfn_glSecondaryColorPointer = NULL;
void gogl_glSecondaryColorPointer(GLint size, GLenum type_, GLsizei stride, const void *pointer) {
    glSecondaryColorPointer(size, type_, stride, pointer);
}

PFNGLWINDOWPOS2D pfn_glWindowPos2d = NULL;
void gogl_glWindowPos2d(GLdouble x, GLdouble y) {
    glWindowPos2d(x, y);
}

PFNGLWINDOWPOS2DV pfn_glWindowPos2dv = NULL;
void gogl_glWindowPos2dv(const GLdouble *v) {
    glWindowPos2dv(v);
}

PFNGLWINDOWPOS2F pfn_glWindowPos2f = NULL;
void gogl_glWindowPos2f(GLfloat x, GLfloat y) {
    glWindowPos2f(x, y);
}

PFNGLWINDOWPOS2FV pfn_glWindowPos2fv = NULL;
void gogl_glWindowPos2fv(const GLfloat *v) {
    glWindowPos2fv(v);
}

PFNGLWINDOWPOS2I pfn_glWindowPos2i = NULL;
void gogl_glWindowPos2i(GLint x, GLint y) {
    glWindowPos2i(x, y);
}

PFNGLWINDOWPOS2IV pfn_glWindowPos2iv = NULL;
void gogl_glWindowPos2iv(const GLint *v) {
    glWindowPos2iv(v);
}

PFNGLWINDOWPOS2S pfn_glWindowPos2s = NULL;
void gogl_glWindowPos2s(GLshort x, GLshort y) {
    glWindowPos2s(x, y);
}

PFNGLWINDOWPOS2SV pfn_glWindowPos2sv = NULL;
void gogl_glWindowPos2sv(const GLshort *v) {
    glWindowPos2sv(v);
}

PFNGLWINDOWPOS3D pfn_glWindowPos3d = NULL;
void gogl_glWindowPos3d(GLdouble x, GLdouble y, GLdouble z) {
    glWindowPos3d(x, y, z);
}

PFNGLWINDOWPOS3DV pfn_glWindowPos3dv = NULL;
void gogl_glWindowPos3dv(const GLdouble *v) {
    glWindowPos3dv(v);
}

PFNGLWINDOWPOS3F pfn_glWindowPos3f = NULL;
void gogl_glWindowPos3f(GLfloat x, GLfloat y, GLfloat z) {
    glWindowPos3f(x, y, z);
}

PFNGLWINDOWPOS3FV pfn_glWindowPos3fv = NULL;
void gogl_glWindowPos3fv(const GLfloat *v) {
    glWindowPos3fv(v);
}

PFNGLWINDOWPOS3I pfn_glWindowPos3i = NULL;
void gogl_glWindowPos3i(GLint x, GLint y, GLint z) {
    glWindowPos3i(x, y, z);
}

PFNGLWINDOWPOS3IV pfn_glWindowPos3iv = NULL;
void gogl_glWindowPos3iv(const GLint *v) {
    glWindowPos3iv(v);
}

PFNGLWINDOWPOS3S pfn_glWindowPos3s = NULL;
void gogl_glWindowPos3s(GLshort x, GLshort y, GLshort z) {
    glWindowPos3s(x, y, z);
}

PFNGLWINDOWPOS3SV pfn_glWindowPos3sv = NULL;
void gogl_glWindowPos3sv(const GLshort *v) {
    glWindowPos3sv(v);
}

PFNGLBEGINQUERY pfn_glBeginQuery = NULL;
void gogl_glBeginQuery(GLenum target, GLuint id) {
    glBeginQuery(target, id);
}

PFNGLBINDBUFFER pfn_glBindBuffer = NULL;
void gogl_glBindBuffer(GLenum target, GLuint buffer) {
    glBindBuffer(target, buffer);
}

PFNGLBUFFERDATA pfn_glBufferData = NULL;
void gogl_glBufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage) {
    glBufferData(target, size, data, usage);
}

PFNGLBUFFERSUBDATA pfn_glBufferSubData = NULL;
void gogl_glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void *data) {
    glBufferSubData(target, offset, size, data);
}

PFNGLDELETEBUFFERS pfn_glDeleteBuffers = NULL;
void gogl_glDeleteBuffers(GLsizei n, const GLuint *buffers) {
    glDeleteBuffers(n, buffers);
}

PFNGLDELETEQUERIES pfn_glDeleteQueries = NULL;
void gogl_glDeleteQueries(GLsizei n, const GLuint *ids) {
    glDeleteQueries(n, ids);
}

PFNGLENDQUERY pfn_glEndQuery = NULL;
void gogl_glEndQuery(GLenum target) {
    glEndQuery(target);
}

PFNGLGENBUFFERS pfn_glGenBuffers = NULL;
void gogl_glGenBuffers(GLsizei n, GLuint *buffers) {
    glGenBuffers(n, buffers);
}

PFNGLGENQUERIES pfn_glGenQueries = NULL;
void gogl_glGenQueries(GLsizei n, GLuint *ids) {
    glGenQueries(n, ids);
}

PFNGLGETBUFFERPARAMETERIV pfn_glGetBufferParameteriv = NULL;
void gogl_glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params) {
    glGetBufferParameteriv(target, pname, params);
}

PFNGLGETBUFFERPOINTERV pfn_glGetBufferPointerv = NULL;
void gogl_glGetBufferPointerv(GLenum target, GLenum pname, void **params) {
    glGetBufferPointerv(target, pname, params);
}

PFNGLGETBUFFERSUBDATA pfn_glGetBufferSubData = NULL;
void gogl_glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void *data) {
    glGetBufferSubData(target, offset, size, data);
}

PFNGLGETQUERYOBJECTIV pfn_glGetQueryObjectiv = NULL;
void gogl_glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params) {
    glGetQueryObjectiv(id, pname, params);
}

PFNGLGETQUERYOBJECTUIV pfn_glGetQueryObjectuiv = NULL;
void gogl_glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params) {
    glGetQueryObjectuiv(id, pname, params);
}

PFNGLGETQUERYIV pfn_glGetQueryiv = NULL;
void gogl_glGetQueryiv(GLenum target, GLenum pname, GLint *params) {
    glGetQueryiv(target, pname, params);
}

PFNGLISBUFFER pfn_glIsBuffer = NULL;
GLboolean gogl_glIsBuffer(GLuint buffer) {
    return glIsBuffer(buffer);
}

PFNGLISQUERY pfn_glIsQuery = NULL;
GLboolean gogl_glIsQuery(GLuint id) {
    return glIsQuery(id);
}

PFNGLMAPBUFFER pfn_glMapBuffer = NULL;
void * gogl_glMapBuffer(GLenum target, GLenum access) {
    glMapBuffer(target, access);
}

PFNGLUNMAPBUFFER pfn_glUnmapBuffer = NULL;
GLboolean gogl_glUnmapBuffer(GLenum target) {
    return glUnmapBuffer(target);
}

PFNGLATTACHSHADER pfn_glAttachShader = NULL;
void gogl_glAttachShader(GLuint program, GLuint shader) {
    glAttachShader(program, shader);
}

PFNGLBINDATTRIBLOCATION pfn_glBindAttribLocation = NULL;
void gogl_glBindAttribLocation(GLuint program, GLuint index, const GLchar *name) {
    glBindAttribLocation(program, index, name);
}

PFNGLBLENDEQUATIONSEPARATE pfn_glBlendEquationSeparate = NULL;
void gogl_glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha) {
    glBlendEquationSeparate(modeRGB, modeAlpha);
}

PFNGLCOMPILESHADER pfn_glCompileShader = NULL;
void gogl_glCompileShader(GLuint shader) {
    glCompileShader(shader);
}

PFNGLCREATEPROGRAM pfn_glCreateProgram = NULL;
GLuint gogl_glCreateProgram() {
    return glCreateProgram();
}

PFNGLCREATESHADER pfn_glCreateShader = NULL;
GLuint gogl_glCreateShader(GLenum type_) {
    return glCreateShader(type_);
}

PFNGLDELETEPROGRAM pfn_glDeleteProgram = NULL;
void gogl_glDeleteProgram(GLuint program) {
    glDeleteProgram(program);
}

PFNGLDELETESHADER pfn_glDeleteShader = NULL;
void gogl_glDeleteShader(GLuint shader) {
    glDeleteShader(shader);
}

PFNGLDETACHSHADER pfn_glDetachShader = NULL;
void gogl_glDetachShader(GLuint program, GLuint shader) {
    glDetachShader(program, shader);
}

PFNGLDISABLEVERTEXATTRIBARRAY pfn_glDisableVertexAttribArray = NULL;
void gogl_glDisableVertexAttribArray(GLuint index) {
    glDisableVertexAttribArray(index);
}

PFNGLDRAWBUFFERS pfn_glDrawBuffers = NULL;
void gogl_glDrawBuffers(GLsizei n, const GLenum *bufs) {
    glDrawBuffers(n, bufs);
}

PFNGLENABLEVERTEXATTRIBARRAY pfn_glEnableVertexAttribArray = NULL;
void gogl_glEnableVertexAttribArray(GLuint index) {
    glEnableVertexAttribArray(index);
}

PFNGLGETACTIVEATTRIB pfn_glGetActiveAttrib = NULL;
void gogl_glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type_, GLchar *name) {
    glGetActiveAttrib(program, index, bufSize, length, size, type_, name);
}

PFNGLGETACTIVEUNIFORM pfn_glGetActiveUniform = NULL;
void gogl_glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type_, GLchar *name) {
    glGetActiveUniform(program, index, bufSize, length, size, type_, name);
}

PFNGLGETATTACHEDSHADERS pfn_glGetAttachedShaders = NULL;
void gogl_glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders) {
    glGetAttachedShaders(program, maxCount, count, shaders);
}

PFNGLGETATTRIBLOCATION pfn_glGetAttribLocation = NULL;
GLint gogl_glGetAttribLocation(GLuint program, const GLchar *name) {
    return glGetAttribLocation(program, name);
}

PFNGLGETPROGRAMINFOLOG pfn_glGetProgramInfoLog = NULL;
void gogl_glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {
    glGetProgramInfoLog(program, bufSize, length, infoLog);
}

PFNGLGETPROGRAMIV pfn_glGetProgramiv = NULL;
void gogl_glGetProgramiv(GLuint program, GLenum pname, GLint *params) {
    glGetProgramiv(program, pname, params);
}

PFNGLGETSHADERINFOLOG pfn_glGetShaderInfoLog = NULL;
void gogl_glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {
    glGetShaderInfoLog(shader, bufSize, length, infoLog);
}

PFNGLGETSHADERSOURCE pfn_glGetShaderSource = NULL;
void gogl_glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source) {
    glGetShaderSource(shader, bufSize, length, source);
}

PFNGLGETSHADERIV pfn_glGetShaderiv = NULL;
void gogl_glGetShaderiv(GLuint shader, GLenum pname, GLint *params) {
    glGetShaderiv(shader, pname, params);
}

PFNGLGETUNIFORMLOCATION pfn_glGetUniformLocation = NULL;
GLint gogl_glGetUniformLocation(GLuint program, const GLchar *name) {
    return glGetUniformLocation(program, name);
}

PFNGLGETUNIFORMFV pfn_glGetUniformfv = NULL;
void gogl_glGetUniformfv(GLuint program, GLint location, GLfloat *params) {
    glGetUniformfv(program, location, params);
}

PFNGLGETUNIFORMIV pfn_glGetUniformiv = NULL;
void gogl_glGetUniformiv(GLuint program, GLint location, GLint *params) {
    glGetUniformiv(program, location, params);
}

PFNGLGETVERTEXATTRIBPOINTERV pfn_glGetVertexAttribPointerv = NULL;
void gogl_glGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer) {
    glGetVertexAttribPointerv(index, pname, pointer);
}

PFNGLGETVERTEXATTRIBDV pfn_glGetVertexAttribdv = NULL;
void gogl_glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params) {
    glGetVertexAttribdv(index, pname, params);
}

PFNGLGETVERTEXATTRIBFV pfn_glGetVertexAttribfv = NULL;
void gogl_glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params) {
    glGetVertexAttribfv(index, pname, params);
}

PFNGLGETVERTEXATTRIBIV pfn_glGetVertexAttribiv = NULL;
void gogl_glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params) {
    glGetVertexAttribiv(index, pname, params);
}

PFNGLISPROGRAM pfn_glIsProgram = NULL;
GLboolean gogl_glIsProgram(GLuint program) {
    return glIsProgram(program);
}

PFNGLISSHADER pfn_glIsShader = NULL;
GLboolean gogl_glIsShader(GLuint shader) {
    return glIsShader(shader);
}

PFNGLLINKPROGRAM pfn_glLinkProgram = NULL;
void gogl_glLinkProgram(GLuint program) {
    glLinkProgram(program);
}

PFNGLSHADERSOURCE pfn_glShaderSource = NULL;
void gogl_glShaderSource(GLuint shader, GLsizei count, const GLchar *const*string_, const GLint *length) {
    glShaderSource(shader, count, string_, length);
}

PFNGLSTENCILFUNCSEPARATE pfn_glStencilFuncSeparate = NULL;
void gogl_glStencilFuncSeparate(GLenum face, GLenum func_, GLint ref, GLuint mask) {
    glStencilFuncSeparate(face, func_, ref, mask);
}

PFNGLSTENCILMASKSEPARATE pfn_glStencilMaskSeparate = NULL;
void gogl_glStencilMaskSeparate(GLenum face, GLuint mask) {
    glStencilMaskSeparate(face, mask);
}

PFNGLSTENCILOPSEPARATE pfn_glStencilOpSeparate = NULL;
void gogl_glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) {
    glStencilOpSeparate(face, sfail, dpfail, dppass);
}

PFNGLUNIFORM1F pfn_glUniform1f = NULL;
void gogl_glUniform1f(GLint location, GLfloat v0) {
    glUniform1f(location, v0);
}

PFNGLUNIFORM1FV pfn_glUniform1fv = NULL;
void gogl_glUniform1fv(GLint location, GLsizei count, const GLfloat *value) {
    glUniform1fv(location, count, value);
}

PFNGLUNIFORM1I pfn_glUniform1i = NULL;
void gogl_glUniform1i(GLint location, GLint v0) {
    glUniform1i(location, v0);
}

PFNGLUNIFORM1IV pfn_glUniform1iv = NULL;
void gogl_glUniform1iv(GLint location, GLsizei count, const GLint *value) {
    glUniform1iv(location, count, value);
}

PFNGLUNIFORM2F pfn_glUniform2f = NULL;
void gogl_glUniform2f(GLint location, GLfloat v0, GLfloat v1) {
    glUniform2f(location, v0, v1);
}

PFNGLUNIFORM2FV pfn_glUniform2fv = NULL;
void gogl_glUniform2fv(GLint location, GLsizei count, const GLfloat *value) {
    glUniform2fv(location, count, value);
}

PFNGLUNIFORM2I pfn_glUniform2i = NULL;
void gogl_glUniform2i(GLint location, GLint v0, GLint v1) {
    glUniform2i(location, v0, v1);
}

PFNGLUNIFORM2IV pfn_glUniform2iv = NULL;
void gogl_glUniform2iv(GLint location, GLsizei count, const GLint *value) {
    glUniform2iv(location, count, value);
}

PFNGLUNIFORM3F pfn_glUniform3f = NULL;
void gogl_glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
    glUniform3f(location, v0, v1, v2);
}

PFNGLUNIFORM3FV pfn_glUniform3fv = NULL;
void gogl_glUniform3fv(GLint location, GLsizei count, const GLfloat *value) {
    glUniform3fv(location, count, value);
}

PFNGLUNIFORM3I pfn_glUniform3i = NULL;
void gogl_glUniform3i(GLint location, GLint v0, GLint v1, GLint v2) {
    glUniform3i(location, v0, v1, v2);
}

PFNGLUNIFORM3IV pfn_glUniform3iv = NULL;
void gogl_glUniform3iv(GLint location, GLsizei count, const GLint *value) {
    glUniform3iv(location, count, value);
}

PFNGLUNIFORM4F pfn_glUniform4f = NULL;
void gogl_glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
    glUniform4f(location, v0, v1, v2, v3);
}

PFNGLUNIFORM4FV pfn_glUniform4fv = NULL;
void gogl_glUniform4fv(GLint location, GLsizei count, const GLfloat *value) {
    glUniform4fv(location, count, value);
}

PFNGLUNIFORM4I pfn_glUniform4i = NULL;
void gogl_glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
    glUniform4i(location, v0, v1, v2, v3);
}

PFNGLUNIFORM4IV pfn_glUniform4iv = NULL;
void gogl_glUniform4iv(GLint location, GLsizei count, const GLint *value) {
    glUniform4iv(location, count, value);
}

PFNGLUNIFORMMATRIX2FV pfn_glUniformMatrix2fv = NULL;
void gogl_glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glUniformMatrix2fv(location, count, transpose, value);
}

PFNGLUNIFORMMATRIX3FV pfn_glUniformMatrix3fv = NULL;
void gogl_glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glUniformMatrix3fv(location, count, transpose, value);
}

PFNGLUNIFORMMATRIX4FV pfn_glUniformMatrix4fv = NULL;
void gogl_glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glUniformMatrix4fv(location, count, transpose, value);
}

PFNGLUSEPROGRAM pfn_glUseProgram = NULL;
void gogl_glUseProgram(GLuint program) {
    glUseProgram(program);
}

PFNGLVALIDATEPROGRAM pfn_glValidateProgram = NULL;
void gogl_glValidateProgram(GLuint program) {
    glValidateProgram(program);
}

PFNGLVERTEXATTRIB1D pfn_glVertexAttrib1d = NULL;
void gogl_glVertexAttrib1d(GLuint index, GLdouble x) {
    glVertexAttrib1d(index, x);
}

PFNGLVERTEXATTRIB1DV pfn_glVertexAttrib1dv = NULL;
void gogl_glVertexAttrib1dv(GLuint index, const GLdouble *v) {
    glVertexAttrib1dv(index, v);
}

PFNGLVERTEXATTRIB1F pfn_glVertexAttrib1f = NULL;
void gogl_glVertexAttrib1f(GLuint index, GLfloat x) {
    glVertexAttrib1f(index, x);
}

PFNGLVERTEXATTRIB1FV pfn_glVertexAttrib1fv = NULL;
void gogl_glVertexAttrib1fv(GLuint index, const GLfloat *v) {
    glVertexAttrib1fv(index, v);
}

PFNGLVERTEXATTRIB1S pfn_glVertexAttrib1s = NULL;
void gogl_glVertexAttrib1s(GLuint index, GLshort x) {
    glVertexAttrib1s(index, x);
}

PFNGLVERTEXATTRIB1SV pfn_glVertexAttrib1sv = NULL;
void gogl_glVertexAttrib1sv(GLuint index, const GLshort *v) {
    glVertexAttrib1sv(index, v);
}

PFNGLVERTEXATTRIB2D pfn_glVertexAttrib2d = NULL;
void gogl_glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y) {
    glVertexAttrib2d(index, x, y);
}

PFNGLVERTEXATTRIB2DV pfn_glVertexAttrib2dv = NULL;
void gogl_glVertexAttrib2dv(GLuint index, const GLdouble *v) {
    glVertexAttrib2dv(index, v);
}

PFNGLVERTEXATTRIB2F pfn_glVertexAttrib2f = NULL;
void gogl_glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y) {
    glVertexAttrib2f(index, x, y);
}

PFNGLVERTEXATTRIB2FV pfn_glVertexAttrib2fv = NULL;
void gogl_glVertexAttrib2fv(GLuint index, const GLfloat *v) {
    glVertexAttrib2fv(index, v);
}

PFNGLVERTEXATTRIB2S pfn_glVertexAttrib2s = NULL;
void gogl_glVertexAttrib2s(GLuint index, GLshort x, GLshort y) {
    glVertexAttrib2s(index, x, y);
}

PFNGLVERTEXATTRIB2SV pfn_glVertexAttrib2sv = NULL;
void gogl_glVertexAttrib2sv(GLuint index, const GLshort *v) {
    glVertexAttrib2sv(index, v);
}

PFNGLVERTEXATTRIB3D pfn_glVertexAttrib3d = NULL;
void gogl_glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
    glVertexAttrib3d(index, x, y, z);
}

PFNGLVERTEXATTRIB3DV pfn_glVertexAttrib3dv = NULL;
void gogl_glVertexAttrib3dv(GLuint index, const GLdouble *v) {
    glVertexAttrib3dv(index, v);
}

PFNGLVERTEXATTRIB3F pfn_glVertexAttrib3f = NULL;
void gogl_glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z) {
    glVertexAttrib3f(index, x, y, z);
}

PFNGLVERTEXATTRIB3FV pfn_glVertexAttrib3fv = NULL;
void gogl_glVertexAttrib3fv(GLuint index, const GLfloat *v) {
    glVertexAttrib3fv(index, v);
}

PFNGLVERTEXATTRIB3S pfn_glVertexAttrib3s = NULL;
void gogl_glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z) {
    glVertexAttrib3s(index, x, y, z);
}

PFNGLVERTEXATTRIB3SV pfn_glVertexAttrib3sv = NULL;
void gogl_glVertexAttrib3sv(GLuint index, const GLshort *v) {
    glVertexAttrib3sv(index, v);
}

PFNGLVERTEXATTRIB4NBV pfn_glVertexAttrib4Nbv = NULL;
void gogl_glVertexAttrib4Nbv(GLuint index, const GLbyte *v) {
    glVertexAttrib4Nbv(index, v);
}

PFNGLVERTEXATTRIB4NIV pfn_glVertexAttrib4Niv = NULL;
void gogl_glVertexAttrib4Niv(GLuint index, const GLint *v) {
    glVertexAttrib4Niv(index, v);
}

PFNGLVERTEXATTRIB4NSV pfn_glVertexAttrib4Nsv = NULL;
void gogl_glVertexAttrib4Nsv(GLuint index, const GLshort *v) {
    glVertexAttrib4Nsv(index, v);
}

PFNGLVERTEXATTRIB4NUB pfn_glVertexAttrib4Nub = NULL;
void gogl_glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
    glVertexAttrib4Nub(index, x, y, z, w);
}

PFNGLVERTEXATTRIB4NUBV pfn_glVertexAttrib4Nubv = NULL;
void gogl_glVertexAttrib4Nubv(GLuint index, const GLubyte *v) {
    glVertexAttrib4Nubv(index, v);
}

PFNGLVERTEXATTRIB4NUIV pfn_glVertexAttrib4Nuiv = NULL;
void gogl_glVertexAttrib4Nuiv(GLuint index, const GLuint *v) {
    glVertexAttrib4Nuiv(index, v);
}

PFNGLVERTEXATTRIB4NUSV pfn_glVertexAttrib4Nusv = NULL;
void gogl_glVertexAttrib4Nusv(GLuint index, const GLushort *v) {
    glVertexAttrib4Nusv(index, v);
}

PFNGLVERTEXATTRIB4BV pfn_glVertexAttrib4bv = NULL;
void gogl_glVertexAttrib4bv(GLuint index, const GLbyte *v) {
    glVertexAttrib4bv(index, v);
}

PFNGLVERTEXATTRIB4D pfn_glVertexAttrib4d = NULL;
void gogl_glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glVertexAttrib4d(index, x, y, z, w);
}

PFNGLVERTEXATTRIB4DV pfn_glVertexAttrib4dv = NULL;
void gogl_glVertexAttrib4dv(GLuint index, const GLdouble *v) {
    glVertexAttrib4dv(index, v);
}

PFNGLVERTEXATTRIB4F pfn_glVertexAttrib4f = NULL;
void gogl_glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    glVertexAttrib4f(index, x, y, z, w);
}

PFNGLVERTEXATTRIB4FV pfn_glVertexAttrib4fv = NULL;
void gogl_glVertexAttrib4fv(GLuint index, const GLfloat *v) {
    glVertexAttrib4fv(index, v);
}

PFNGLVERTEXATTRIB4IV pfn_glVertexAttrib4iv = NULL;
void gogl_glVertexAttrib4iv(GLuint index, const GLint *v) {
    glVertexAttrib4iv(index, v);
}

PFNGLVERTEXATTRIB4S pfn_glVertexAttrib4s = NULL;
void gogl_glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
    glVertexAttrib4s(index, x, y, z, w);
}

PFNGLVERTEXATTRIB4SV pfn_glVertexAttrib4sv = NULL;
void gogl_glVertexAttrib4sv(GLuint index, const GLshort *v) {
    glVertexAttrib4sv(index, v);
}

PFNGLVERTEXATTRIB4UBV pfn_glVertexAttrib4ubv = NULL;
void gogl_glVertexAttrib4ubv(GLuint index, const GLubyte *v) {
    glVertexAttrib4ubv(index, v);
}

PFNGLVERTEXATTRIB4UIV pfn_glVertexAttrib4uiv = NULL;
void gogl_glVertexAttrib4uiv(GLuint index, const GLuint *v) {
    glVertexAttrib4uiv(index, v);
}

PFNGLVERTEXATTRIB4USV pfn_glVertexAttrib4usv = NULL;
void gogl_glVertexAttrib4usv(GLuint index, const GLushort *v) {
    glVertexAttrib4usv(index, v);
}

PFNGLVERTEXATTRIBPOINTER pfn_glVertexAttribPointer = NULL;
void gogl_glVertexAttribPointer(GLuint index, GLint size, GLenum type_, GLboolean normalized, GLsizei stride, const void *pointer) {
    glVertexAttribPointer(index, size, type_, normalized, stride, pointer);
}

PFNGLUNIFORMMATRIX2X3FV pfn_glUniformMatrix2x3fv = NULL;
void gogl_glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glUniformMatrix2x3fv(location, count, transpose, value);
}

PFNGLUNIFORMMATRIX2X4FV pfn_glUniformMatrix2x4fv = NULL;
void gogl_glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glUniformMatrix2x4fv(location, count, transpose, value);
}

PFNGLUNIFORMMATRIX3X2FV pfn_glUniformMatrix3x2fv = NULL;
void gogl_glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glUniformMatrix3x2fv(location, count, transpose, value);
}

PFNGLUNIFORMMATRIX3X4FV pfn_glUniformMatrix3x4fv = NULL;
void gogl_glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glUniformMatrix3x4fv(location, count, transpose, value);
}

PFNGLUNIFORMMATRIX4X2FV pfn_glUniformMatrix4x2fv = NULL;
void gogl_glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glUniformMatrix4x2fv(location, count, transpose, value);
}

PFNGLUNIFORMMATRIX4X3FV pfn_glUniformMatrix4x3fv = NULL;
void gogl_glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
    glUniformMatrix4x3fv(location, count, transpose, value);
}

typedef void* (* GROGloadproc)(const char *name);

int gogl_Init(GROGloadproc loader) {
    int major, minor;
    GLVersion.major = 0; GLVersion.minor = 0;
    if ((pfn_glGetString = (PFNGLGETSTRING)loader("glGetString")) == NULL) return 0;
    const char *ver = (const char *)glGetString(GL_VERSION);
    if (ver == NULL) return 0;
    while (*ver != '\0' && (*ver < '0' || *ver > '9')) ver++;
    if (*ver == '\0') return 0;
#ifdef _MSC_VER
    sscanf_s(ver, "%d.%d", &major, &minor);
#else
    sscanf(ver, "%d.%d", &major, &minor);
#endif
    GLVersion.major = major; GLVersion.minor = minor;

    if ((pfn_glAccum = (PFNGLACCUM)loader("glAccum")) == NULL) return 0;
    if ((pfn_glAlphaFunc = (PFNGLALPHAFUNC)loader("glAlphaFunc")) == NULL) return 0;
    if ((pfn_glBegin = (PFNGLBEGIN)loader("glBegin")) == NULL) return 0;
    if ((pfn_glBitmap = (PFNGLBITMAP)loader("glBitmap")) == NULL) return 0;
    if ((pfn_glBlendFunc = (PFNGLBLENDFUNC)loader("glBlendFunc")) == NULL) return 0;
    if ((pfn_glCallList = (PFNGLCALLLIST)loader("glCallList")) == NULL) return 0;
    if ((pfn_glCallLists = (PFNGLCALLLISTS)loader("glCallLists")) == NULL) return 0;
    if ((pfn_glClear = (PFNGLCLEAR)loader("glClear")) == NULL) return 0;
    if ((pfn_glClearAccum = (PFNGLCLEARACCUM)loader("glClearAccum")) == NULL) return 0;
    if ((pfn_glClearColor = (PFNGLCLEARCOLOR)loader("glClearColor")) == NULL) return 0;
    if ((pfn_glClearDepth = (PFNGLCLEARDEPTH)loader("glClearDepth")) == NULL) return 0;
    if ((pfn_glClearIndex = (PFNGLCLEARINDEX)loader("glClearIndex")) == NULL) return 0;
    if ((pfn_glClearStencil = (PFNGLCLEARSTENCIL)loader("glClearStencil")) == NULL) return 0;
    if ((pfn_glClipPlane = (PFNGLCLIPPLANE)loader("glClipPlane")) == NULL) return 0;
    if ((pfn_glColor3b = (PFNGLCOLOR3B)loader("glColor3b")) == NULL) return 0;
    if ((pfn_glColor3bv = (PFNGLCOLOR3BV)loader("glColor3bv")) == NULL) return 0;
    if ((pfn_glColor3d = (PFNGLCOLOR3D)loader("glColor3d")) == NULL) return 0;
    if ((pfn_glColor3dv = (PFNGLCOLOR3DV)loader("glColor3dv")) == NULL) return 0;
    if ((pfn_glColor3f = (PFNGLCOLOR3F)loader("glColor3f")) == NULL) return 0;
    if ((pfn_glColor3fv = (PFNGLCOLOR3FV)loader("glColor3fv")) == NULL) return 0;
    if ((pfn_glColor3i = (PFNGLCOLOR3I)loader("glColor3i")) == NULL) return 0;
    if ((pfn_glColor3iv = (PFNGLCOLOR3IV)loader("glColor3iv")) == NULL) return 0;
    if ((pfn_glColor3s = (PFNGLCOLOR3S)loader("glColor3s")) == NULL) return 0;
    if ((pfn_glColor3sv = (PFNGLCOLOR3SV)loader("glColor3sv")) == NULL) return 0;
    if ((pfn_glColor3ub = (PFNGLCOLOR3UB)loader("glColor3ub")) == NULL) return 0;
    if ((pfn_glColor3ubv = (PFNGLCOLOR3UBV)loader("glColor3ubv")) == NULL) return 0;
    if ((pfn_glColor3ui = (PFNGLCOLOR3UI)loader("glColor3ui")) == NULL) return 0;
    if ((pfn_glColor3uiv = (PFNGLCOLOR3UIV)loader("glColor3uiv")) == NULL) return 0;
    if ((pfn_glColor3us = (PFNGLCOLOR3US)loader("glColor3us")) == NULL) return 0;
    if ((pfn_glColor3usv = (PFNGLCOLOR3USV)loader("glColor3usv")) == NULL) return 0;
    if ((pfn_glColor4b = (PFNGLCOLOR4B)loader("glColor4b")) == NULL) return 0;
    if ((pfn_glColor4bv = (PFNGLCOLOR4BV)loader("glColor4bv")) == NULL) return 0;
    if ((pfn_glColor4d = (PFNGLCOLOR4D)loader("glColor4d")) == NULL) return 0;
    if ((pfn_glColor4dv = (PFNGLCOLOR4DV)loader("glColor4dv")) == NULL) return 0;
    if ((pfn_glColor4f = (PFNGLCOLOR4F)loader("glColor4f")) == NULL) return 0;
    if ((pfn_glColor4fv = (PFNGLCOLOR4FV)loader("glColor4fv")) == NULL) return 0;
    if ((pfn_glColor4i = (PFNGLCOLOR4I)loader("glColor4i")) == NULL) return 0;
    if ((pfn_glColor4iv = (PFNGLCOLOR4IV)loader("glColor4iv")) == NULL) return 0;
    if ((pfn_glColor4s = (PFNGLCOLOR4S)loader("glColor4s")) == NULL) return 0;
    if ((pfn_glColor4sv = (PFNGLCOLOR4SV)loader("glColor4sv")) == NULL) return 0;
    if ((pfn_glColor4ub = (PFNGLCOLOR4UB)loader("glColor4ub")) == NULL) return 0;
    if ((pfn_glColor4ubv = (PFNGLCOLOR4UBV)loader("glColor4ubv")) == NULL) return 0;
    if ((pfn_glColor4ui = (PFNGLCOLOR4UI)loader("glColor4ui")) == NULL) return 0;
    if ((pfn_glColor4uiv = (PFNGLCOLOR4UIV)loader("glColor4uiv")) == NULL) return 0;
    if ((pfn_glColor4us = (PFNGLCOLOR4US)loader("glColor4us")) == NULL) return 0;
    if ((pfn_glColor4usv = (PFNGLCOLOR4USV)loader("glColor4usv")) == NULL) return 0;
    if ((pfn_glColorMask = (PFNGLCOLORMASK)loader("glColorMask")) == NULL) return 0;
    if ((pfn_glColorMaterial = (PFNGLCOLORMATERIAL)loader("glColorMaterial")) == NULL) return 0;
    if ((pfn_glCopyPixels = (PFNGLCOPYPIXELS)loader("glCopyPixels")) == NULL) return 0;
    if ((pfn_glCullFace = (PFNGLCULLFACE)loader("glCullFace")) == NULL) return 0;
    if ((pfn_glDeleteLists = (PFNGLDELETELISTS)loader("glDeleteLists")) == NULL) return 0;
    if ((pfn_glDepthFunc = (PFNGLDEPTHFUNC)loader("glDepthFunc")) == NULL) return 0;
    if ((pfn_glDepthMask = (PFNGLDEPTHMASK)loader("glDepthMask")) == NULL) return 0;
    if ((pfn_glDepthRange = (PFNGLDEPTHRANGE)loader("glDepthRange")) == NULL) return 0;
    if ((pfn_glDisable = (PFNGLDISABLE)loader("glDisable")) == NULL) return 0;
    if ((pfn_glDrawBuffer = (PFNGLDRAWBUFFER)loader("glDrawBuffer")) == NULL) return 0;
    if ((pfn_glDrawPixels = (PFNGLDRAWPIXELS)loader("glDrawPixels")) == NULL) return 0;
    if ((pfn_glEdgeFlag = (PFNGLEDGEFLAG)loader("glEdgeFlag")) == NULL) return 0;
    if ((pfn_glEdgeFlagv = (PFNGLEDGEFLAGV)loader("glEdgeFlagv")) == NULL) return 0;
    if ((pfn_glEnable = (PFNGLENABLE)loader("glEnable")) == NULL) return 0;
    if ((pfn_glEnd = (PFNGLEND)loader("glEnd")) == NULL) return 0;
    if ((pfn_glEndList = (PFNGLENDLIST)loader("glEndList")) == NULL) return 0;
    if ((pfn_glEvalCoord1d = (PFNGLEVALCOORD1D)loader("glEvalCoord1d")) == NULL) return 0;
    if ((pfn_glEvalCoord1dv = (PFNGLEVALCOORD1DV)loader("glEvalCoord1dv")) == NULL) return 0;
    if ((pfn_glEvalCoord1f = (PFNGLEVALCOORD1F)loader("glEvalCoord1f")) == NULL) return 0;
    if ((pfn_glEvalCoord1fv = (PFNGLEVALCOORD1FV)loader("glEvalCoord1fv")) == NULL) return 0;
    if ((pfn_glEvalCoord2d = (PFNGLEVALCOORD2D)loader("glEvalCoord2d")) == NULL) return 0;
    if ((pfn_glEvalCoord2dv = (PFNGLEVALCOORD2DV)loader("glEvalCoord2dv")) == NULL) return 0;
    if ((pfn_glEvalCoord2f = (PFNGLEVALCOORD2F)loader("glEvalCoord2f")) == NULL) return 0;
    if ((pfn_glEvalCoord2fv = (PFNGLEVALCOORD2FV)loader("glEvalCoord2fv")) == NULL) return 0;
    if ((pfn_glEvalMesh1 = (PFNGLEVALMESH1)loader("glEvalMesh1")) == NULL) return 0;
    if ((pfn_glEvalMesh2 = (PFNGLEVALMESH2)loader("glEvalMesh2")) == NULL) return 0;
    if ((pfn_glEvalPoint1 = (PFNGLEVALPOINT1)loader("glEvalPoint1")) == NULL) return 0;
    if ((pfn_glEvalPoint2 = (PFNGLEVALPOINT2)loader("glEvalPoint2")) == NULL) return 0;
    if ((pfn_glFeedbackBuffer = (PFNGLFEEDBACKBUFFER)loader("glFeedbackBuffer")) == NULL) return 0;
    if ((pfn_glFinish = (PFNGLFINISH)loader("glFinish")) == NULL) return 0;
    if ((pfn_glFlush = (PFNGLFLUSH)loader("glFlush")) == NULL) return 0;
    if ((pfn_glFogf = (PFNGLFOGF)loader("glFogf")) == NULL) return 0;
    if ((pfn_glFogfv = (PFNGLFOGFV)loader("glFogfv")) == NULL) return 0;
    if ((pfn_glFogi = (PFNGLFOGI)loader("glFogi")) == NULL) return 0;
    if ((pfn_glFogiv = (PFNGLFOGIV)loader("glFogiv")) == NULL) return 0;
    if ((pfn_glFrontFace = (PFNGLFRONTFACE)loader("glFrontFace")) == NULL) return 0;
    if ((pfn_glFrustum = (PFNGLFRUSTUM)loader("glFrustum")) == NULL) return 0;
    if ((pfn_glGenLists = (PFNGLGENLISTS)loader("glGenLists")) == NULL) return 0;
    if ((pfn_glGetBooleanv = (PFNGLGETBOOLEANV)loader("glGetBooleanv")) == NULL) return 0;
    if ((pfn_glGetClipPlane = (PFNGLGETCLIPPLANE)loader("glGetClipPlane")) == NULL) return 0;
    if ((pfn_glGetDoublev = (PFNGLGETDOUBLEV)loader("glGetDoublev")) == NULL) return 0;
    if ((pfn_glGetError = (PFNGLGETERROR)loader("glGetError")) == NULL) return 0;
    if ((pfn_glGetFloatv = (PFNGLGETFLOATV)loader("glGetFloatv")) == NULL) return 0;
    if ((pfn_glGetIntegerv = (PFNGLGETINTEGERV)loader("glGetIntegerv")) == NULL) return 0;
    if ((pfn_glGetLightfv = (PFNGLGETLIGHTFV)loader("glGetLightfv")) == NULL) return 0;
    if ((pfn_glGetLightiv = (PFNGLGETLIGHTIV)loader("glGetLightiv")) == NULL) return 0;
    if ((pfn_glGetMapdv = (PFNGLGETMAPDV)loader("glGetMapdv")) == NULL) return 0;
    if ((pfn_glGetMapfv = (PFNGLGETMAPFV)loader("glGetMapfv")) == NULL) return 0;
    if ((pfn_glGetMapiv = (PFNGLGETMAPIV)loader("glGetMapiv")) == NULL) return 0;
    if ((pfn_glGetMaterialfv = (PFNGLGETMATERIALFV)loader("glGetMaterialfv")) == NULL) return 0;
    if ((pfn_glGetMaterialiv = (PFNGLGETMATERIALIV)loader("glGetMaterialiv")) == NULL) return 0;
    if ((pfn_glGetPixelMapfv = (PFNGLGETPIXELMAPFV)loader("glGetPixelMapfv")) == NULL) return 0;
    if ((pfn_glGetPixelMapuiv = (PFNGLGETPIXELMAPUIV)loader("glGetPixelMapuiv")) == NULL) return 0;
    if ((pfn_glGetPixelMapusv = (PFNGLGETPIXELMAPUSV)loader("glGetPixelMapusv")) == NULL) return 0;
    if ((pfn_glGetPolygonStipple = (PFNGLGETPOLYGONSTIPPLE)loader("glGetPolygonStipple")) == NULL) return 0;
    if ((pfn_glGetString = (PFNGLGETSTRING)loader("glGetString")) == NULL) return 0;
    if ((pfn_glGetTexEnvfv = (PFNGLGETTEXENVFV)loader("glGetTexEnvfv")) == NULL) return 0;
    if ((pfn_glGetTexEnviv = (PFNGLGETTEXENVIV)loader("glGetTexEnviv")) == NULL) return 0;
    if ((pfn_glGetTexGendv = (PFNGLGETTEXGENDV)loader("glGetTexGendv")) == NULL) return 0;
    if ((pfn_glGetTexGenfv = (PFNGLGETTEXGENFV)loader("glGetTexGenfv")) == NULL) return 0;
    if ((pfn_glGetTexGeniv = (PFNGLGETTEXGENIV)loader("glGetTexGeniv")) == NULL) return 0;
    if ((pfn_glGetTexImage = (PFNGLGETTEXIMAGE)loader("glGetTexImage")) == NULL) return 0;
    if ((pfn_glGetTexLevelParameterfv = (PFNGLGETTEXLEVELPARAMETERFV)loader("glGetTexLevelParameterfv")) == NULL) return 0;
    if ((pfn_glGetTexLevelParameteriv = (PFNGLGETTEXLEVELPARAMETERIV)loader("glGetTexLevelParameteriv")) == NULL) return 0;
    if ((pfn_glGetTexParameterfv = (PFNGLGETTEXPARAMETERFV)loader("glGetTexParameterfv")) == NULL) return 0;
    if ((pfn_glGetTexParameteriv = (PFNGLGETTEXPARAMETERIV)loader("glGetTexParameteriv")) == NULL) return 0;
    if ((pfn_glHint = (PFNGLHINT)loader("glHint")) == NULL) return 0;
    if ((pfn_glIndexMask = (PFNGLINDEXMASK)loader("glIndexMask")) == NULL) return 0;
    if ((pfn_glIndexd = (PFNGLINDEXD)loader("glIndexd")) == NULL) return 0;
    if ((pfn_glIndexdv = (PFNGLINDEXDV)loader("glIndexdv")) == NULL) return 0;
    if ((pfn_glIndexf = (PFNGLINDEXF)loader("glIndexf")) == NULL) return 0;
    if ((pfn_glIndexfv = (PFNGLINDEXFV)loader("glIndexfv")) == NULL) return 0;
    if ((pfn_glIndexi = (PFNGLINDEXI)loader("glIndexi")) == NULL) return 0;
    if ((pfn_glIndexiv = (PFNGLINDEXIV)loader("glIndexiv")) == NULL) return 0;
    if ((pfn_glIndexs = (PFNGLINDEXS)loader("glIndexs")) == NULL) return 0;
    if ((pfn_glIndexsv = (PFNGLINDEXSV)loader("glIndexsv")) == NULL) return 0;
    if ((pfn_glInitNames = (PFNGLINITNAMES)loader("glInitNames")) == NULL) return 0;
    if ((pfn_glIsEnabled = (PFNGLISENABLED)loader("glIsEnabled")) == NULL) return 0;
    if ((pfn_glIsList = (PFNGLISLIST)loader("glIsList")) == NULL) return 0;
    if ((pfn_glLightModelf = (PFNGLLIGHTMODELF)loader("glLightModelf")) == NULL) return 0;
    if ((pfn_glLightModelfv = (PFNGLLIGHTMODELFV)loader("glLightModelfv")) == NULL) return 0;
    if ((pfn_glLightModeli = (PFNGLLIGHTMODELI)loader("glLightModeli")) == NULL) return 0;
    if ((pfn_glLightModeliv = (PFNGLLIGHTMODELIV)loader("glLightModeliv")) == NULL) return 0;
    if ((pfn_glLightf = (PFNGLLIGHTF)loader("glLightf")) == NULL) return 0;
    if ((pfn_glLightfv = (PFNGLLIGHTFV)loader("glLightfv")) == NULL) return 0;
    if ((pfn_glLighti = (PFNGLLIGHTI)loader("glLighti")) == NULL) return 0;
    if ((pfn_glLightiv = (PFNGLLIGHTIV)loader("glLightiv")) == NULL) return 0;
    if ((pfn_glLineStipple = (PFNGLLINESTIPPLE)loader("glLineStipple")) == NULL) return 0;
    if ((pfn_glLineWidth = (PFNGLLINEWIDTH)loader("glLineWidth")) == NULL) return 0;
    if ((pfn_glListBase = (PFNGLLISTBASE)loader("glListBase")) == NULL) return 0;
    if ((pfn_glLoadIdentity = (PFNGLLOADIDENTITY)loader("glLoadIdentity")) == NULL) return 0;
    if ((pfn_glLoadMatrixd = (PFNGLLOADMATRIXD)loader("glLoadMatrixd")) == NULL) return 0;
    if ((pfn_glLoadMatrixf = (PFNGLLOADMATRIXF)loader("glLoadMatrixf")) == NULL) return 0;
    if ((pfn_glLoadName = (PFNGLLOADNAME)loader("glLoadName")) == NULL) return 0;
    if ((pfn_glLogicOp = (PFNGLLOGICOP)loader("glLogicOp")) == NULL) return 0;
    if ((pfn_glMap1d = (PFNGLMAP1D)loader("glMap1d")) == NULL) return 0;
    if ((pfn_glMap1f = (PFNGLMAP1F)loader("glMap1f")) == NULL) return 0;
    if ((pfn_glMap2d = (PFNGLMAP2D)loader("glMap2d")) == NULL) return 0;
    if ((pfn_glMap2f = (PFNGLMAP2F)loader("glMap2f")) == NULL) return 0;
    if ((pfn_glMapGrid1d = (PFNGLMAPGRID1D)loader("glMapGrid1d")) == NULL) return 0;
    if ((pfn_glMapGrid1f = (PFNGLMAPGRID1F)loader("glMapGrid1f")) == NULL) return 0;
    if ((pfn_glMapGrid2d = (PFNGLMAPGRID2D)loader("glMapGrid2d")) == NULL) return 0;
    if ((pfn_glMapGrid2f = (PFNGLMAPGRID2F)loader("glMapGrid2f")) == NULL) return 0;
    if ((pfn_glMaterialf = (PFNGLMATERIALF)loader("glMaterialf")) == NULL) return 0;
    if ((pfn_glMaterialfv = (PFNGLMATERIALFV)loader("glMaterialfv")) == NULL) return 0;
    if ((pfn_glMateriali = (PFNGLMATERIALI)loader("glMateriali")) == NULL) return 0;
    if ((pfn_glMaterialiv = (PFNGLMATERIALIV)loader("glMaterialiv")) == NULL) return 0;
    if ((pfn_glMatrixMode = (PFNGLMATRIXMODE)loader("glMatrixMode")) == NULL) return 0;
    if ((pfn_glMultMatrixd = (PFNGLMULTMATRIXD)loader("glMultMatrixd")) == NULL) return 0;
    if ((pfn_glMultMatrixf = (PFNGLMULTMATRIXF)loader("glMultMatrixf")) == NULL) return 0;
    if ((pfn_glNewList = (PFNGLNEWLIST)loader("glNewList")) == NULL) return 0;
    if ((pfn_glNormal3b = (PFNGLNORMAL3B)loader("glNormal3b")) == NULL) return 0;
    if ((pfn_glNormal3bv = (PFNGLNORMAL3BV)loader("glNormal3bv")) == NULL) return 0;
    if ((pfn_glNormal3d = (PFNGLNORMAL3D)loader("glNormal3d")) == NULL) return 0;
    if ((pfn_glNormal3dv = (PFNGLNORMAL3DV)loader("glNormal3dv")) == NULL) return 0;
    if ((pfn_glNormal3f = (PFNGLNORMAL3F)loader("glNormal3f")) == NULL) return 0;
    if ((pfn_glNormal3fv = (PFNGLNORMAL3FV)loader("glNormal3fv")) == NULL) return 0;
    if ((pfn_glNormal3i = (PFNGLNORMAL3I)loader("glNormal3i")) == NULL) return 0;
    if ((pfn_glNormal3iv = (PFNGLNORMAL3IV)loader("glNormal3iv")) == NULL) return 0;
    if ((pfn_glNormal3s = (PFNGLNORMAL3S)loader("glNormal3s")) == NULL) return 0;
    if ((pfn_glNormal3sv = (PFNGLNORMAL3SV)loader("glNormal3sv")) == NULL) return 0;
    if ((pfn_glOrtho = (PFNGLORTHO)loader("glOrtho")) == NULL) return 0;
    if ((pfn_glPassThrough = (PFNGLPASSTHROUGH)loader("glPassThrough")) == NULL) return 0;
    if ((pfn_glPixelMapfv = (PFNGLPIXELMAPFV)loader("glPixelMapfv")) == NULL) return 0;
    if ((pfn_glPixelMapuiv = (PFNGLPIXELMAPUIV)loader("glPixelMapuiv")) == NULL) return 0;
    if ((pfn_glPixelMapusv = (PFNGLPIXELMAPUSV)loader("glPixelMapusv")) == NULL) return 0;
    if ((pfn_glPixelStoref = (PFNGLPIXELSTOREF)loader("glPixelStoref")) == NULL) return 0;
    if ((pfn_glPixelStorei = (PFNGLPIXELSTOREI)loader("glPixelStorei")) == NULL) return 0;
    if ((pfn_glPixelTransferf = (PFNGLPIXELTRANSFERF)loader("glPixelTransferf")) == NULL) return 0;
    if ((pfn_glPixelTransferi = (PFNGLPIXELTRANSFERI)loader("glPixelTransferi")) == NULL) return 0;
    if ((pfn_glPixelZoom = (PFNGLPIXELZOOM)loader("glPixelZoom")) == NULL) return 0;
    if ((pfn_glPointSize = (PFNGLPOINTSIZE)loader("glPointSize")) == NULL) return 0;
    if ((pfn_glPolygonMode = (PFNGLPOLYGONMODE)loader("glPolygonMode")) == NULL) return 0;
    if ((pfn_glPolygonStipple = (PFNGLPOLYGONSTIPPLE)loader("glPolygonStipple")) == NULL) return 0;
    if ((pfn_glPopAttrib = (PFNGLPOPATTRIB)loader("glPopAttrib")) == NULL) return 0;
    if ((pfn_glPopMatrix = (PFNGLPOPMATRIX)loader("glPopMatrix")) == NULL) return 0;
    if ((pfn_glPopName = (PFNGLPOPNAME)loader("glPopName")) == NULL) return 0;
    if ((pfn_glPushAttrib = (PFNGLPUSHATTRIB)loader("glPushAttrib")) == NULL) return 0;
    if ((pfn_glPushMatrix = (PFNGLPUSHMATRIX)loader("glPushMatrix")) == NULL) return 0;
    if ((pfn_glPushName = (PFNGLPUSHNAME)loader("glPushName")) == NULL) return 0;
    if ((pfn_glRasterPos2d = (PFNGLRASTERPOS2D)loader("glRasterPos2d")) == NULL) return 0;
    if ((pfn_glRasterPos2dv = (PFNGLRASTERPOS2DV)loader("glRasterPos2dv")) == NULL) return 0;
    if ((pfn_glRasterPos2f = (PFNGLRASTERPOS2F)loader("glRasterPos2f")) == NULL) return 0;
    if ((pfn_glRasterPos2fv = (PFNGLRASTERPOS2FV)loader("glRasterPos2fv")) == NULL) return 0;
    if ((pfn_glRasterPos2i = (PFNGLRASTERPOS2I)loader("glRasterPos2i")) == NULL) return 0;
    if ((pfn_glRasterPos2iv = (PFNGLRASTERPOS2IV)loader("glRasterPos2iv")) == NULL) return 0;
    if ((pfn_glRasterPos2s = (PFNGLRASTERPOS2S)loader("glRasterPos2s")) == NULL) return 0;
    if ((pfn_glRasterPos2sv = (PFNGLRASTERPOS2SV)loader("glRasterPos2sv")) == NULL) return 0;
    if ((pfn_glRasterPos3d = (PFNGLRASTERPOS3D)loader("glRasterPos3d")) == NULL) return 0;
    if ((pfn_glRasterPos3dv = (PFNGLRASTERPOS3DV)loader("glRasterPos3dv")) == NULL) return 0;
    if ((pfn_glRasterPos3f = (PFNGLRASTERPOS3F)loader("glRasterPos3f")) == NULL) return 0;
    if ((pfn_glRasterPos3fv = (PFNGLRASTERPOS3FV)loader("glRasterPos3fv")) == NULL) return 0;
    if ((pfn_glRasterPos3i = (PFNGLRASTERPOS3I)loader("glRasterPos3i")) == NULL) return 0;
    if ((pfn_glRasterPos3iv = (PFNGLRASTERPOS3IV)loader("glRasterPos3iv")) == NULL) return 0;
    if ((pfn_glRasterPos3s = (PFNGLRASTERPOS3S)loader("glRasterPos3s")) == NULL) return 0;
    if ((pfn_glRasterPos3sv = (PFNGLRASTERPOS3SV)loader("glRasterPos3sv")) == NULL) return 0;
    if ((pfn_glRasterPos4d = (PFNGLRASTERPOS4D)loader("glRasterPos4d")) == NULL) return 0;
    if ((pfn_glRasterPos4dv = (PFNGLRASTERPOS4DV)loader("glRasterPos4dv")) == NULL) return 0;
    if ((pfn_glRasterPos4f = (PFNGLRASTERPOS4F)loader("glRasterPos4f")) == NULL) return 0;
    if ((pfn_glRasterPos4fv = (PFNGLRASTERPOS4FV)loader("glRasterPos4fv")) == NULL) return 0;
    if ((pfn_glRasterPos4i = (PFNGLRASTERPOS4I)loader("glRasterPos4i")) == NULL) return 0;
    if ((pfn_glRasterPos4iv = (PFNGLRASTERPOS4IV)loader("glRasterPos4iv")) == NULL) return 0;
    if ((pfn_glRasterPos4s = (PFNGLRASTERPOS4S)loader("glRasterPos4s")) == NULL) return 0;
    if ((pfn_glRasterPos4sv = (PFNGLRASTERPOS4SV)loader("glRasterPos4sv")) == NULL) return 0;
    if ((pfn_glReadBuffer = (PFNGLREADBUFFER)loader("glReadBuffer")) == NULL) return 0;
    if ((pfn_glReadPixels = (PFNGLREADPIXELS)loader("glReadPixels")) == NULL) return 0;
    if ((pfn_glRectd = (PFNGLRECTD)loader("glRectd")) == NULL) return 0;
    if ((pfn_glRectdv = (PFNGLRECTDV)loader("glRectdv")) == NULL) return 0;
    if ((pfn_glRectf = (PFNGLRECTF)loader("glRectf")) == NULL) return 0;
    if ((pfn_glRectfv = (PFNGLRECTFV)loader("glRectfv")) == NULL) return 0;
    if ((pfn_glRecti = (PFNGLRECTI)loader("glRecti")) == NULL) return 0;
    if ((pfn_glRectiv = (PFNGLRECTIV)loader("glRectiv")) == NULL) return 0;
    if ((pfn_glRects = (PFNGLRECTS)loader("glRects")) == NULL) return 0;
    if ((pfn_glRectsv = (PFNGLRECTSV)loader("glRectsv")) == NULL) return 0;
    if ((pfn_glRenderMode = (PFNGLRENDERMODE)loader("glRenderMode")) == NULL) return 0;
    if ((pfn_glRotated = (PFNGLROTATED)loader("glRotated")) == NULL) return 0;
    if ((pfn_glRotatef = (PFNGLROTATEF)loader("glRotatef")) == NULL) return 0;
    if ((pfn_glScaled = (PFNGLSCALED)loader("glScaled")) == NULL) return 0;
    if ((pfn_glScalef = (PFNGLSCALEF)loader("glScalef")) == NULL) return 0;
    if ((pfn_glScissor = (PFNGLSCISSOR)loader("glScissor")) == NULL) return 0;
    if ((pfn_glSelectBuffer = (PFNGLSELECTBUFFER)loader("glSelectBuffer")) == NULL) return 0;
    if ((pfn_glShadeModel = (PFNGLSHADEMODEL)loader("glShadeModel")) == NULL) return 0;
    if ((pfn_glStencilFunc = (PFNGLSTENCILFUNC)loader("glStencilFunc")) == NULL) return 0;
    if ((pfn_glStencilMask = (PFNGLSTENCILMASK)loader("glStencilMask")) == NULL) return 0;
    if ((pfn_glStencilOp = (PFNGLSTENCILOP)loader("glStencilOp")) == NULL) return 0;
    if ((pfn_glTexCoord1d = (PFNGLTEXCOORD1D)loader("glTexCoord1d")) == NULL) return 0;
    if ((pfn_glTexCoord1dv = (PFNGLTEXCOORD1DV)loader("glTexCoord1dv")) == NULL) return 0;
    if ((pfn_glTexCoord1f = (PFNGLTEXCOORD1F)loader("glTexCoord1f")) == NULL) return 0;
    if ((pfn_glTexCoord1fv = (PFNGLTEXCOORD1FV)loader("glTexCoord1fv")) == NULL) return 0;
    if ((pfn_glTexCoord1i = (PFNGLTEXCOORD1I)loader("glTexCoord1i")) == NULL) return 0;
    if ((pfn_glTexCoord1iv = (PFNGLTEXCOORD1IV)loader("glTexCoord1iv")) == NULL) return 0;
    if ((pfn_glTexCoord1s = (PFNGLTEXCOORD1S)loader("glTexCoord1s")) == NULL) return 0;
    if ((pfn_glTexCoord1sv = (PFNGLTEXCOORD1SV)loader("glTexCoord1sv")) == NULL) return 0;
    if ((pfn_glTexCoord2d = (PFNGLTEXCOORD2D)loader("glTexCoord2d")) == NULL) return 0;
    if ((pfn_glTexCoord2dv = (PFNGLTEXCOORD2DV)loader("glTexCoord2dv")) == NULL) return 0;
    if ((pfn_glTexCoord2f = (PFNGLTEXCOORD2F)loader("glTexCoord2f")) == NULL) return 0;
    if ((pfn_glTexCoord2fv = (PFNGLTEXCOORD2FV)loader("glTexCoord2fv")) == NULL) return 0;
    if ((pfn_glTexCoord2i = (PFNGLTEXCOORD2I)loader("glTexCoord2i")) == NULL) return 0;
    if ((pfn_glTexCoord2iv = (PFNGLTEXCOORD2IV)loader("glTexCoord2iv")) == NULL) return 0;
    if ((pfn_glTexCoord2s = (PFNGLTEXCOORD2S)loader("glTexCoord2s")) == NULL) return 0;
    if ((pfn_glTexCoord2sv = (PFNGLTEXCOORD2SV)loader("glTexCoord2sv")) == NULL) return 0;
    if ((pfn_glTexCoord3d = (PFNGLTEXCOORD3D)loader("glTexCoord3d")) == NULL) return 0;
    if ((pfn_glTexCoord3dv = (PFNGLTEXCOORD3DV)loader("glTexCoord3dv")) == NULL) return 0;
    if ((pfn_glTexCoord3f = (PFNGLTEXCOORD3F)loader("glTexCoord3f")) == NULL) return 0;
    if ((pfn_glTexCoord3fv = (PFNGLTEXCOORD3FV)loader("glTexCoord3fv")) == NULL) return 0;
    if ((pfn_glTexCoord3i = (PFNGLTEXCOORD3I)loader("glTexCoord3i")) == NULL) return 0;
    if ((pfn_glTexCoord3iv = (PFNGLTEXCOORD3IV)loader("glTexCoord3iv")) == NULL) return 0;
    if ((pfn_glTexCoord3s = (PFNGLTEXCOORD3S)loader("glTexCoord3s")) == NULL) return 0;
    if ((pfn_glTexCoord3sv = (PFNGLTEXCOORD3SV)loader("glTexCoord3sv")) == NULL) return 0;
    if ((pfn_glTexCoord4d = (PFNGLTEXCOORD4D)loader("glTexCoord4d")) == NULL) return 0;
    if ((pfn_glTexCoord4dv = (PFNGLTEXCOORD4DV)loader("glTexCoord4dv")) == NULL) return 0;
    if ((pfn_glTexCoord4f = (PFNGLTEXCOORD4F)loader("glTexCoord4f")) == NULL) return 0;
    if ((pfn_glTexCoord4fv = (PFNGLTEXCOORD4FV)loader("glTexCoord4fv")) == NULL) return 0;
    if ((pfn_glTexCoord4i = (PFNGLTEXCOORD4I)loader("glTexCoord4i")) == NULL) return 0;
    if ((pfn_glTexCoord4iv = (PFNGLTEXCOORD4IV)loader("glTexCoord4iv")) == NULL) return 0;
    if ((pfn_glTexCoord4s = (PFNGLTEXCOORD4S)loader("glTexCoord4s")) == NULL) return 0;
    if ((pfn_glTexCoord4sv = (PFNGLTEXCOORD4SV)loader("glTexCoord4sv")) == NULL) return 0;
    if ((pfn_glTexEnvf = (PFNGLTEXENVF)loader("glTexEnvf")) == NULL) return 0;
    if ((pfn_glTexEnvfv = (PFNGLTEXENVFV)loader("glTexEnvfv")) == NULL) return 0;
    if ((pfn_glTexEnvi = (PFNGLTEXENVI)loader("glTexEnvi")) == NULL) return 0;
    if ((pfn_glTexEnviv = (PFNGLTEXENVIV)loader("glTexEnviv")) == NULL) return 0;
    if ((pfn_glTexGend = (PFNGLTEXGEND)loader("glTexGend")) == NULL) return 0;
    if ((pfn_glTexGendv = (PFNGLTEXGENDV)loader("glTexGendv")) == NULL) return 0;
    if ((pfn_glTexGenf = (PFNGLTEXGENF)loader("glTexGenf")) == NULL) return 0;
    if ((pfn_glTexGenfv = (PFNGLTEXGENFV)loader("glTexGenfv")) == NULL) return 0;
    if ((pfn_glTexGeni = (PFNGLTEXGENI)loader("glTexGeni")) == NULL) return 0;
    if ((pfn_glTexGeniv = (PFNGLTEXGENIV)loader("glTexGeniv")) == NULL) return 0;
    if ((pfn_glTexImage1D = (PFNGLTEXIMAGE1D)loader("glTexImage1D")) == NULL) return 0;
    if ((pfn_glTexImage2D = (PFNGLTEXIMAGE2D)loader("glTexImage2D")) == NULL) return 0;
    if ((pfn_glTexParameterf = (PFNGLTEXPARAMETERF)loader("glTexParameterf")) == NULL) return 0;
    if ((pfn_glTexParameterfv = (PFNGLTEXPARAMETERFV)loader("glTexParameterfv")) == NULL) return 0;
    if ((pfn_glTexParameteri = (PFNGLTEXPARAMETERI)loader("glTexParameteri")) == NULL) return 0;
    if ((pfn_glTexParameteriv = (PFNGLTEXPARAMETERIV)loader("glTexParameteriv")) == NULL) return 0;
    if ((pfn_glTranslated = (PFNGLTRANSLATED)loader("glTranslated")) == NULL) return 0;
    if ((pfn_glTranslatef = (PFNGLTRANSLATEF)loader("glTranslatef")) == NULL) return 0;
    if ((pfn_glVertex2d = (PFNGLVERTEX2D)loader("glVertex2d")) == NULL) return 0;
    if ((pfn_glVertex2dv = (PFNGLVERTEX2DV)loader("glVertex2dv")) == NULL) return 0;
    if ((pfn_glVertex2f = (PFNGLVERTEX2F)loader("glVertex2f")) == NULL) return 0;
    if ((pfn_glVertex2fv = (PFNGLVERTEX2FV)loader("glVertex2fv")) == NULL) return 0;
    if ((pfn_glVertex2i = (PFNGLVERTEX2I)loader("glVertex2i")) == NULL) return 0;
    if ((pfn_glVertex2iv = (PFNGLVERTEX2IV)loader("glVertex2iv")) == NULL) return 0;
    if ((pfn_glVertex2s = (PFNGLVERTEX2S)loader("glVertex2s")) == NULL) return 0;
    if ((pfn_glVertex2sv = (PFNGLVERTEX2SV)loader("glVertex2sv")) == NULL) return 0;
    if ((pfn_glVertex3d = (PFNGLVERTEX3D)loader("glVertex3d")) == NULL) return 0;
    if ((pfn_glVertex3dv = (PFNGLVERTEX3DV)loader("glVertex3dv")) == NULL) return 0;
    if ((pfn_glVertex3f = (PFNGLVERTEX3F)loader("glVertex3f")) == NULL) return 0;
    if ((pfn_glVertex3fv = (PFNGLVERTEX3FV)loader("glVertex3fv")) == NULL) return 0;
    if ((pfn_glVertex3i = (PFNGLVERTEX3I)loader("glVertex3i")) == NULL) return 0;
    if ((pfn_glVertex3iv = (PFNGLVERTEX3IV)loader("glVertex3iv")) == NULL) return 0;
    if ((pfn_glVertex3s = (PFNGLVERTEX3S)loader("glVertex3s")) == NULL) return 0;
    if ((pfn_glVertex3sv = (PFNGLVERTEX3SV)loader("glVertex3sv")) == NULL) return 0;
    if ((pfn_glVertex4d = (PFNGLVERTEX4D)loader("glVertex4d")) == NULL) return 0;
    if ((pfn_glVertex4dv = (PFNGLVERTEX4DV)loader("glVertex4dv")) == NULL) return 0;
    if ((pfn_glVertex4f = (PFNGLVERTEX4F)loader("glVertex4f")) == NULL) return 0;
    if ((pfn_glVertex4fv = (PFNGLVERTEX4FV)loader("glVertex4fv")) == NULL) return 0;
    if ((pfn_glVertex4i = (PFNGLVERTEX4I)loader("glVertex4i")) == NULL) return 0;
    if ((pfn_glVertex4iv = (PFNGLVERTEX4IV)loader("glVertex4iv")) == NULL) return 0;
    if ((pfn_glVertex4s = (PFNGLVERTEX4S)loader("glVertex4s")) == NULL) return 0;
    if ((pfn_glVertex4sv = (PFNGLVERTEX4SV)loader("glVertex4sv")) == NULL) return 0;
    if ((pfn_glViewport = (PFNGLVIEWPORT)loader("glViewport")) == NULL) return 0;

    // OpenGL 1.1
    if (GLVersion.major < 1 || (GLVersion.major == 1 && GLVersion.minor < 1)) return 1;
    if ((pfn_glAreTexturesResident = (PFNGLARETEXTURESRESIDENT)loader("glAreTexturesResident")) == NULL) return 0;
    if ((pfn_glArrayElement = (PFNGLARRAYELEMENT)loader("glArrayElement")) == NULL) return 0;
    if ((pfn_glBindTexture = (PFNGLBINDTEXTURE)loader("glBindTexture")) == NULL) return 0;
    if ((pfn_glColorPointer = (PFNGLCOLORPOINTER)loader("glColorPointer")) == NULL) return 0;
    if ((pfn_glCopyTexImage1D = (PFNGLCOPYTEXIMAGE1D)loader("glCopyTexImage1D")) == NULL) return 0;
    if ((pfn_glCopyTexImage2D = (PFNGLCOPYTEXIMAGE2D)loader("glCopyTexImage2D")) == NULL) return 0;
    if ((pfn_glCopyTexSubImage1D = (PFNGLCOPYTEXSUBIMAGE1D)loader("glCopyTexSubImage1D")) == NULL) return 0;
    if ((pfn_glCopyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2D)loader("glCopyTexSubImage2D")) == NULL) return 0;
    if ((pfn_glDeleteTextures = (PFNGLDELETETEXTURES)loader("glDeleteTextures")) == NULL) return 0;
    if ((pfn_glDisableClientState = (PFNGLDISABLECLIENTSTATE)loader("glDisableClientState")) == NULL) return 0;
    if ((pfn_glDrawArrays = (PFNGLDRAWARRAYS)loader("glDrawArrays")) == NULL) return 0;
    if ((pfn_glDrawElements = (PFNGLDRAWELEMENTS)loader("glDrawElements")) == NULL) return 0;
    if ((pfn_glEdgeFlagPointer = (PFNGLEDGEFLAGPOINTER)loader("glEdgeFlagPointer")) == NULL) return 0;
    if ((pfn_glEnableClientState = (PFNGLENABLECLIENTSTATE)loader("glEnableClientState")) == NULL) return 0;
    if ((pfn_glGenTextures = (PFNGLGENTEXTURES)loader("glGenTextures")) == NULL) return 0;
    if ((pfn_glGetPointerv = (PFNGLGETPOINTERV)loader("glGetPointerv")) == NULL) return 0;
    if ((pfn_glIndexPointer = (PFNGLINDEXPOINTER)loader("glIndexPointer")) == NULL) return 0;
    if ((pfn_glIndexub = (PFNGLINDEXUB)loader("glIndexub")) == NULL) return 0;
    if ((pfn_glIndexubv = (PFNGLINDEXUBV)loader("glIndexubv")) == NULL) return 0;
    if ((pfn_glInterleavedArrays = (PFNGLINTERLEAVEDARRAYS)loader("glInterleavedArrays")) == NULL) return 0;
    if ((pfn_glIsTexture = (PFNGLISTEXTURE)loader("glIsTexture")) == NULL) return 0;
    if ((pfn_glNormalPointer = (PFNGLNORMALPOINTER)loader("glNormalPointer")) == NULL) return 0;
    if ((pfn_glPolygonOffset = (PFNGLPOLYGONOFFSET)loader("glPolygonOffset")) == NULL) return 0;
    if ((pfn_glPopClientAttrib = (PFNGLPOPCLIENTATTRIB)loader("glPopClientAttrib")) == NULL) return 0;
    if ((pfn_glPrioritizeTextures = (PFNGLPRIORITIZETEXTURES)loader("glPrioritizeTextures")) == NULL) return 0;
    if ((pfn_glPushClientAttrib = (PFNGLPUSHCLIENTATTRIB)loader("glPushClientAttrib")) == NULL) return 0;
    if ((pfn_glTexCoordPointer = (PFNGLTEXCOORDPOINTER)loader("glTexCoordPointer")) == NULL) return 0;
    if ((pfn_glTexSubImage1D = (PFNGLTEXSUBIMAGE1D)loader("glTexSubImage1D")) == NULL) return 0;
    if ((pfn_glTexSubImage2D = (PFNGLTEXSUBIMAGE2D)loader("glTexSubImage2D")) == NULL) return 0;
    if ((pfn_glVertexPointer = (PFNGLVERTEXPOINTER)loader("glVertexPointer")) == NULL) return 0;

    // OpenGL 1.2
    if (GLVersion.major < 1 || (GLVersion.major == 1 && GLVersion.minor < 2)) return 1;
    if ((pfn_glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3D)loader("glCopyTexSubImage3D")) == NULL) return 0;
    if ((pfn_glDrawRangeElements = (PFNGLDRAWRANGEELEMENTS)loader("glDrawRangeElements")) == NULL) return 0;
    if ((pfn_glTexImage3D = (PFNGLTEXIMAGE3D)loader("glTexImage3D")) == NULL) return 0;
    if ((pfn_glTexSubImage3D = (PFNGLTEXSUBIMAGE3D)loader("glTexSubImage3D")) == NULL) return 0;

    // OpenGL 1.3
    if (GLVersion.major < 1 || (GLVersion.major == 1 && GLVersion.minor < 3)) return 1;
    if ((pfn_glActiveTexture = (PFNGLACTIVETEXTURE)loader("glActiveTexture")) == NULL) return 0;
    if ((pfn_glClientActiveTexture = (PFNGLCLIENTACTIVETEXTURE)loader("glClientActiveTexture")) == NULL) return 0;
    if ((pfn_glCompressedTexImage1D = (PFNGLCOMPRESSEDTEXIMAGE1D)loader("glCompressedTexImage1D")) == NULL) return 0;
    if ((pfn_glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2D)loader("glCompressedTexImage2D")) == NULL) return 0;
    if ((pfn_glCompressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3D)loader("glCompressedTexImage3D")) == NULL) return 0;
    if ((pfn_glCompressedTexSubImage1D = (PFNGLCOMPRESSEDTEXSUBIMAGE1D)loader("glCompressedTexSubImage1D")) == NULL) return 0;
    if ((pfn_glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2D)loader("glCompressedTexSubImage2D")) == NULL) return 0;
    if ((pfn_glCompressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3D)loader("glCompressedTexSubImage3D")) == NULL) return 0;
    if ((pfn_glGetCompressedTexImage = (PFNGLGETCOMPRESSEDTEXIMAGE)loader("glGetCompressedTexImage")) == NULL) return 0;
    if ((pfn_glLoadTransposeMatrixd = (PFNGLLOADTRANSPOSEMATRIXD)loader("glLoadTransposeMatrixd")) == NULL) return 0;
    if ((pfn_glLoadTransposeMatrixf = (PFNGLLOADTRANSPOSEMATRIXF)loader("glLoadTransposeMatrixf")) == NULL) return 0;
    if ((pfn_glMultTransposeMatrixd = (PFNGLMULTTRANSPOSEMATRIXD)loader("glMultTransposeMatrixd")) == NULL) return 0;
    if ((pfn_glMultTransposeMatrixf = (PFNGLMULTTRANSPOSEMATRIXF)loader("glMultTransposeMatrixf")) == NULL) return 0;
    if ((pfn_glMultiTexCoord1d = (PFNGLMULTITEXCOORD1D)loader("glMultiTexCoord1d")) == NULL) return 0;
    if ((pfn_glMultiTexCoord1dv = (PFNGLMULTITEXCOORD1DV)loader("glMultiTexCoord1dv")) == NULL) return 0;
    if ((pfn_glMultiTexCoord1f = (PFNGLMULTITEXCOORD1F)loader("glMultiTexCoord1f")) == NULL) return 0;
    if ((pfn_glMultiTexCoord1fv = (PFNGLMULTITEXCOORD1FV)loader("glMultiTexCoord1fv")) == NULL) return 0;
    if ((pfn_glMultiTexCoord1i = (PFNGLMULTITEXCOORD1I)loader("glMultiTexCoord1i")) == NULL) return 0;
    if ((pfn_glMultiTexCoord1iv = (PFNGLMULTITEXCOORD1IV)loader("glMultiTexCoord1iv")) == NULL) return 0;
    if ((pfn_glMultiTexCoord1s = (PFNGLMULTITEXCOORD1S)loader("glMultiTexCoord1s")) == NULL) return 0;
    if ((pfn_glMultiTexCoord1sv = (PFNGLMULTITEXCOORD1SV)loader("glMultiTexCoord1sv")) == NULL) return 0;
    if ((pfn_glMultiTexCoord2d = (PFNGLMULTITEXCOORD2D)loader("glMultiTexCoord2d")) == NULL) return 0;
    if ((pfn_glMultiTexCoord2dv = (PFNGLMULTITEXCOORD2DV)loader("glMultiTexCoord2dv")) == NULL) return 0;
    if ((pfn_glMultiTexCoord2f = (PFNGLMULTITEXCOORD2F)loader("glMultiTexCoord2f")) == NULL) return 0;
    if ((pfn_glMultiTexCoord2fv = (PFNGLMULTITEXCOORD2FV)loader("glMultiTexCoord2fv")) == NULL) return 0;
    if ((pfn_glMultiTexCoord2i = (PFNGLMULTITEXCOORD2I)loader("glMultiTexCoord2i")) == NULL) return 0;
    if ((pfn_glMultiTexCoord2iv = (PFNGLMULTITEXCOORD2IV)loader("glMultiTexCoord2iv")) == NULL) return 0;
    if ((pfn_glMultiTexCoord2s = (PFNGLMULTITEXCOORD2S)loader("glMultiTexCoord2s")) == NULL) return 0;
    if ((pfn_glMultiTexCoord2sv = (PFNGLMULTITEXCOORD2SV)loader("glMultiTexCoord2sv")) == NULL) return 0;
    if ((pfn_glMultiTexCoord3d = (PFNGLMULTITEXCOORD3D)loader("glMultiTexCoord3d")) == NULL) return 0;
    if ((pfn_glMultiTexCoord3dv = (PFNGLMULTITEXCOORD3DV)loader("glMultiTexCoord3dv")) == NULL) return 0;
    if ((pfn_glMultiTexCoord3f = (PFNGLMULTITEXCOORD3F)loader("glMultiTexCoord3f")) == NULL) return 0;
    if ((pfn_glMultiTexCoord3fv = (PFNGLMULTITEXCOORD3FV)loader("glMultiTexCoord3fv")) == NULL) return 0;
    if ((pfn_glMultiTexCoord3i = (PFNGLMULTITEXCOORD3I)loader("glMultiTexCoord3i")) == NULL) return 0;
    if ((pfn_glMultiTexCoord3iv = (PFNGLMULTITEXCOORD3IV)loader("glMultiTexCoord3iv")) == NULL) return 0;
    if ((pfn_glMultiTexCoord3s = (PFNGLMULTITEXCOORD3S)loader("glMultiTexCoord3s")) == NULL) return 0;
    if ((pfn_glMultiTexCoord3sv = (PFNGLMULTITEXCOORD3SV)loader("glMultiTexCoord3sv")) == NULL) return 0;
    if ((pfn_glMultiTexCoord4d = (PFNGLMULTITEXCOORD4D)loader("glMultiTexCoord4d")) == NULL) return 0;
    if ((pfn_glMultiTexCoord4dv = (PFNGLMULTITEXCOORD4DV)loader("glMultiTexCoord4dv")) == NULL) return 0;
    if ((pfn_glMultiTexCoord4f = (PFNGLMULTITEXCOORD4F)loader("glMultiTexCoord4f")) == NULL) return 0;
    if ((pfn_glMultiTexCoord4fv = (PFNGLMULTITEXCOORD4FV)loader("glMultiTexCoord4fv")) == NULL) return 0;
    if ((pfn_glMultiTexCoord4i = (PFNGLMULTITEXCOORD4I)loader("glMultiTexCoord4i")) == NULL) return 0;
    if ((pfn_glMultiTexCoord4iv = (PFNGLMULTITEXCOORD4IV)loader("glMultiTexCoord4iv")) == NULL) return 0;
    if ((pfn_glMultiTexCoord4s = (PFNGLMULTITEXCOORD4S)loader("glMultiTexCoord4s")) == NULL) return 0;
    if ((pfn_glMultiTexCoord4sv = (PFNGLMULTITEXCOORD4SV)loader("glMultiTexCoord4sv")) == NULL) return 0;
    if ((pfn_glSampleCoverage = (PFNGLSAMPLECOVERAGE)loader("glSampleCoverage")) == NULL) return 0;

    // OpenGL 1.4
    if (GLVersion.major < 1 || (GLVersion.major == 1 && GLVersion.minor < 4)) return 1;
    if ((pfn_glBlendColor = (PFNGLBLENDCOLOR)loader("glBlendColor")) == NULL) return 0;
    if ((pfn_glBlendEquation = (PFNGLBLENDEQUATION)loader("glBlendEquation")) == NULL) return 0;
    if ((pfn_glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATE)loader("glBlendFuncSeparate")) == NULL) return 0;
    if ((pfn_glFogCoordPointer = (PFNGLFOGCOORDPOINTER)loader("glFogCoordPointer")) == NULL) return 0;
    if ((pfn_glFogCoordd = (PFNGLFOGCOORDD)loader("glFogCoordd")) == NULL) return 0;
    if ((pfn_glFogCoorddv = (PFNGLFOGCOORDDV)loader("glFogCoorddv")) == NULL) return 0;
    if ((pfn_glFogCoordf = (PFNGLFOGCOORDF)loader("glFogCoordf")) == NULL) return 0;
    if ((pfn_glFogCoordfv = (PFNGLFOGCOORDFV)loader("glFogCoordfv")) == NULL) return 0;
    if ((pfn_glMultiDrawArrays = (PFNGLMULTIDRAWARRAYS)loader("glMultiDrawArrays")) == NULL) return 0;
    if ((pfn_glMultiDrawElements = (PFNGLMULTIDRAWELEMENTS)loader("glMultiDrawElements")) == NULL) return 0;
    if ((pfn_glPointParameterf = (PFNGLPOINTPARAMETERF)loader("glPointParameterf")) == NULL) return 0;
    if ((pfn_glPointParameterfv = (PFNGLPOINTPARAMETERFV)loader("glPointParameterfv")) == NULL) return 0;
    if ((pfn_glPointParameteri = (PFNGLPOINTPARAMETERI)loader("glPointParameteri")) == NULL) return 0;
    if ((pfn_glPointParameteriv = (PFNGLPOINTPARAMETERIV)loader("glPointParameteriv")) == NULL) return 0;
    if ((pfn_glSecondaryColor3b = (PFNGLSECONDARYCOLOR3B)loader("glSecondaryColor3b")) == NULL) return 0;
    if ((pfn_glSecondaryColor3bv = (PFNGLSECONDARYCOLOR3BV)loader("glSecondaryColor3bv")) == NULL) return 0;
    if ((pfn_glSecondaryColor3d = (PFNGLSECONDARYCOLOR3D)loader("glSecondaryColor3d")) == NULL) return 0;
    if ((pfn_glSecondaryColor3dv = (PFNGLSECONDARYCOLOR3DV)loader("glSecondaryColor3dv")) == NULL) return 0;
    if ((pfn_glSecondaryColor3f = (PFNGLSECONDARYCOLOR3F)loader("glSecondaryColor3f")) == NULL) return 0;
    if ((pfn_glSecondaryColor3fv = (PFNGLSECONDARYCOLOR3FV)loader("glSecondaryColor3fv")) == NULL) return 0;
    if ((pfn_glSecondaryColor3i = (PFNGLSECONDARYCOLOR3I)loader("glSecondaryColor3i")) == NULL) return 0;
    if ((pfn_glSecondaryColor3iv = (PFNGLSECONDARYCOLOR3IV)loader("glSecondaryColor3iv")) == NULL) return 0;
    if ((pfn_glSecondaryColor3s = (PFNGLSECONDARYCOLOR3S)loader("glSecondaryColor3s")) == NULL) return 0;
    if ((pfn_glSecondaryColor3sv = (PFNGLSECONDARYCOLOR3SV)loader("glSecondaryColor3sv")) == NULL) return 0;
    if ((pfn_glSecondaryColor3ub = (PFNGLSECONDARYCOLOR3UB)loader("glSecondaryColor3ub")) == NULL) return 0;
    if ((pfn_glSecondaryColor3ubv = (PFNGLSECONDARYCOLOR3UBV)loader("glSecondaryColor3ubv")) == NULL) return 0;
    if ((pfn_glSecondaryColor3ui = (PFNGLSECONDARYCOLOR3UI)loader("glSecondaryColor3ui")) == NULL) return 0;
    if ((pfn_glSecondaryColor3uiv = (PFNGLSECONDARYCOLOR3UIV)loader("glSecondaryColor3uiv")) == NULL) return 0;
    if ((pfn_glSecondaryColor3us = (PFNGLSECONDARYCOLOR3US)loader("glSecondaryColor3us")) == NULL) return 0;
    if ((pfn_glSecondaryColor3usv = (PFNGLSECONDARYCOLOR3USV)loader("glSecondaryColor3usv")) == NULL) return 0;
    if ((pfn_glSecondaryColorPointer = (PFNGLSECONDARYCOLORPOINTER)loader("glSecondaryColorPointer")) == NULL) return 0;
    if ((pfn_glWindowPos2d = (PFNGLWINDOWPOS2D)loader("glWindowPos2d")) == NULL) return 0;
    if ((pfn_glWindowPos2dv = (PFNGLWINDOWPOS2DV)loader("glWindowPos2dv")) == NULL) return 0;
    if ((pfn_glWindowPos2f = (PFNGLWINDOWPOS2F)loader("glWindowPos2f")) == NULL) return 0;
    if ((pfn_glWindowPos2fv = (PFNGLWINDOWPOS2FV)loader("glWindowPos2fv")) == NULL) return 0;
    if ((pfn_glWindowPos2i = (PFNGLWINDOWPOS2I)loader("glWindowPos2i")) == NULL) return 0;
    if ((pfn_glWindowPos2iv = (PFNGLWINDOWPOS2IV)loader("glWindowPos2iv")) == NULL) return 0;
    if ((pfn_glWindowPos2s = (PFNGLWINDOWPOS2S)loader("glWindowPos2s")) == NULL) return 0;
    if ((pfn_glWindowPos2sv = (PFNGLWINDOWPOS2SV)loader("glWindowPos2sv")) == NULL) return 0;
    if ((pfn_glWindowPos3d = (PFNGLWINDOWPOS3D)loader("glWindowPos3d")) == NULL) return 0;
    if ((pfn_glWindowPos3dv = (PFNGLWINDOWPOS3DV)loader("glWindowPos3dv")) == NULL) return 0;
    if ((pfn_glWindowPos3f = (PFNGLWINDOWPOS3F)loader("glWindowPos3f")) == NULL) return 0;
    if ((pfn_glWindowPos3fv = (PFNGLWINDOWPOS3FV)loader("glWindowPos3fv")) == NULL) return 0;
    if ((pfn_glWindowPos3i = (PFNGLWINDOWPOS3I)loader("glWindowPos3i")) == NULL) return 0;
    if ((pfn_glWindowPos3iv = (PFNGLWINDOWPOS3IV)loader("glWindowPos3iv")) == NULL) return 0;
    if ((pfn_glWindowPos3s = (PFNGLWINDOWPOS3S)loader("glWindowPos3s")) == NULL) return 0;
    if ((pfn_glWindowPos3sv = (PFNGLWINDOWPOS3SV)loader("glWindowPos3sv")) == NULL) return 0;

    // OpenGL 1.5
    if (GLVersion.major < 1 || (GLVersion.major == 1 && GLVersion.minor < 5)) return 1;
    if ((pfn_glBeginQuery = (PFNGLBEGINQUERY)loader("glBeginQuery")) == NULL) return 0;
    if ((pfn_glBindBuffer = (PFNGLBINDBUFFER)loader("glBindBuffer")) == NULL) return 0;
    if ((pfn_glBufferData = (PFNGLBUFFERDATA)loader("glBufferData")) == NULL) return 0;
    if ((pfn_glBufferSubData = (PFNGLBUFFERSUBDATA)loader("glBufferSubData")) == NULL) return 0;
    if ((pfn_glDeleteBuffers = (PFNGLDELETEBUFFERS)loader("glDeleteBuffers")) == NULL) return 0;
    if ((pfn_glDeleteQueries = (PFNGLDELETEQUERIES)loader("glDeleteQueries")) == NULL) return 0;
    if ((pfn_glEndQuery = (PFNGLENDQUERY)loader("glEndQuery")) == NULL) return 0;
    if ((pfn_glGenBuffers = (PFNGLGENBUFFERS)loader("glGenBuffers")) == NULL) return 0;
    if ((pfn_glGenQueries = (PFNGLGENQUERIES)loader("glGenQueries")) == NULL) return 0;
    if ((pfn_glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIV)loader("glGetBufferParameteriv")) == NULL) return 0;
    if ((pfn_glGetBufferPointerv = (PFNGLGETBUFFERPOINTERV)loader("glGetBufferPointerv")) == NULL) return 0;
    if ((pfn_glGetBufferSubData = (PFNGLGETBUFFERSUBDATA)loader("glGetBufferSubData")) == NULL) return 0;
    if ((pfn_glGetQueryObjectiv = (PFNGLGETQUERYOBJECTIV)loader("glGetQueryObjectiv")) == NULL) return 0;
    if ((pfn_glGetQueryObjectuiv = (PFNGLGETQUERYOBJECTUIV)loader("glGetQueryObjectuiv")) == NULL) return 0;
    if ((pfn_glGetQueryiv = (PFNGLGETQUERYIV)loader("glGetQueryiv")) == NULL) return 0;
    if ((pfn_glIsBuffer = (PFNGLISBUFFER)loader("glIsBuffer")) == NULL) return 0;
    if ((pfn_glIsQuery = (PFNGLISQUERY)loader("glIsQuery")) == NULL) return 0;
    if ((pfn_glMapBuffer = (PFNGLMAPBUFFER)loader("glMapBuffer")) == NULL) return 0;
    if ((pfn_glUnmapBuffer = (PFNGLUNMAPBUFFER)loader("glUnmapBuffer")) == NULL) return 0;

    // OpenGL 2.0
    if (GLVersion.major < 2 || (GLVersion.major == 2 && GLVersion.minor < 0)) return 1;
    if ((pfn_glAttachShader = (PFNGLATTACHSHADER)loader("glAttachShader")) == NULL) return 0;
    if ((pfn_glBindAttribLocation = (PFNGLBINDATTRIBLOCATION)loader("glBindAttribLocation")) == NULL) return 0;
    if ((pfn_glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATE)loader("glBlendEquationSeparate")) == NULL) return 0;
    if ((pfn_glCompileShader = (PFNGLCOMPILESHADER)loader("glCompileShader")) == NULL) return 0;
    if ((pfn_glCreateProgram = (PFNGLCREATEPROGRAM)loader("glCreateProgram")) == NULL) return 0;
    if ((pfn_glCreateShader = (PFNGLCREATESHADER)loader("glCreateShader")) == NULL) return 0;
    if ((pfn_glDeleteProgram = (PFNGLDELETEPROGRAM)loader("glDeleteProgram")) == NULL) return 0;
    if ((pfn_glDeleteShader = (PFNGLDELETESHADER)loader("glDeleteShader")) == NULL) return 0;
    if ((pfn_glDetachShader = (PFNGLDETACHSHADER)loader("glDetachShader")) == NULL) return 0;
    if ((pfn_glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAY)loader("glDisableVertexAttribArray")) == NULL) return 0;
    if ((pfn_glDrawBuffers = (PFNGLDRAWBUFFERS)loader("glDrawBuffers")) == NULL) return 0;
    if ((pfn_glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAY)loader("glEnableVertexAttribArray")) == NULL) return 0;
    if ((pfn_glGetActiveAttrib = (PFNGLGETACTIVEATTRIB)loader("glGetActiveAttrib")) == NULL) return 0;
    if ((pfn_glGetActiveUniform = (PFNGLGETACTIVEUNIFORM)loader("glGetActiveUniform")) == NULL) return 0;
    if ((pfn_glGetAttachedShaders = (PFNGLGETATTACHEDSHADERS)loader("glGetAttachedShaders")) == NULL) return 0;
    if ((pfn_glGetAttribLocation = (PFNGLGETATTRIBLOCATION)loader("glGetAttribLocation")) == NULL) return 0;
    if ((pfn_glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOG)loader("glGetProgramInfoLog")) == NULL) return 0;
    if ((pfn_glGetProgramiv = (PFNGLGETPROGRAMIV)loader("glGetProgramiv")) == NULL) return 0;
    if ((pfn_glGetShaderInfoLog = (PFNGLGETSHADERINFOLOG)loader("glGetShaderInfoLog")) == NULL) return 0;
    if ((pfn_glGetShaderSource = (PFNGLGETSHADERSOURCE)loader("glGetShaderSource")) == NULL) return 0;
    if ((pfn_glGetShaderiv = (PFNGLGETSHADERIV)loader("glGetShaderiv")) == NULL) return 0;
    if ((pfn_glGetUniformLocation = (PFNGLGETUNIFORMLOCATION)loader("glGetUniformLocation")) == NULL) return 0;
    if ((pfn_glGetUniformfv = (PFNGLGETUNIFORMFV)loader("glGetUniformfv")) == NULL) return 0;
    if ((pfn_glGetUniformiv = (PFNGLGETUNIFORMIV)loader("glGetUniformiv")) == NULL) return 0;
    if ((pfn_glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERV)loader("glGetVertexAttribPointerv")) == NULL) return 0;
    if ((pfn_glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDV)loader("glGetVertexAttribdv")) == NULL) return 0;
    if ((pfn_glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFV)loader("glGetVertexAttribfv")) == NULL) return 0;
    if ((pfn_glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIV)loader("glGetVertexAttribiv")) == NULL) return 0;
    if ((pfn_glIsProgram = (PFNGLISPROGRAM)loader("glIsProgram")) == NULL) return 0;
    if ((pfn_glIsShader = (PFNGLISSHADER)loader("glIsShader")) == NULL) return 0;
    if ((pfn_glLinkProgram = (PFNGLLINKPROGRAM)loader("glLinkProgram")) == NULL) return 0;
    if ((pfn_glShaderSource = (PFNGLSHADERSOURCE)loader("glShaderSource")) == NULL) return 0;
    if ((pfn_glStencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATE)loader("glStencilFuncSeparate")) == NULL) return 0;
    if ((pfn_glStencilMaskSeparate = (PFNGLSTENCILMASKSEPARATE)loader("glStencilMaskSeparate")) == NULL) return 0;
    if ((pfn_glStencilOpSeparate = (PFNGLSTENCILOPSEPARATE)loader("glStencilOpSeparate")) == NULL) return 0;
    if ((pfn_glUniform1f = (PFNGLUNIFORM1F)loader("glUniform1f")) == NULL) return 0;
    if ((pfn_glUniform1fv = (PFNGLUNIFORM1FV)loader("glUniform1fv")) == NULL) return 0;
    if ((pfn_glUniform1i = (PFNGLUNIFORM1I)loader("glUniform1i")) == NULL) return 0;
    if ((pfn_glUniform1iv = (PFNGLUNIFORM1IV)loader("glUniform1iv")) == NULL) return 0;
    if ((pfn_glUniform2f = (PFNGLUNIFORM2F)loader("glUniform2f")) == NULL) return 0;
    if ((pfn_glUniform2fv = (PFNGLUNIFORM2FV)loader("glUniform2fv")) == NULL) return 0;
    if ((pfn_glUniform2i = (PFNGLUNIFORM2I)loader("glUniform2i")) == NULL) return 0;
    if ((pfn_glUniform2iv = (PFNGLUNIFORM2IV)loader("glUniform2iv")) == NULL) return 0;
    if ((pfn_glUniform3f = (PFNGLUNIFORM3F)loader("glUniform3f")) == NULL) return 0;
    if ((pfn_glUniform3fv = (PFNGLUNIFORM3FV)loader("glUniform3fv")) == NULL) return 0;
    if ((pfn_glUniform3i = (PFNGLUNIFORM3I)loader("glUniform3i")) == NULL) return 0;
    if ((pfn_glUniform3iv = (PFNGLUNIFORM3IV)loader("glUniform3iv")) == NULL) return 0;
    if ((pfn_glUniform4f = (PFNGLUNIFORM4F)loader("glUniform4f")) == NULL) return 0;
    if ((pfn_glUniform4fv = (PFNGLUNIFORM4FV)loader("glUniform4fv")) == NULL) return 0;
    if ((pfn_glUniform4i = (PFNGLUNIFORM4I)loader("glUniform4i")) == NULL) return 0;
    if ((pfn_glUniform4iv = (PFNGLUNIFORM4IV)loader("glUniform4iv")) == NULL) return 0;
    if ((pfn_glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FV)loader("glUniformMatrix2fv")) == NULL) return 0;
    if ((pfn_glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FV)loader("glUniformMatrix3fv")) == NULL) return 0;
    if ((pfn_glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FV)loader("glUniformMatrix4fv")) == NULL) return 0;
    if ((pfn_glUseProgram = (PFNGLUSEPROGRAM)loader("glUseProgram")) == NULL) return 0;
    if ((pfn_glValidateProgram = (PFNGLVALIDATEPROGRAM)loader("glValidateProgram")) == NULL) return 0;
    if ((pfn_glVertexAttrib1d = (PFNGLVERTEXATTRIB1D)loader("glVertexAttrib1d")) == NULL) return 0;
    if ((pfn_glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DV)loader("glVertexAttrib1dv")) == NULL) return 0;
    if ((pfn_glVertexAttrib1f = (PFNGLVERTEXATTRIB1F)loader("glVertexAttrib1f")) == NULL) return 0;
    if ((pfn_glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FV)loader("glVertexAttrib1fv")) == NULL) return 0;
    if ((pfn_glVertexAttrib1s = (PFNGLVERTEXATTRIB1S)loader("glVertexAttrib1s")) == NULL) return 0;
    if ((pfn_glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SV)loader("glVertexAttrib1sv")) == NULL) return 0;
    if ((pfn_glVertexAttrib2d = (PFNGLVERTEXATTRIB2D)loader("glVertexAttrib2d")) == NULL) return 0;
    if ((pfn_glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DV)loader("glVertexAttrib2dv")) == NULL) return 0;
    if ((pfn_glVertexAttrib2f = (PFNGLVERTEXATTRIB2F)loader("glVertexAttrib2f")) == NULL) return 0;
    if ((pfn_glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FV)loader("glVertexAttrib2fv")) == NULL) return 0;
    if ((pfn_glVertexAttrib2s = (PFNGLVERTEXATTRIB2S)loader("glVertexAttrib2s")) == NULL) return 0;
    if ((pfn_glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SV)loader("glVertexAttrib2sv")) == NULL) return 0;
    if ((pfn_glVertexAttrib3d = (PFNGLVERTEXATTRIB3D)loader("glVertexAttrib3d")) == NULL) return 0;
    if ((pfn_glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DV)loader("glVertexAttrib3dv")) == NULL) return 0;
    if ((pfn_glVertexAttrib3f = (PFNGLVERTEXATTRIB3F)loader("glVertexAttrib3f")) == NULL) return 0;
    if ((pfn_glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FV)loader("glVertexAttrib3fv")) == NULL) return 0;
    if ((pfn_glVertexAttrib3s = (PFNGLVERTEXATTRIB3S)loader("glVertexAttrib3s")) == NULL) return 0;
    if ((pfn_glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SV)loader("glVertexAttrib3sv")) == NULL) return 0;
    if ((pfn_glVertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBV)loader("glVertexAttrib4Nbv")) == NULL) return 0;
    if ((pfn_glVertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIV)loader("glVertexAttrib4Niv")) == NULL) return 0;
    if ((pfn_glVertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSV)loader("glVertexAttrib4Nsv")) == NULL) return 0;
    if ((pfn_glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUB)loader("glVertexAttrib4Nub")) == NULL) return 0;
    if ((pfn_glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBV)loader("glVertexAttrib4Nubv")) == NULL) return 0;
    if ((pfn_glVertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIV)loader("glVertexAttrib4Nuiv")) == NULL) return 0;
    if ((pfn_glVertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSV)loader("glVertexAttrib4Nusv")) == NULL) return 0;
    if ((pfn_glVertexAttrib4bv = (PFNGLVERTEXATTRIB4BV)loader("glVertexAttrib4bv")) == NULL) return 0;
    if ((pfn_glVertexAttrib4d = (PFNGLVERTEXATTRIB4D)loader("glVertexAttrib4d")) == NULL) return 0;
    if ((pfn_glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DV)loader("glVertexAttrib4dv")) == NULL) return 0;
    if ((pfn_glVertexAttrib4f = (PFNGLVERTEXATTRIB4F)loader("glVertexAttrib4f")) == NULL) return 0;
    if ((pfn_glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FV)loader("glVertexAttrib4fv")) == NULL) return 0;
    if ((pfn_glVertexAttrib4iv = (PFNGLVERTEXATTRIB4IV)loader("glVertexAttrib4iv")) == NULL) return 0;
    if ((pfn_glVertexAttrib4s = (PFNGLVERTEXATTRIB4S)loader("glVertexAttrib4s")) == NULL) return 0;
    if ((pfn_glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SV)loader("glVertexAttrib4sv")) == NULL) return 0;
    if ((pfn_glVertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBV)loader("glVertexAttrib4ubv")) == NULL) return 0;
    if ((pfn_glVertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIV)loader("glVertexAttrib4uiv")) == NULL) return 0;
    if ((pfn_glVertexAttrib4usv = (PFNGLVERTEXATTRIB4USV)loader("glVertexAttrib4usv")) == NULL) return 0;
    if ((pfn_glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTER)loader("glVertexAttribPointer")) == NULL) return 0;

    // OpenGL 2.1
    if (GLVersion.major < 2 || (GLVersion.major == 2 && GLVersion.minor < 1)) return 1;
    if ((pfn_glUniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FV)loader("glUniformMatrix2x3fv")) == NULL) return 0;
    if ((pfn_glUniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FV)loader("glUniformMatrix2x4fv")) == NULL) return 0;
    if ((pfn_glUniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FV)loader("glUniformMatrix3x2fv")) == NULL) return 0;
    if ((pfn_glUniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FV)loader("glUniformMatrix3x4fv")) == NULL) return 0;
    if ((pfn_glUniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FV)loader("glUniformMatrix4x2fv")) == NULL) return 0;
    if ((pfn_glUniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FV)loader("glUniformMatrix4x3fv")) == NULL) return 0;
    return 1;
}

*/
import "C"
import (
    "errors"
    "fmt"
    "strings"
    "unsafe"
)

// CoreProfile is true if the API was configured for the OpenGL core profile.
// This is always false if API is GLES2.
//
const CoreProfile = false

// API type: OpenGL or OpenGLES.
//
type API int

// API Values.
//
const (
    OpenGL API = iota
    OpenGLES
)

func (a API) String() string {
    if a == OpenGL {
        return "OpenGL"
    }
    return "OpenGLES"
}

// Version represents an API version.
//
type Version struct {
    API   API
    Major int
    Minor int
}

// GE returns true if version v is greater or equal to Version{api, major, minor}
// and v.API is equal to the api argument.
//
// The following example shows how to use it in compatibility checks:
//
//  ver := gl.RuntimeVersion()
//  switch ver {
//  case ver.GE(OpenGL, 4, 0) || ver.GE(OpenGLES, 3, 1):
//      // call glDrawArraysIndirect
//  case ver.GE(OpenGL, 3, 1) || ver.GE(OpenGLES, 3, 0):
//      // call glDrawArraysInstanced
//  default:
//      // fallback
//  }
//
func (v Version) GE(api API, major, minor int) bool {
    return v.API == api && (v.Major > major || v.Major == major && v.Minor >= minor)
}

// APIVersion returns the OpenGL or OpenGLES version supported by the package.
//
func APIVersion() Version {
    return Version{OpenGL, 2, 1}
}

// RuntimeVersion returns the OpenGL or OpenGLES version available at runtime,
// which may differ from APIVersion.
//
func RuntimeVersion() Version {
    return Version{OpenGL, int(C.GLVersion.major), int(C.GLVersion.minor)}
}

// InitC initializes OpenGL. loader is a function pointer to a C function of type
//
//  typedef void *(*loader) (const char *funcName)
//
// If API is GLES2, it is safe to pass a nil pointer to this function.
//
func InitC(loader unsafe.Pointer) error {
	if C.gogl_Init((C.GROGloadproc)(loader)) == 0 {
        return errors.New("failed to initialize OpenGL")
    }
	return nil
}

// InitGo initializes OpenGL. The recommended value for loader is glfw.GetProcAddress.
// The loader function must panic on error.
//
// If API is GLES2, it is safe to pass a nil pointer to this function.
//
func InitGo(loader func(string) unsafe.Pointer) {
    ver := Version{OpenGL, -1, -1}

	C.pfn_glGetString = C.PFNGLGETSTRING(loader("glGetString"))
	vs := C.GoString((*C.char)(unsafe.Pointer(C.gogl_glGetString(GL_VERSION))))
    i := strings.IndexFunc(vs, func(r rune) bool {
        return r >= '0' && r <= '9'
    })
    if i >= 0 {
        fmt.Sscanf(vs[i:], "%d.%d", &ver.Major, &ver.Minor)
    }
    if !ver.GE(OpenGL, 1, 0) {
        panic("failed to identify OpenGL version")
    }
    C.GLVersion.major = C.int(ver.Major)
    C.GLVersion.minor = C.int(ver.Minor)

    C.pfn_glAccum = C.PFNGLACCUM(loader("glAccum"))
    C.pfn_glAlphaFunc = C.PFNGLALPHAFUNC(loader("glAlphaFunc"))
    C.pfn_glBegin = C.PFNGLBEGIN(loader("glBegin"))
    C.pfn_glBitmap = C.PFNGLBITMAP(loader("glBitmap"))
    C.pfn_glBlendFunc = C.PFNGLBLENDFUNC(loader("glBlendFunc"))
    C.pfn_glCallList = C.PFNGLCALLLIST(loader("glCallList"))
    C.pfn_glCallLists = C.PFNGLCALLLISTS(loader("glCallLists"))
    C.pfn_glClear = C.PFNGLCLEAR(loader("glClear"))
    C.pfn_glClearAccum = C.PFNGLCLEARACCUM(loader("glClearAccum"))
    C.pfn_glClearColor = C.PFNGLCLEARCOLOR(loader("glClearColor"))
    C.pfn_glClearDepth = C.PFNGLCLEARDEPTH(loader("glClearDepth"))
    C.pfn_glClearIndex = C.PFNGLCLEARINDEX(loader("glClearIndex"))
    C.pfn_glClearStencil = C.PFNGLCLEARSTENCIL(loader("glClearStencil"))
    C.pfn_glClipPlane = C.PFNGLCLIPPLANE(loader("glClipPlane"))
    C.pfn_glColor3b = C.PFNGLCOLOR3B(loader("glColor3b"))
    C.pfn_glColor3bv = C.PFNGLCOLOR3BV(loader("glColor3bv"))
    C.pfn_glColor3d = C.PFNGLCOLOR3D(loader("glColor3d"))
    C.pfn_glColor3dv = C.PFNGLCOLOR3DV(loader("glColor3dv"))
    C.pfn_glColor3f = C.PFNGLCOLOR3F(loader("glColor3f"))
    C.pfn_glColor3fv = C.PFNGLCOLOR3FV(loader("glColor3fv"))
    C.pfn_glColor3i = C.PFNGLCOLOR3I(loader("glColor3i"))
    C.pfn_glColor3iv = C.PFNGLCOLOR3IV(loader("glColor3iv"))
    C.pfn_glColor3s = C.PFNGLCOLOR3S(loader("glColor3s"))
    C.pfn_glColor3sv = C.PFNGLCOLOR3SV(loader("glColor3sv"))
    C.pfn_glColor3ub = C.PFNGLCOLOR3UB(loader("glColor3ub"))
    C.pfn_glColor3ubv = C.PFNGLCOLOR3UBV(loader("glColor3ubv"))
    C.pfn_glColor3ui = C.PFNGLCOLOR3UI(loader("glColor3ui"))
    C.pfn_glColor3uiv = C.PFNGLCOLOR3UIV(loader("glColor3uiv"))
    C.pfn_glColor3us = C.PFNGLCOLOR3US(loader("glColor3us"))
    C.pfn_glColor3usv = C.PFNGLCOLOR3USV(loader("glColor3usv"))
    C.pfn_glColor4b = C.PFNGLCOLOR4B(loader("glColor4b"))
    C.pfn_glColor4bv = C.PFNGLCOLOR4BV(loader("glColor4bv"))
    C.pfn_glColor4d = C.PFNGLCOLOR4D(loader("glColor4d"))
    C.pfn_glColor4dv = C.PFNGLCOLOR4DV(loader("glColor4dv"))
    C.pfn_glColor4f = C.PFNGLCOLOR4F(loader("glColor4f"))
    C.pfn_glColor4fv = C.PFNGLCOLOR4FV(loader("glColor4fv"))
    C.pfn_glColor4i = C.PFNGLCOLOR4I(loader("glColor4i"))
    C.pfn_glColor4iv = C.PFNGLCOLOR4IV(loader("glColor4iv"))
    C.pfn_glColor4s = C.PFNGLCOLOR4S(loader("glColor4s"))
    C.pfn_glColor4sv = C.PFNGLCOLOR4SV(loader("glColor4sv"))
    C.pfn_glColor4ub = C.PFNGLCOLOR4UB(loader("glColor4ub"))
    C.pfn_glColor4ubv = C.PFNGLCOLOR4UBV(loader("glColor4ubv"))
    C.pfn_glColor4ui = C.PFNGLCOLOR4UI(loader("glColor4ui"))
    C.pfn_glColor4uiv = C.PFNGLCOLOR4UIV(loader("glColor4uiv"))
    C.pfn_glColor4us = C.PFNGLCOLOR4US(loader("glColor4us"))
    C.pfn_glColor4usv = C.PFNGLCOLOR4USV(loader("glColor4usv"))
    C.pfn_glColorMask = C.PFNGLCOLORMASK(loader("glColorMask"))
    C.pfn_glColorMaterial = C.PFNGLCOLORMATERIAL(loader("glColorMaterial"))
    C.pfn_glCopyPixels = C.PFNGLCOPYPIXELS(loader("glCopyPixels"))
    C.pfn_glCullFace = C.PFNGLCULLFACE(loader("glCullFace"))
    C.pfn_glDeleteLists = C.PFNGLDELETELISTS(loader("glDeleteLists"))
    C.pfn_glDepthFunc = C.PFNGLDEPTHFUNC(loader("glDepthFunc"))
    C.pfn_glDepthMask = C.PFNGLDEPTHMASK(loader("glDepthMask"))
    C.pfn_glDepthRange = C.PFNGLDEPTHRANGE(loader("glDepthRange"))
    C.pfn_glDisable = C.PFNGLDISABLE(loader("glDisable"))
    C.pfn_glDrawBuffer = C.PFNGLDRAWBUFFER(loader("glDrawBuffer"))
    C.pfn_glDrawPixels = C.PFNGLDRAWPIXELS(loader("glDrawPixels"))
    C.pfn_glEdgeFlag = C.PFNGLEDGEFLAG(loader("glEdgeFlag"))
    C.pfn_glEdgeFlagv = C.PFNGLEDGEFLAGV(loader("glEdgeFlagv"))
    C.pfn_glEnable = C.PFNGLENABLE(loader("glEnable"))
    C.pfn_glEnd = C.PFNGLEND(loader("glEnd"))
    C.pfn_glEndList = C.PFNGLENDLIST(loader("glEndList"))
    C.pfn_glEvalCoord1d = C.PFNGLEVALCOORD1D(loader("glEvalCoord1d"))
    C.pfn_glEvalCoord1dv = C.PFNGLEVALCOORD1DV(loader("glEvalCoord1dv"))
    C.pfn_glEvalCoord1f = C.PFNGLEVALCOORD1F(loader("glEvalCoord1f"))
    C.pfn_glEvalCoord1fv = C.PFNGLEVALCOORD1FV(loader("glEvalCoord1fv"))
    C.pfn_glEvalCoord2d = C.PFNGLEVALCOORD2D(loader("glEvalCoord2d"))
    C.pfn_glEvalCoord2dv = C.PFNGLEVALCOORD2DV(loader("glEvalCoord2dv"))
    C.pfn_glEvalCoord2f = C.PFNGLEVALCOORD2F(loader("glEvalCoord2f"))
    C.pfn_glEvalCoord2fv = C.PFNGLEVALCOORD2FV(loader("glEvalCoord2fv"))
    C.pfn_glEvalMesh1 = C.PFNGLEVALMESH1(loader("glEvalMesh1"))
    C.pfn_glEvalMesh2 = C.PFNGLEVALMESH2(loader("glEvalMesh2"))
    C.pfn_glEvalPoint1 = C.PFNGLEVALPOINT1(loader("glEvalPoint1"))
    C.pfn_glEvalPoint2 = C.PFNGLEVALPOINT2(loader("glEvalPoint2"))
    C.pfn_glFeedbackBuffer = C.PFNGLFEEDBACKBUFFER(loader("glFeedbackBuffer"))
    C.pfn_glFinish = C.PFNGLFINISH(loader("glFinish"))
    C.pfn_glFlush = C.PFNGLFLUSH(loader("glFlush"))
    C.pfn_glFogf = C.PFNGLFOGF(loader("glFogf"))
    C.pfn_glFogfv = C.PFNGLFOGFV(loader("glFogfv"))
    C.pfn_glFogi = C.PFNGLFOGI(loader("glFogi"))
    C.pfn_glFogiv = C.PFNGLFOGIV(loader("glFogiv"))
    C.pfn_glFrontFace = C.PFNGLFRONTFACE(loader("glFrontFace"))
    C.pfn_glFrustum = C.PFNGLFRUSTUM(loader("glFrustum"))
    C.pfn_glGenLists = C.PFNGLGENLISTS(loader("glGenLists"))
    C.pfn_glGetBooleanv = C.PFNGLGETBOOLEANV(loader("glGetBooleanv"))
    C.pfn_glGetClipPlane = C.PFNGLGETCLIPPLANE(loader("glGetClipPlane"))
    C.pfn_glGetDoublev = C.PFNGLGETDOUBLEV(loader("glGetDoublev"))
    C.pfn_glGetError = C.PFNGLGETERROR(loader("glGetError"))
    C.pfn_glGetFloatv = C.PFNGLGETFLOATV(loader("glGetFloatv"))
    C.pfn_glGetIntegerv = C.PFNGLGETINTEGERV(loader("glGetIntegerv"))
    C.pfn_glGetLightfv = C.PFNGLGETLIGHTFV(loader("glGetLightfv"))
    C.pfn_glGetLightiv = C.PFNGLGETLIGHTIV(loader("glGetLightiv"))
    C.pfn_glGetMapdv = C.PFNGLGETMAPDV(loader("glGetMapdv"))
    C.pfn_glGetMapfv = C.PFNGLGETMAPFV(loader("glGetMapfv"))
    C.pfn_glGetMapiv = C.PFNGLGETMAPIV(loader("glGetMapiv"))
    C.pfn_glGetMaterialfv = C.PFNGLGETMATERIALFV(loader("glGetMaterialfv"))
    C.pfn_glGetMaterialiv = C.PFNGLGETMATERIALIV(loader("glGetMaterialiv"))
    C.pfn_glGetPixelMapfv = C.PFNGLGETPIXELMAPFV(loader("glGetPixelMapfv"))
    C.pfn_glGetPixelMapuiv = C.PFNGLGETPIXELMAPUIV(loader("glGetPixelMapuiv"))
    C.pfn_glGetPixelMapusv = C.PFNGLGETPIXELMAPUSV(loader("glGetPixelMapusv"))
    C.pfn_glGetPolygonStipple = C.PFNGLGETPOLYGONSTIPPLE(loader("glGetPolygonStipple"))
    C.pfn_glGetString = C.PFNGLGETSTRING(loader("glGetString"))
    C.pfn_glGetTexEnvfv = C.PFNGLGETTEXENVFV(loader("glGetTexEnvfv"))
    C.pfn_glGetTexEnviv = C.PFNGLGETTEXENVIV(loader("glGetTexEnviv"))
    C.pfn_glGetTexGendv = C.PFNGLGETTEXGENDV(loader("glGetTexGendv"))
    C.pfn_glGetTexGenfv = C.PFNGLGETTEXGENFV(loader("glGetTexGenfv"))
    C.pfn_glGetTexGeniv = C.PFNGLGETTEXGENIV(loader("glGetTexGeniv"))
    C.pfn_glGetTexImage = C.PFNGLGETTEXIMAGE(loader("glGetTexImage"))
    C.pfn_glGetTexLevelParameterfv = C.PFNGLGETTEXLEVELPARAMETERFV(loader("glGetTexLevelParameterfv"))
    C.pfn_glGetTexLevelParameteriv = C.PFNGLGETTEXLEVELPARAMETERIV(loader("glGetTexLevelParameteriv"))
    C.pfn_glGetTexParameterfv = C.PFNGLGETTEXPARAMETERFV(loader("glGetTexParameterfv"))
    C.pfn_glGetTexParameteriv = C.PFNGLGETTEXPARAMETERIV(loader("glGetTexParameteriv"))
    C.pfn_glHint = C.PFNGLHINT(loader("glHint"))
    C.pfn_glIndexMask = C.PFNGLINDEXMASK(loader("glIndexMask"))
    C.pfn_glIndexd = C.PFNGLINDEXD(loader("glIndexd"))
    C.pfn_glIndexdv = C.PFNGLINDEXDV(loader("glIndexdv"))
    C.pfn_glIndexf = C.PFNGLINDEXF(loader("glIndexf"))
    C.pfn_glIndexfv = C.PFNGLINDEXFV(loader("glIndexfv"))
    C.pfn_glIndexi = C.PFNGLINDEXI(loader("glIndexi"))
    C.pfn_glIndexiv = C.PFNGLINDEXIV(loader("glIndexiv"))
    C.pfn_glIndexs = C.PFNGLINDEXS(loader("glIndexs"))
    C.pfn_glIndexsv = C.PFNGLINDEXSV(loader("glIndexsv"))
    C.pfn_glInitNames = C.PFNGLINITNAMES(loader("glInitNames"))
    C.pfn_glIsEnabled = C.PFNGLISENABLED(loader("glIsEnabled"))
    C.pfn_glIsList = C.PFNGLISLIST(loader("glIsList"))
    C.pfn_glLightModelf = C.PFNGLLIGHTMODELF(loader("glLightModelf"))
    C.pfn_glLightModelfv = C.PFNGLLIGHTMODELFV(loader("glLightModelfv"))
    C.pfn_glLightModeli = C.PFNGLLIGHTMODELI(loader("glLightModeli"))
    C.pfn_glLightModeliv = C.PFNGLLIGHTMODELIV(loader("glLightModeliv"))
    C.pfn_glLightf = C.PFNGLLIGHTF(loader("glLightf"))
    C.pfn_glLightfv = C.PFNGLLIGHTFV(loader("glLightfv"))
    C.pfn_glLighti = C.PFNGLLIGHTI(loader("glLighti"))
    C.pfn_glLightiv = C.PFNGLLIGHTIV(loader("glLightiv"))
    C.pfn_glLineStipple = C.PFNGLLINESTIPPLE(loader("glLineStipple"))
    C.pfn_glLineWidth = C.PFNGLLINEWIDTH(loader("glLineWidth"))
    C.pfn_glListBase = C.PFNGLLISTBASE(loader("glListBase"))
    C.pfn_glLoadIdentity = C.PFNGLLOADIDENTITY(loader("glLoadIdentity"))
    C.pfn_glLoadMatrixd = C.PFNGLLOADMATRIXD(loader("glLoadMatrixd"))
    C.pfn_glLoadMatrixf = C.PFNGLLOADMATRIXF(loader("glLoadMatrixf"))
    C.pfn_glLoadName = C.PFNGLLOADNAME(loader("glLoadName"))
    C.pfn_glLogicOp = C.PFNGLLOGICOP(loader("glLogicOp"))
    C.pfn_glMap1d = C.PFNGLMAP1D(loader("glMap1d"))
    C.pfn_glMap1f = C.PFNGLMAP1F(loader("glMap1f"))
    C.pfn_glMap2d = C.PFNGLMAP2D(loader("glMap2d"))
    C.pfn_glMap2f = C.PFNGLMAP2F(loader("glMap2f"))
    C.pfn_glMapGrid1d = C.PFNGLMAPGRID1D(loader("glMapGrid1d"))
    C.pfn_glMapGrid1f = C.PFNGLMAPGRID1F(loader("glMapGrid1f"))
    C.pfn_glMapGrid2d = C.PFNGLMAPGRID2D(loader("glMapGrid2d"))
    C.pfn_glMapGrid2f = C.PFNGLMAPGRID2F(loader("glMapGrid2f"))
    C.pfn_glMaterialf = C.PFNGLMATERIALF(loader("glMaterialf"))
    C.pfn_glMaterialfv = C.PFNGLMATERIALFV(loader("glMaterialfv"))
    C.pfn_glMateriali = C.PFNGLMATERIALI(loader("glMateriali"))
    C.pfn_glMaterialiv = C.PFNGLMATERIALIV(loader("glMaterialiv"))
    C.pfn_glMatrixMode = C.PFNGLMATRIXMODE(loader("glMatrixMode"))
    C.pfn_glMultMatrixd = C.PFNGLMULTMATRIXD(loader("glMultMatrixd"))
    C.pfn_glMultMatrixf = C.PFNGLMULTMATRIXF(loader("glMultMatrixf"))
    C.pfn_glNewList = C.PFNGLNEWLIST(loader("glNewList"))
    C.pfn_glNormal3b = C.PFNGLNORMAL3B(loader("glNormal3b"))
    C.pfn_glNormal3bv = C.PFNGLNORMAL3BV(loader("glNormal3bv"))
    C.pfn_glNormal3d = C.PFNGLNORMAL3D(loader("glNormal3d"))
    C.pfn_glNormal3dv = C.PFNGLNORMAL3DV(loader("glNormal3dv"))
    C.pfn_glNormal3f = C.PFNGLNORMAL3F(loader("glNormal3f"))
    C.pfn_glNormal3fv = C.PFNGLNORMAL3FV(loader("glNormal3fv"))
    C.pfn_glNormal3i = C.PFNGLNORMAL3I(loader("glNormal3i"))
    C.pfn_glNormal3iv = C.PFNGLNORMAL3IV(loader("glNormal3iv"))
    C.pfn_glNormal3s = C.PFNGLNORMAL3S(loader("glNormal3s"))
    C.pfn_glNormal3sv = C.PFNGLNORMAL3SV(loader("glNormal3sv"))
    C.pfn_glOrtho = C.PFNGLORTHO(loader("glOrtho"))
    C.pfn_glPassThrough = C.PFNGLPASSTHROUGH(loader("glPassThrough"))
    C.pfn_glPixelMapfv = C.PFNGLPIXELMAPFV(loader("glPixelMapfv"))
    C.pfn_glPixelMapuiv = C.PFNGLPIXELMAPUIV(loader("glPixelMapuiv"))
    C.pfn_glPixelMapusv = C.PFNGLPIXELMAPUSV(loader("glPixelMapusv"))
    C.pfn_glPixelStoref = C.PFNGLPIXELSTOREF(loader("glPixelStoref"))
    C.pfn_glPixelStorei = C.PFNGLPIXELSTOREI(loader("glPixelStorei"))
    C.pfn_glPixelTransferf = C.PFNGLPIXELTRANSFERF(loader("glPixelTransferf"))
    C.pfn_glPixelTransferi = C.PFNGLPIXELTRANSFERI(loader("glPixelTransferi"))
    C.pfn_glPixelZoom = C.PFNGLPIXELZOOM(loader("glPixelZoom"))
    C.pfn_glPointSize = C.PFNGLPOINTSIZE(loader("glPointSize"))
    C.pfn_glPolygonMode = C.PFNGLPOLYGONMODE(loader("glPolygonMode"))
    C.pfn_glPolygonStipple = C.PFNGLPOLYGONSTIPPLE(loader("glPolygonStipple"))
    C.pfn_glPopAttrib = C.PFNGLPOPATTRIB(loader("glPopAttrib"))
    C.pfn_glPopMatrix = C.PFNGLPOPMATRIX(loader("glPopMatrix"))
    C.pfn_glPopName = C.PFNGLPOPNAME(loader("glPopName"))
    C.pfn_glPushAttrib = C.PFNGLPUSHATTRIB(loader("glPushAttrib"))
    C.pfn_glPushMatrix = C.PFNGLPUSHMATRIX(loader("glPushMatrix"))
    C.pfn_glPushName = C.PFNGLPUSHNAME(loader("glPushName"))
    C.pfn_glRasterPos2d = C.PFNGLRASTERPOS2D(loader("glRasterPos2d"))
    C.pfn_glRasterPos2dv = C.PFNGLRASTERPOS2DV(loader("glRasterPos2dv"))
    C.pfn_glRasterPos2f = C.PFNGLRASTERPOS2F(loader("glRasterPos2f"))
    C.pfn_glRasterPos2fv = C.PFNGLRASTERPOS2FV(loader("glRasterPos2fv"))
    C.pfn_glRasterPos2i = C.PFNGLRASTERPOS2I(loader("glRasterPos2i"))
    C.pfn_glRasterPos2iv = C.PFNGLRASTERPOS2IV(loader("glRasterPos2iv"))
    C.pfn_glRasterPos2s = C.PFNGLRASTERPOS2S(loader("glRasterPos2s"))
    C.pfn_glRasterPos2sv = C.PFNGLRASTERPOS2SV(loader("glRasterPos2sv"))
    C.pfn_glRasterPos3d = C.PFNGLRASTERPOS3D(loader("glRasterPos3d"))
    C.pfn_glRasterPos3dv = C.PFNGLRASTERPOS3DV(loader("glRasterPos3dv"))
    C.pfn_glRasterPos3f = C.PFNGLRASTERPOS3F(loader("glRasterPos3f"))
    C.pfn_glRasterPos3fv = C.PFNGLRASTERPOS3FV(loader("glRasterPos3fv"))
    C.pfn_glRasterPos3i = C.PFNGLRASTERPOS3I(loader("glRasterPos3i"))
    C.pfn_glRasterPos3iv = C.PFNGLRASTERPOS3IV(loader("glRasterPos3iv"))
    C.pfn_glRasterPos3s = C.PFNGLRASTERPOS3S(loader("glRasterPos3s"))
    C.pfn_glRasterPos3sv = C.PFNGLRASTERPOS3SV(loader("glRasterPos3sv"))
    C.pfn_glRasterPos4d = C.PFNGLRASTERPOS4D(loader("glRasterPos4d"))
    C.pfn_glRasterPos4dv = C.PFNGLRASTERPOS4DV(loader("glRasterPos4dv"))
    C.pfn_glRasterPos4f = C.PFNGLRASTERPOS4F(loader("glRasterPos4f"))
    C.pfn_glRasterPos4fv = C.PFNGLRASTERPOS4FV(loader("glRasterPos4fv"))
    C.pfn_glRasterPos4i = C.PFNGLRASTERPOS4I(loader("glRasterPos4i"))
    C.pfn_glRasterPos4iv = C.PFNGLRASTERPOS4IV(loader("glRasterPos4iv"))
    C.pfn_glRasterPos4s = C.PFNGLRASTERPOS4S(loader("glRasterPos4s"))
    C.pfn_glRasterPos4sv = C.PFNGLRASTERPOS4SV(loader("glRasterPos4sv"))
    C.pfn_glReadBuffer = C.PFNGLREADBUFFER(loader("glReadBuffer"))
    C.pfn_glReadPixels = C.PFNGLREADPIXELS(loader("glReadPixels"))
    C.pfn_glRectd = C.PFNGLRECTD(loader("glRectd"))
    C.pfn_glRectdv = C.PFNGLRECTDV(loader("glRectdv"))
    C.pfn_glRectf = C.PFNGLRECTF(loader("glRectf"))
    C.pfn_glRectfv = C.PFNGLRECTFV(loader("glRectfv"))
    C.pfn_glRecti = C.PFNGLRECTI(loader("glRecti"))
    C.pfn_glRectiv = C.PFNGLRECTIV(loader("glRectiv"))
    C.pfn_glRects = C.PFNGLRECTS(loader("glRects"))
    C.pfn_glRectsv = C.PFNGLRECTSV(loader("glRectsv"))
    C.pfn_glRenderMode = C.PFNGLRENDERMODE(loader("glRenderMode"))
    C.pfn_glRotated = C.PFNGLROTATED(loader("glRotated"))
    C.pfn_glRotatef = C.PFNGLROTATEF(loader("glRotatef"))
    C.pfn_glScaled = C.PFNGLSCALED(loader("glScaled"))
    C.pfn_glScalef = C.PFNGLSCALEF(loader("glScalef"))
    C.pfn_glScissor = C.PFNGLSCISSOR(loader("glScissor"))
    C.pfn_glSelectBuffer = C.PFNGLSELECTBUFFER(loader("glSelectBuffer"))
    C.pfn_glShadeModel = C.PFNGLSHADEMODEL(loader("glShadeModel"))
    C.pfn_glStencilFunc = C.PFNGLSTENCILFUNC(loader("glStencilFunc"))
    C.pfn_glStencilMask = C.PFNGLSTENCILMASK(loader("glStencilMask"))
    C.pfn_glStencilOp = C.PFNGLSTENCILOP(loader("glStencilOp"))
    C.pfn_glTexCoord1d = C.PFNGLTEXCOORD1D(loader("glTexCoord1d"))
    C.pfn_glTexCoord1dv = C.PFNGLTEXCOORD1DV(loader("glTexCoord1dv"))
    C.pfn_glTexCoord1f = C.PFNGLTEXCOORD1F(loader("glTexCoord1f"))
    C.pfn_glTexCoord1fv = C.PFNGLTEXCOORD1FV(loader("glTexCoord1fv"))
    C.pfn_glTexCoord1i = C.PFNGLTEXCOORD1I(loader("glTexCoord1i"))
    C.pfn_glTexCoord1iv = C.PFNGLTEXCOORD1IV(loader("glTexCoord1iv"))
    C.pfn_glTexCoord1s = C.PFNGLTEXCOORD1S(loader("glTexCoord1s"))
    C.pfn_glTexCoord1sv = C.PFNGLTEXCOORD1SV(loader("glTexCoord1sv"))
    C.pfn_glTexCoord2d = C.PFNGLTEXCOORD2D(loader("glTexCoord2d"))
    C.pfn_glTexCoord2dv = C.PFNGLTEXCOORD2DV(loader("glTexCoord2dv"))
    C.pfn_glTexCoord2f = C.PFNGLTEXCOORD2F(loader("glTexCoord2f"))
    C.pfn_glTexCoord2fv = C.PFNGLTEXCOORD2FV(loader("glTexCoord2fv"))
    C.pfn_glTexCoord2i = C.PFNGLTEXCOORD2I(loader("glTexCoord2i"))
    C.pfn_glTexCoord2iv = C.PFNGLTEXCOORD2IV(loader("glTexCoord2iv"))
    C.pfn_glTexCoord2s = C.PFNGLTEXCOORD2S(loader("glTexCoord2s"))
    C.pfn_glTexCoord2sv = C.PFNGLTEXCOORD2SV(loader("glTexCoord2sv"))
    C.pfn_glTexCoord3d = C.PFNGLTEXCOORD3D(loader("glTexCoord3d"))
    C.pfn_glTexCoord3dv = C.PFNGLTEXCOORD3DV(loader("glTexCoord3dv"))
    C.pfn_glTexCoord3f = C.PFNGLTEXCOORD3F(loader("glTexCoord3f"))
    C.pfn_glTexCoord3fv = C.PFNGLTEXCOORD3FV(loader("glTexCoord3fv"))
    C.pfn_glTexCoord3i = C.PFNGLTEXCOORD3I(loader("glTexCoord3i"))
    C.pfn_glTexCoord3iv = C.PFNGLTEXCOORD3IV(loader("glTexCoord3iv"))
    C.pfn_glTexCoord3s = C.PFNGLTEXCOORD3S(loader("glTexCoord3s"))
    C.pfn_glTexCoord3sv = C.PFNGLTEXCOORD3SV(loader("glTexCoord3sv"))
    C.pfn_glTexCoord4d = C.PFNGLTEXCOORD4D(loader("glTexCoord4d"))
    C.pfn_glTexCoord4dv = C.PFNGLTEXCOORD4DV(loader("glTexCoord4dv"))
    C.pfn_glTexCoord4f = C.PFNGLTEXCOORD4F(loader("glTexCoord4f"))
    C.pfn_glTexCoord4fv = C.PFNGLTEXCOORD4FV(loader("glTexCoord4fv"))
    C.pfn_glTexCoord4i = C.PFNGLTEXCOORD4I(loader("glTexCoord4i"))
    C.pfn_glTexCoord4iv = C.PFNGLTEXCOORD4IV(loader("glTexCoord4iv"))
    C.pfn_glTexCoord4s = C.PFNGLTEXCOORD4S(loader("glTexCoord4s"))
    C.pfn_glTexCoord4sv = C.PFNGLTEXCOORD4SV(loader("glTexCoord4sv"))
    C.pfn_glTexEnvf = C.PFNGLTEXENVF(loader("glTexEnvf"))
    C.pfn_glTexEnvfv = C.PFNGLTEXENVFV(loader("glTexEnvfv"))
    C.pfn_glTexEnvi = C.PFNGLTEXENVI(loader("glTexEnvi"))
    C.pfn_glTexEnviv = C.PFNGLTEXENVIV(loader("glTexEnviv"))
    C.pfn_glTexGend = C.PFNGLTEXGEND(loader("glTexGend"))
    C.pfn_glTexGendv = C.PFNGLTEXGENDV(loader("glTexGendv"))
    C.pfn_glTexGenf = C.PFNGLTEXGENF(loader("glTexGenf"))
    C.pfn_glTexGenfv = C.PFNGLTEXGENFV(loader("glTexGenfv"))
    C.pfn_glTexGeni = C.PFNGLTEXGENI(loader("glTexGeni"))
    C.pfn_glTexGeniv = C.PFNGLTEXGENIV(loader("glTexGeniv"))
    C.pfn_glTexImage1D = C.PFNGLTEXIMAGE1D(loader("glTexImage1D"))
    C.pfn_glTexImage2D = C.PFNGLTEXIMAGE2D(loader("glTexImage2D"))
    C.pfn_glTexParameterf = C.PFNGLTEXPARAMETERF(loader("glTexParameterf"))
    C.pfn_glTexParameterfv = C.PFNGLTEXPARAMETERFV(loader("glTexParameterfv"))
    C.pfn_glTexParameteri = C.PFNGLTEXPARAMETERI(loader("glTexParameteri"))
    C.pfn_glTexParameteriv = C.PFNGLTEXPARAMETERIV(loader("glTexParameteriv"))
    C.pfn_glTranslated = C.PFNGLTRANSLATED(loader("glTranslated"))
    C.pfn_glTranslatef = C.PFNGLTRANSLATEF(loader("glTranslatef"))
    C.pfn_glVertex2d = C.PFNGLVERTEX2D(loader("glVertex2d"))
    C.pfn_glVertex2dv = C.PFNGLVERTEX2DV(loader("glVertex2dv"))
    C.pfn_glVertex2f = C.PFNGLVERTEX2F(loader("glVertex2f"))
    C.pfn_glVertex2fv = C.PFNGLVERTEX2FV(loader("glVertex2fv"))
    C.pfn_glVertex2i = C.PFNGLVERTEX2I(loader("glVertex2i"))
    C.pfn_glVertex2iv = C.PFNGLVERTEX2IV(loader("glVertex2iv"))
    C.pfn_glVertex2s = C.PFNGLVERTEX2S(loader("glVertex2s"))
    C.pfn_glVertex2sv = C.PFNGLVERTEX2SV(loader("glVertex2sv"))
    C.pfn_glVertex3d = C.PFNGLVERTEX3D(loader("glVertex3d"))
    C.pfn_glVertex3dv = C.PFNGLVERTEX3DV(loader("glVertex3dv"))
    C.pfn_glVertex3f = C.PFNGLVERTEX3F(loader("glVertex3f"))
    C.pfn_glVertex3fv = C.PFNGLVERTEX3FV(loader("glVertex3fv"))
    C.pfn_glVertex3i = C.PFNGLVERTEX3I(loader("glVertex3i"))
    C.pfn_glVertex3iv = C.PFNGLVERTEX3IV(loader("glVertex3iv"))
    C.pfn_glVertex3s = C.PFNGLVERTEX3S(loader("glVertex3s"))
    C.pfn_glVertex3sv = C.PFNGLVERTEX3SV(loader("glVertex3sv"))
    C.pfn_glVertex4d = C.PFNGLVERTEX4D(loader("glVertex4d"))
    C.pfn_glVertex4dv = C.PFNGLVERTEX4DV(loader("glVertex4dv"))
    C.pfn_glVertex4f = C.PFNGLVERTEX4F(loader("glVertex4f"))
    C.pfn_glVertex4fv = C.PFNGLVERTEX4FV(loader("glVertex4fv"))
    C.pfn_glVertex4i = C.PFNGLVERTEX4I(loader("glVertex4i"))
    C.pfn_glVertex4iv = C.PFNGLVERTEX4IV(loader("glVertex4iv"))
    C.pfn_glVertex4s = C.PFNGLVERTEX4S(loader("glVertex4s"))
    C.pfn_glVertex4sv = C.PFNGLVERTEX4SV(loader("glVertex4sv"))
    C.pfn_glViewport = C.PFNGLVIEWPORT(loader("glViewport"))

    // OpenGL 1.1
    if !ver.GE(OpenGL, 1, 1) {
        return
    }
    C.pfn_glAreTexturesResident = C.PFNGLARETEXTURESRESIDENT(loader("glAreTexturesResident"))
    C.pfn_glArrayElement = C.PFNGLARRAYELEMENT(loader("glArrayElement"))
    C.pfn_glBindTexture = C.PFNGLBINDTEXTURE(loader("glBindTexture"))
    C.pfn_glColorPointer = C.PFNGLCOLORPOINTER(loader("glColorPointer"))
    C.pfn_glCopyTexImage1D = C.PFNGLCOPYTEXIMAGE1D(loader("glCopyTexImage1D"))
    C.pfn_glCopyTexImage2D = C.PFNGLCOPYTEXIMAGE2D(loader("glCopyTexImage2D"))
    C.pfn_glCopyTexSubImage1D = C.PFNGLCOPYTEXSUBIMAGE1D(loader("glCopyTexSubImage1D"))
    C.pfn_glCopyTexSubImage2D = C.PFNGLCOPYTEXSUBIMAGE2D(loader("glCopyTexSubImage2D"))
    C.pfn_glDeleteTextures = C.PFNGLDELETETEXTURES(loader("glDeleteTextures"))
    C.pfn_glDisableClientState = C.PFNGLDISABLECLIENTSTATE(loader("glDisableClientState"))
    C.pfn_glDrawArrays = C.PFNGLDRAWARRAYS(loader("glDrawArrays"))
    C.pfn_glDrawElements = C.PFNGLDRAWELEMENTS(loader("glDrawElements"))
    C.pfn_glEdgeFlagPointer = C.PFNGLEDGEFLAGPOINTER(loader("glEdgeFlagPointer"))
    C.pfn_glEnableClientState = C.PFNGLENABLECLIENTSTATE(loader("glEnableClientState"))
    C.pfn_glGenTextures = C.PFNGLGENTEXTURES(loader("glGenTextures"))
    C.pfn_glGetPointerv = C.PFNGLGETPOINTERV(loader("glGetPointerv"))
    C.pfn_glIndexPointer = C.PFNGLINDEXPOINTER(loader("glIndexPointer"))
    C.pfn_glIndexub = C.PFNGLINDEXUB(loader("glIndexub"))
    C.pfn_glIndexubv = C.PFNGLINDEXUBV(loader("glIndexubv"))
    C.pfn_glInterleavedArrays = C.PFNGLINTERLEAVEDARRAYS(loader("glInterleavedArrays"))
    C.pfn_glIsTexture = C.PFNGLISTEXTURE(loader("glIsTexture"))
    C.pfn_glNormalPointer = C.PFNGLNORMALPOINTER(loader("glNormalPointer"))
    C.pfn_glPolygonOffset = C.PFNGLPOLYGONOFFSET(loader("glPolygonOffset"))
    C.pfn_glPopClientAttrib = C.PFNGLPOPCLIENTATTRIB(loader("glPopClientAttrib"))
    C.pfn_glPrioritizeTextures = C.PFNGLPRIORITIZETEXTURES(loader("glPrioritizeTextures"))
    C.pfn_glPushClientAttrib = C.PFNGLPUSHCLIENTATTRIB(loader("glPushClientAttrib"))
    C.pfn_glTexCoordPointer = C.PFNGLTEXCOORDPOINTER(loader("glTexCoordPointer"))
    C.pfn_glTexSubImage1D = C.PFNGLTEXSUBIMAGE1D(loader("glTexSubImage1D"))
    C.pfn_glTexSubImage2D = C.PFNGLTEXSUBIMAGE2D(loader("glTexSubImage2D"))
    C.pfn_glVertexPointer = C.PFNGLVERTEXPOINTER(loader("glVertexPointer"))

    // OpenGL 1.2
    if !ver.GE(OpenGL, 1, 2) {
        return
    }
    C.pfn_glCopyTexSubImage3D = C.PFNGLCOPYTEXSUBIMAGE3D(loader("glCopyTexSubImage3D"))
    C.pfn_glDrawRangeElements = C.PFNGLDRAWRANGEELEMENTS(loader("glDrawRangeElements"))
    C.pfn_glTexImage3D = C.PFNGLTEXIMAGE3D(loader("glTexImage3D"))
    C.pfn_glTexSubImage3D = C.PFNGLTEXSUBIMAGE3D(loader("glTexSubImage3D"))

    // OpenGL 1.3
    if !ver.GE(OpenGL, 1, 3) {
        return
    }
    C.pfn_glActiveTexture = C.PFNGLACTIVETEXTURE(loader("glActiveTexture"))
    C.pfn_glClientActiveTexture = C.PFNGLCLIENTACTIVETEXTURE(loader("glClientActiveTexture"))
    C.pfn_glCompressedTexImage1D = C.PFNGLCOMPRESSEDTEXIMAGE1D(loader("glCompressedTexImage1D"))
    C.pfn_glCompressedTexImage2D = C.PFNGLCOMPRESSEDTEXIMAGE2D(loader("glCompressedTexImage2D"))
    C.pfn_glCompressedTexImage3D = C.PFNGLCOMPRESSEDTEXIMAGE3D(loader("glCompressedTexImage3D"))
    C.pfn_glCompressedTexSubImage1D = C.PFNGLCOMPRESSEDTEXSUBIMAGE1D(loader("glCompressedTexSubImage1D"))
    C.pfn_glCompressedTexSubImage2D = C.PFNGLCOMPRESSEDTEXSUBIMAGE2D(loader("glCompressedTexSubImage2D"))
    C.pfn_glCompressedTexSubImage3D = C.PFNGLCOMPRESSEDTEXSUBIMAGE3D(loader("glCompressedTexSubImage3D"))
    C.pfn_glGetCompressedTexImage = C.PFNGLGETCOMPRESSEDTEXIMAGE(loader("glGetCompressedTexImage"))
    C.pfn_glLoadTransposeMatrixd = C.PFNGLLOADTRANSPOSEMATRIXD(loader("glLoadTransposeMatrixd"))
    C.pfn_glLoadTransposeMatrixf = C.PFNGLLOADTRANSPOSEMATRIXF(loader("glLoadTransposeMatrixf"))
    C.pfn_glMultTransposeMatrixd = C.PFNGLMULTTRANSPOSEMATRIXD(loader("glMultTransposeMatrixd"))
    C.pfn_glMultTransposeMatrixf = C.PFNGLMULTTRANSPOSEMATRIXF(loader("glMultTransposeMatrixf"))
    C.pfn_glMultiTexCoord1d = C.PFNGLMULTITEXCOORD1D(loader("glMultiTexCoord1d"))
    C.pfn_glMultiTexCoord1dv = C.PFNGLMULTITEXCOORD1DV(loader("glMultiTexCoord1dv"))
    C.pfn_glMultiTexCoord1f = C.PFNGLMULTITEXCOORD1F(loader("glMultiTexCoord1f"))
    C.pfn_glMultiTexCoord1fv = C.PFNGLMULTITEXCOORD1FV(loader("glMultiTexCoord1fv"))
    C.pfn_glMultiTexCoord1i = C.PFNGLMULTITEXCOORD1I(loader("glMultiTexCoord1i"))
    C.pfn_glMultiTexCoord1iv = C.PFNGLMULTITEXCOORD1IV(loader("glMultiTexCoord1iv"))
    C.pfn_glMultiTexCoord1s = C.PFNGLMULTITEXCOORD1S(loader("glMultiTexCoord1s"))
    C.pfn_glMultiTexCoord1sv = C.PFNGLMULTITEXCOORD1SV(loader("glMultiTexCoord1sv"))
    C.pfn_glMultiTexCoord2d = C.PFNGLMULTITEXCOORD2D(loader("glMultiTexCoord2d"))
    C.pfn_glMultiTexCoord2dv = C.PFNGLMULTITEXCOORD2DV(loader("glMultiTexCoord2dv"))
    C.pfn_glMultiTexCoord2f = C.PFNGLMULTITEXCOORD2F(loader("glMultiTexCoord2f"))
    C.pfn_glMultiTexCoord2fv = C.PFNGLMULTITEXCOORD2FV(loader("glMultiTexCoord2fv"))
    C.pfn_glMultiTexCoord2i = C.PFNGLMULTITEXCOORD2I(loader("glMultiTexCoord2i"))
    C.pfn_glMultiTexCoord2iv = C.PFNGLMULTITEXCOORD2IV(loader("glMultiTexCoord2iv"))
    C.pfn_glMultiTexCoord2s = C.PFNGLMULTITEXCOORD2S(loader("glMultiTexCoord2s"))
    C.pfn_glMultiTexCoord2sv = C.PFNGLMULTITEXCOORD2SV(loader("glMultiTexCoord2sv"))
    C.pfn_glMultiTexCoord3d = C.PFNGLMULTITEXCOORD3D(loader("glMultiTexCoord3d"))
    C.pfn_glMultiTexCoord3dv = C.PFNGLMULTITEXCOORD3DV(loader("glMultiTexCoord3dv"))
    C.pfn_glMultiTexCoord3f = C.PFNGLMULTITEXCOORD3F(loader("glMultiTexCoord3f"))
    C.pfn_glMultiTexCoord3fv = C.PFNGLMULTITEXCOORD3FV(loader("glMultiTexCoord3fv"))
    C.pfn_glMultiTexCoord3i = C.PFNGLMULTITEXCOORD3I(loader("glMultiTexCoord3i"))
    C.pfn_glMultiTexCoord3iv = C.PFNGLMULTITEXCOORD3IV(loader("glMultiTexCoord3iv"))
    C.pfn_glMultiTexCoord3s = C.PFNGLMULTITEXCOORD3S(loader("glMultiTexCoord3s"))
    C.pfn_glMultiTexCoord3sv = C.PFNGLMULTITEXCOORD3SV(loader("glMultiTexCoord3sv"))
    C.pfn_glMultiTexCoord4d = C.PFNGLMULTITEXCOORD4D(loader("glMultiTexCoord4d"))
    C.pfn_glMultiTexCoord4dv = C.PFNGLMULTITEXCOORD4DV(loader("glMultiTexCoord4dv"))
    C.pfn_glMultiTexCoord4f = C.PFNGLMULTITEXCOORD4F(loader("glMultiTexCoord4f"))
    C.pfn_glMultiTexCoord4fv = C.PFNGLMULTITEXCOORD4FV(loader("glMultiTexCoord4fv"))
    C.pfn_glMultiTexCoord4i = C.PFNGLMULTITEXCOORD4I(loader("glMultiTexCoord4i"))
    C.pfn_glMultiTexCoord4iv = C.PFNGLMULTITEXCOORD4IV(loader("glMultiTexCoord4iv"))
    C.pfn_glMultiTexCoord4s = C.PFNGLMULTITEXCOORD4S(loader("glMultiTexCoord4s"))
    C.pfn_glMultiTexCoord4sv = C.PFNGLMULTITEXCOORD4SV(loader("glMultiTexCoord4sv"))
    C.pfn_glSampleCoverage = C.PFNGLSAMPLECOVERAGE(loader("glSampleCoverage"))

    // OpenGL 1.4
    if !ver.GE(OpenGL, 1, 4) {
        return
    }
    C.pfn_glBlendColor = C.PFNGLBLENDCOLOR(loader("glBlendColor"))
    C.pfn_glBlendEquation = C.PFNGLBLENDEQUATION(loader("glBlendEquation"))
    C.pfn_glBlendFuncSeparate = C.PFNGLBLENDFUNCSEPARATE(loader("glBlendFuncSeparate"))
    C.pfn_glFogCoordPointer = C.PFNGLFOGCOORDPOINTER(loader("glFogCoordPointer"))
    C.pfn_glFogCoordd = C.PFNGLFOGCOORDD(loader("glFogCoordd"))
    C.pfn_glFogCoorddv = C.PFNGLFOGCOORDDV(loader("glFogCoorddv"))
    C.pfn_glFogCoordf = C.PFNGLFOGCOORDF(loader("glFogCoordf"))
    C.pfn_glFogCoordfv = C.PFNGLFOGCOORDFV(loader("glFogCoordfv"))
    C.pfn_glMultiDrawArrays = C.PFNGLMULTIDRAWARRAYS(loader("glMultiDrawArrays"))
    C.pfn_glMultiDrawElements = C.PFNGLMULTIDRAWELEMENTS(loader("glMultiDrawElements"))
    C.pfn_glPointParameterf = C.PFNGLPOINTPARAMETERF(loader("glPointParameterf"))
    C.pfn_glPointParameterfv = C.PFNGLPOINTPARAMETERFV(loader("glPointParameterfv"))
    C.pfn_glPointParameteri = C.PFNGLPOINTPARAMETERI(loader("glPointParameteri"))
    C.pfn_glPointParameteriv = C.PFNGLPOINTPARAMETERIV(loader("glPointParameteriv"))
    C.pfn_glSecondaryColor3b = C.PFNGLSECONDARYCOLOR3B(loader("glSecondaryColor3b"))
    C.pfn_glSecondaryColor3bv = C.PFNGLSECONDARYCOLOR3BV(loader("glSecondaryColor3bv"))
    C.pfn_glSecondaryColor3d = C.PFNGLSECONDARYCOLOR3D(loader("glSecondaryColor3d"))
    C.pfn_glSecondaryColor3dv = C.PFNGLSECONDARYCOLOR3DV(loader("glSecondaryColor3dv"))
    C.pfn_glSecondaryColor3f = C.PFNGLSECONDARYCOLOR3F(loader("glSecondaryColor3f"))
    C.pfn_glSecondaryColor3fv = C.PFNGLSECONDARYCOLOR3FV(loader("glSecondaryColor3fv"))
    C.pfn_glSecondaryColor3i = C.PFNGLSECONDARYCOLOR3I(loader("glSecondaryColor3i"))
    C.pfn_glSecondaryColor3iv = C.PFNGLSECONDARYCOLOR3IV(loader("glSecondaryColor3iv"))
    C.pfn_glSecondaryColor3s = C.PFNGLSECONDARYCOLOR3S(loader("glSecondaryColor3s"))
    C.pfn_glSecondaryColor3sv = C.PFNGLSECONDARYCOLOR3SV(loader("glSecondaryColor3sv"))
    C.pfn_glSecondaryColor3ub = C.PFNGLSECONDARYCOLOR3UB(loader("glSecondaryColor3ub"))
    C.pfn_glSecondaryColor3ubv = C.PFNGLSECONDARYCOLOR3UBV(loader("glSecondaryColor3ubv"))
    C.pfn_glSecondaryColor3ui = C.PFNGLSECONDARYCOLOR3UI(loader("glSecondaryColor3ui"))
    C.pfn_glSecondaryColor3uiv = C.PFNGLSECONDARYCOLOR3UIV(loader("glSecondaryColor3uiv"))
    C.pfn_glSecondaryColor3us = C.PFNGLSECONDARYCOLOR3US(loader("glSecondaryColor3us"))
    C.pfn_glSecondaryColor3usv = C.PFNGLSECONDARYCOLOR3USV(loader("glSecondaryColor3usv"))
    C.pfn_glSecondaryColorPointer = C.PFNGLSECONDARYCOLORPOINTER(loader("glSecondaryColorPointer"))
    C.pfn_glWindowPos2d = C.PFNGLWINDOWPOS2D(loader("glWindowPos2d"))
    C.pfn_glWindowPos2dv = C.PFNGLWINDOWPOS2DV(loader("glWindowPos2dv"))
    C.pfn_glWindowPos2f = C.PFNGLWINDOWPOS2F(loader("glWindowPos2f"))
    C.pfn_glWindowPos2fv = C.PFNGLWINDOWPOS2FV(loader("glWindowPos2fv"))
    C.pfn_glWindowPos2i = C.PFNGLWINDOWPOS2I(loader("glWindowPos2i"))
    C.pfn_glWindowPos2iv = C.PFNGLWINDOWPOS2IV(loader("glWindowPos2iv"))
    C.pfn_glWindowPos2s = C.PFNGLWINDOWPOS2S(loader("glWindowPos2s"))
    C.pfn_glWindowPos2sv = C.PFNGLWINDOWPOS2SV(loader("glWindowPos2sv"))
    C.pfn_glWindowPos3d = C.PFNGLWINDOWPOS3D(loader("glWindowPos3d"))
    C.pfn_glWindowPos3dv = C.PFNGLWINDOWPOS3DV(loader("glWindowPos3dv"))
    C.pfn_glWindowPos3f = C.PFNGLWINDOWPOS3F(loader("glWindowPos3f"))
    C.pfn_glWindowPos3fv = C.PFNGLWINDOWPOS3FV(loader("glWindowPos3fv"))
    C.pfn_glWindowPos3i = C.PFNGLWINDOWPOS3I(loader("glWindowPos3i"))
    C.pfn_glWindowPos3iv = C.PFNGLWINDOWPOS3IV(loader("glWindowPos3iv"))
    C.pfn_glWindowPos3s = C.PFNGLWINDOWPOS3S(loader("glWindowPos3s"))
    C.pfn_glWindowPos3sv = C.PFNGLWINDOWPOS3SV(loader("glWindowPos3sv"))

    // OpenGL 1.5
    if !ver.GE(OpenGL, 1, 5) {
        return
    }
    C.pfn_glBeginQuery = C.PFNGLBEGINQUERY(loader("glBeginQuery"))
    C.pfn_glBindBuffer = C.PFNGLBINDBUFFER(loader("glBindBuffer"))
    C.pfn_glBufferData = C.PFNGLBUFFERDATA(loader("glBufferData"))
    C.pfn_glBufferSubData = C.PFNGLBUFFERSUBDATA(loader("glBufferSubData"))
    C.pfn_glDeleteBuffers = C.PFNGLDELETEBUFFERS(loader("glDeleteBuffers"))
    C.pfn_glDeleteQueries = C.PFNGLDELETEQUERIES(loader("glDeleteQueries"))
    C.pfn_glEndQuery = C.PFNGLENDQUERY(loader("glEndQuery"))
    C.pfn_glGenBuffers = C.PFNGLGENBUFFERS(loader("glGenBuffers"))
    C.pfn_glGenQueries = C.PFNGLGENQUERIES(loader("glGenQueries"))
    C.pfn_glGetBufferParameteriv = C.PFNGLGETBUFFERPARAMETERIV(loader("glGetBufferParameteriv"))
    C.pfn_glGetBufferPointerv = C.PFNGLGETBUFFERPOINTERV(loader("glGetBufferPointerv"))
    C.pfn_glGetBufferSubData = C.PFNGLGETBUFFERSUBDATA(loader("glGetBufferSubData"))
    C.pfn_glGetQueryObjectiv = C.PFNGLGETQUERYOBJECTIV(loader("glGetQueryObjectiv"))
    C.pfn_glGetQueryObjectuiv = C.PFNGLGETQUERYOBJECTUIV(loader("glGetQueryObjectuiv"))
    C.pfn_glGetQueryiv = C.PFNGLGETQUERYIV(loader("glGetQueryiv"))
    C.pfn_glIsBuffer = C.PFNGLISBUFFER(loader("glIsBuffer"))
    C.pfn_glIsQuery = C.PFNGLISQUERY(loader("glIsQuery"))
    C.pfn_glMapBuffer = C.PFNGLMAPBUFFER(loader("glMapBuffer"))
    C.pfn_glUnmapBuffer = C.PFNGLUNMAPBUFFER(loader("glUnmapBuffer"))

    // OpenGL 2.0
    if !ver.GE(OpenGL, 2, 0) {
        return
    }
    C.pfn_glAttachShader = C.PFNGLATTACHSHADER(loader("glAttachShader"))
    C.pfn_glBindAttribLocation = C.PFNGLBINDATTRIBLOCATION(loader("glBindAttribLocation"))
    C.pfn_glBlendEquationSeparate = C.PFNGLBLENDEQUATIONSEPARATE(loader("glBlendEquationSeparate"))
    C.pfn_glCompileShader = C.PFNGLCOMPILESHADER(loader("glCompileShader"))
    C.pfn_glCreateProgram = C.PFNGLCREATEPROGRAM(loader("glCreateProgram"))
    C.pfn_glCreateShader = C.PFNGLCREATESHADER(loader("glCreateShader"))
    C.pfn_glDeleteProgram = C.PFNGLDELETEPROGRAM(loader("glDeleteProgram"))
    C.pfn_glDeleteShader = C.PFNGLDELETESHADER(loader("glDeleteShader"))
    C.pfn_glDetachShader = C.PFNGLDETACHSHADER(loader("glDetachShader"))
    C.pfn_glDisableVertexAttribArray = C.PFNGLDISABLEVERTEXATTRIBARRAY(loader("glDisableVertexAttribArray"))
    C.pfn_glDrawBuffers = C.PFNGLDRAWBUFFERS(loader("glDrawBuffers"))
    C.pfn_glEnableVertexAttribArray = C.PFNGLENABLEVERTEXATTRIBARRAY(loader("glEnableVertexAttribArray"))
    C.pfn_glGetActiveAttrib = C.PFNGLGETACTIVEATTRIB(loader("glGetActiveAttrib"))
    C.pfn_glGetActiveUniform = C.PFNGLGETACTIVEUNIFORM(loader("glGetActiveUniform"))
    C.pfn_glGetAttachedShaders = C.PFNGLGETATTACHEDSHADERS(loader("glGetAttachedShaders"))
    C.pfn_glGetAttribLocation = C.PFNGLGETATTRIBLOCATION(loader("glGetAttribLocation"))
    C.pfn_glGetProgramInfoLog = C.PFNGLGETPROGRAMINFOLOG(loader("glGetProgramInfoLog"))
    C.pfn_glGetProgramiv = C.PFNGLGETPROGRAMIV(loader("glGetProgramiv"))
    C.pfn_glGetShaderInfoLog = C.PFNGLGETSHADERINFOLOG(loader("glGetShaderInfoLog"))
    C.pfn_glGetShaderSource = C.PFNGLGETSHADERSOURCE(loader("glGetShaderSource"))
    C.pfn_glGetShaderiv = C.PFNGLGETSHADERIV(loader("glGetShaderiv"))
    C.pfn_glGetUniformLocation = C.PFNGLGETUNIFORMLOCATION(loader("glGetUniformLocation"))
    C.pfn_glGetUniformfv = C.PFNGLGETUNIFORMFV(loader("glGetUniformfv"))
    C.pfn_glGetUniformiv = C.PFNGLGETUNIFORMIV(loader("glGetUniformiv"))
    C.pfn_glGetVertexAttribPointerv = C.PFNGLGETVERTEXATTRIBPOINTERV(loader("glGetVertexAttribPointerv"))
    C.pfn_glGetVertexAttribdv = C.PFNGLGETVERTEXATTRIBDV(loader("glGetVertexAttribdv"))
    C.pfn_glGetVertexAttribfv = C.PFNGLGETVERTEXATTRIBFV(loader("glGetVertexAttribfv"))
    C.pfn_glGetVertexAttribiv = C.PFNGLGETVERTEXATTRIBIV(loader("glGetVertexAttribiv"))
    C.pfn_glIsProgram = C.PFNGLISPROGRAM(loader("glIsProgram"))
    C.pfn_glIsShader = C.PFNGLISSHADER(loader("glIsShader"))
    C.pfn_glLinkProgram = C.PFNGLLINKPROGRAM(loader("glLinkProgram"))
    C.pfn_glShaderSource = C.PFNGLSHADERSOURCE(loader("glShaderSource"))
    C.pfn_glStencilFuncSeparate = C.PFNGLSTENCILFUNCSEPARATE(loader("glStencilFuncSeparate"))
    C.pfn_glStencilMaskSeparate = C.PFNGLSTENCILMASKSEPARATE(loader("glStencilMaskSeparate"))
    C.pfn_glStencilOpSeparate = C.PFNGLSTENCILOPSEPARATE(loader("glStencilOpSeparate"))
    C.pfn_glUniform1f = C.PFNGLUNIFORM1F(loader("glUniform1f"))
    C.pfn_glUniform1fv = C.PFNGLUNIFORM1FV(loader("glUniform1fv"))
    C.pfn_glUniform1i = C.PFNGLUNIFORM1I(loader("glUniform1i"))
    C.pfn_glUniform1iv = C.PFNGLUNIFORM1IV(loader("glUniform1iv"))
    C.pfn_glUniform2f = C.PFNGLUNIFORM2F(loader("glUniform2f"))
    C.pfn_glUniform2fv = C.PFNGLUNIFORM2FV(loader("glUniform2fv"))
    C.pfn_glUniform2i = C.PFNGLUNIFORM2I(loader("glUniform2i"))
    C.pfn_glUniform2iv = C.PFNGLUNIFORM2IV(loader("glUniform2iv"))
    C.pfn_glUniform3f = C.PFNGLUNIFORM3F(loader("glUniform3f"))
    C.pfn_glUniform3fv = C.PFNGLUNIFORM3FV(loader("glUniform3fv"))
    C.pfn_glUniform3i = C.PFNGLUNIFORM3I(loader("glUniform3i"))
    C.pfn_glUniform3iv = C.PFNGLUNIFORM3IV(loader("glUniform3iv"))
    C.pfn_glUniform4f = C.PFNGLUNIFORM4F(loader("glUniform4f"))
    C.pfn_glUniform4fv = C.PFNGLUNIFORM4FV(loader("glUniform4fv"))
    C.pfn_glUniform4i = C.PFNGLUNIFORM4I(loader("glUniform4i"))
    C.pfn_glUniform4iv = C.PFNGLUNIFORM4IV(loader("glUniform4iv"))
    C.pfn_glUniformMatrix2fv = C.PFNGLUNIFORMMATRIX2FV(loader("glUniformMatrix2fv"))
    C.pfn_glUniformMatrix3fv = C.PFNGLUNIFORMMATRIX3FV(loader("glUniformMatrix3fv"))
    C.pfn_glUniformMatrix4fv = C.PFNGLUNIFORMMATRIX4FV(loader("glUniformMatrix4fv"))
    C.pfn_glUseProgram = C.PFNGLUSEPROGRAM(loader("glUseProgram"))
    C.pfn_glValidateProgram = C.PFNGLVALIDATEPROGRAM(loader("glValidateProgram"))
    C.pfn_glVertexAttrib1d = C.PFNGLVERTEXATTRIB1D(loader("glVertexAttrib1d"))
    C.pfn_glVertexAttrib1dv = C.PFNGLVERTEXATTRIB1DV(loader("glVertexAttrib1dv"))
    C.pfn_glVertexAttrib1f = C.PFNGLVERTEXATTRIB1F(loader("glVertexAttrib1f"))
    C.pfn_glVertexAttrib1fv = C.PFNGLVERTEXATTRIB1FV(loader("glVertexAttrib1fv"))
    C.pfn_glVertexAttrib1s = C.PFNGLVERTEXATTRIB1S(loader("glVertexAttrib1s"))
    C.pfn_glVertexAttrib1sv = C.PFNGLVERTEXATTRIB1SV(loader("glVertexAttrib1sv"))
    C.pfn_glVertexAttrib2d = C.PFNGLVERTEXATTRIB2D(loader("glVertexAttrib2d"))
    C.pfn_glVertexAttrib2dv = C.PFNGLVERTEXATTRIB2DV(loader("glVertexAttrib2dv"))
    C.pfn_glVertexAttrib2f = C.PFNGLVERTEXATTRIB2F(loader("glVertexAttrib2f"))
    C.pfn_glVertexAttrib2fv = C.PFNGLVERTEXATTRIB2FV(loader("glVertexAttrib2fv"))
    C.pfn_glVertexAttrib2s = C.PFNGLVERTEXATTRIB2S(loader("glVertexAttrib2s"))
    C.pfn_glVertexAttrib2sv = C.PFNGLVERTEXATTRIB2SV(loader("glVertexAttrib2sv"))
    C.pfn_glVertexAttrib3d = C.PFNGLVERTEXATTRIB3D(loader("glVertexAttrib3d"))
    C.pfn_glVertexAttrib3dv = C.PFNGLVERTEXATTRIB3DV(loader("glVertexAttrib3dv"))
    C.pfn_glVertexAttrib3f = C.PFNGLVERTEXATTRIB3F(loader("glVertexAttrib3f"))
    C.pfn_glVertexAttrib3fv = C.PFNGLVERTEXATTRIB3FV(loader("glVertexAttrib3fv"))
    C.pfn_glVertexAttrib3s = C.PFNGLVERTEXATTRIB3S(loader("glVertexAttrib3s"))
    C.pfn_glVertexAttrib3sv = C.PFNGLVERTEXATTRIB3SV(loader("glVertexAttrib3sv"))
    C.pfn_glVertexAttrib4Nbv = C.PFNGLVERTEXATTRIB4NBV(loader("glVertexAttrib4Nbv"))
    C.pfn_glVertexAttrib4Niv = C.PFNGLVERTEXATTRIB4NIV(loader("glVertexAttrib4Niv"))
    C.pfn_glVertexAttrib4Nsv = C.PFNGLVERTEXATTRIB4NSV(loader("glVertexAttrib4Nsv"))
    C.pfn_glVertexAttrib4Nub = C.PFNGLVERTEXATTRIB4NUB(loader("glVertexAttrib4Nub"))
    C.pfn_glVertexAttrib4Nubv = C.PFNGLVERTEXATTRIB4NUBV(loader("glVertexAttrib4Nubv"))
    C.pfn_glVertexAttrib4Nuiv = C.PFNGLVERTEXATTRIB4NUIV(loader("glVertexAttrib4Nuiv"))
    C.pfn_glVertexAttrib4Nusv = C.PFNGLVERTEXATTRIB4NUSV(loader("glVertexAttrib4Nusv"))
    C.pfn_glVertexAttrib4bv = C.PFNGLVERTEXATTRIB4BV(loader("glVertexAttrib4bv"))
    C.pfn_glVertexAttrib4d = C.PFNGLVERTEXATTRIB4D(loader("glVertexAttrib4d"))
    C.pfn_glVertexAttrib4dv = C.PFNGLVERTEXATTRIB4DV(loader("glVertexAttrib4dv"))
    C.pfn_glVertexAttrib4f = C.PFNGLVERTEXATTRIB4F(loader("glVertexAttrib4f"))
    C.pfn_glVertexAttrib4fv = C.PFNGLVERTEXATTRIB4FV(loader("glVertexAttrib4fv"))
    C.pfn_glVertexAttrib4iv = C.PFNGLVERTEXATTRIB4IV(loader("glVertexAttrib4iv"))
    C.pfn_glVertexAttrib4s = C.PFNGLVERTEXATTRIB4S(loader("glVertexAttrib4s"))
    C.pfn_glVertexAttrib4sv = C.PFNGLVERTEXATTRIB4SV(loader("glVertexAttrib4sv"))
    C.pfn_glVertexAttrib4ubv = C.PFNGLVERTEXATTRIB4UBV(loader("glVertexAttrib4ubv"))
    C.pfn_glVertexAttrib4uiv = C.PFNGLVERTEXATTRIB4UIV(loader("glVertexAttrib4uiv"))
    C.pfn_glVertexAttrib4usv = C.PFNGLVERTEXATTRIB4USV(loader("glVertexAttrib4usv"))
    C.pfn_glVertexAttribPointer = C.PFNGLVERTEXATTRIBPOINTER(loader("glVertexAttribPointer"))

    // OpenGL 2.1
    if !ver.GE(OpenGL, 2, 1) {
        return
    }
    C.pfn_glUniformMatrix2x3fv = C.PFNGLUNIFORMMATRIX2X3FV(loader("glUniformMatrix2x3fv"))
    C.pfn_glUniformMatrix2x4fv = C.PFNGLUNIFORMMATRIX2X4FV(loader("glUniformMatrix2x4fv"))
    C.pfn_glUniformMatrix3x2fv = C.PFNGLUNIFORMMATRIX3X2FV(loader("glUniformMatrix3x2fv"))
    C.pfn_glUniformMatrix3x4fv = C.PFNGLUNIFORMMATRIX3X4FV(loader("glUniformMatrix3x4fv"))
    C.pfn_glUniformMatrix4x2fv = C.PFNGLUNIFORMMATRIX4X2FV(loader("glUniformMatrix4x2fv"))
    C.pfn_glUniformMatrix4x3fv = C.PFNGLUNIFORMMATRIX4X3FV(loader("glUniformMatrix4x3fv"))
}

// GL Constants
//
const (
	GL_2D = 0x0600
	GL_2_BYTES = 0x1407
	GL_3D = 0x0601
	GL_3D_COLOR = 0x0602
	GL_3D_COLOR_TEXTURE = 0x0603
	GL_3_BYTES = 0x1408
	GL_4D_COLOR_TEXTURE = 0x0604
	GL_4_BYTES = 0x1409
	GL_ACCUM = 0x0100
	GL_ACCUM_ALPHA_BITS = 0x0D5B
	GL_ACCUM_BLUE_BITS = 0x0D5A
	GL_ACCUM_BUFFER_BIT = 0x00000200
	GL_ACCUM_CLEAR_VALUE = 0x0B80
	GL_ACCUM_GREEN_BITS = 0x0D59
	GL_ACCUM_RED_BITS = 0x0D58
	GL_ACTIVE_ATTRIBUTES = 0x8B89
	GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A
	GL_ACTIVE_TEXTURE = 0x84E0
	GL_ACTIVE_UNIFORMS = 0x8B86
	GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87
	GL_ADD = 0x0104
	GL_ADD_SIGNED = 0x8574
	GL_ALIASED_LINE_WIDTH_RANGE = 0x846E
	GL_ALIASED_POINT_SIZE_RANGE = 0x846D
	GL_ALL_ATTRIB_BITS = 0xFFFFFFFF
	GL_ALPHA = 0x1906
	GL_ALPHA12 = 0x803D
	GL_ALPHA16 = 0x803E
	GL_ALPHA4 = 0x803B
	GL_ALPHA8 = 0x803C
	GL_ALPHA_BIAS = 0x0D1D
	GL_ALPHA_BITS = 0x0D55
	GL_ALPHA_SCALE = 0x0D1C
	GL_ALPHA_TEST = 0x0BC0
	GL_ALPHA_TEST_FUNC = 0x0BC1
	GL_ALPHA_TEST_REF = 0x0BC2
	GL_ALWAYS = 0x0207
	GL_AMBIENT = 0x1200
	GL_AMBIENT_AND_DIFFUSE = 0x1602
	GL_AND = 0x1501
	GL_AND_INVERTED = 0x1504
	GL_AND_REVERSE = 0x1502
	GL_ARRAY_BUFFER = 0x8892
	GL_ARRAY_BUFFER_BINDING = 0x8894
	GL_ATTACHED_SHADERS = 0x8B85
	GL_ATTRIB_STACK_DEPTH = 0x0BB0
	GL_AUTO_NORMAL = 0x0D80
	GL_AUX0 = 0x0409
	GL_AUX1 = 0x040A
	GL_AUX2 = 0x040B
	GL_AUX3 = 0x040C
	GL_AUX_BUFFERS = 0x0C00
	GL_BACK = 0x0405
	GL_BACK_LEFT = 0x0402
	GL_BACK_RIGHT = 0x0403
	GL_BGR = 0x80E0
	GL_BGRA = 0x80E1
	GL_BITMAP = 0x1A00
	GL_BITMAP_TOKEN = 0x0704
	GL_BLEND = 0x0BE2
	GL_BLEND_COLOR = 0x8005
	GL_BLEND_DST = 0x0BE0
	GL_BLEND_DST_ALPHA = 0x80CA
	GL_BLEND_DST_RGB = 0x80C8
	GL_BLEND_EQUATION = 0x8009
	GL_BLEND_EQUATION_ALPHA = 0x883D
	GL_BLEND_EQUATION_RGB = 0x8009
	GL_BLEND_SRC = 0x0BE1
	GL_BLEND_SRC_ALPHA = 0x80CB
	GL_BLEND_SRC_RGB = 0x80C9
	GL_BLUE = 0x1905
	GL_BLUE_BIAS = 0x0D1B
	GL_BLUE_BITS = 0x0D54
	GL_BLUE_SCALE = 0x0D1A
	GL_BOOL = 0x8B56
	GL_BOOL_VEC2 = 0x8B57
	GL_BOOL_VEC3 = 0x8B58
	GL_BOOL_VEC4 = 0x8B59
	GL_BUFFER_ACCESS = 0x88BB
	GL_BUFFER_MAPPED = 0x88BC
	GL_BUFFER_MAP_POINTER = 0x88BD
	GL_BUFFER_SIZE = 0x8764
	GL_BUFFER_USAGE = 0x8765
	GL_BYTE = 0x1400
	GL_C3F_V3F = 0x2A24
	GL_C4F_N3F_V3F = 0x2A26
	GL_C4UB_V2F = 0x2A22
	GL_C4UB_V3F = 0x2A23
	GL_CCW = 0x0901
	GL_CLAMP = 0x2900
	GL_CLAMP_TO_BORDER = 0x812D
	GL_CLAMP_TO_EDGE = 0x812F
	GL_CLEAR = 0x1500
	GL_CLIENT_ACTIVE_TEXTURE = 0x84E1
	GL_CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFF
	GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1
	GL_CLIENT_PIXEL_STORE_BIT = 0x00000001
	GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002
	GL_CLIP_PLANE0 = 0x3000
	GL_CLIP_PLANE1 = 0x3001
	GL_CLIP_PLANE2 = 0x3002
	GL_CLIP_PLANE3 = 0x3003
	GL_CLIP_PLANE4 = 0x3004
	GL_CLIP_PLANE5 = 0x3005
	GL_COEFF = 0x0A00
	GL_COLOR = 0x1800
	GL_COLOR_ARRAY = 0x8076
	GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898
	GL_COLOR_ARRAY_POINTER = 0x8090
	GL_COLOR_ARRAY_SIZE = 0x8081
	GL_COLOR_ARRAY_STRIDE = 0x8083
	GL_COLOR_ARRAY_TYPE = 0x8082
	GL_COLOR_BUFFER_BIT = 0x00004000
	GL_COLOR_CLEAR_VALUE = 0x0C22
	GL_COLOR_INDEX = 0x1900
	GL_COLOR_INDEXES = 0x1603
	GL_COLOR_LOGIC_OP = 0x0BF2
	GL_COLOR_MATERIAL = 0x0B57
	GL_COLOR_MATERIAL_FACE = 0x0B55
	GL_COLOR_MATERIAL_PARAMETER = 0x0B56
	GL_COLOR_SUM = 0x8458
	GL_COLOR_WRITEMASK = 0x0C23
	GL_COMBINE = 0x8570
	GL_COMBINE_ALPHA = 0x8572
	GL_COMBINE_RGB = 0x8571
	GL_COMPARE_R_TO_TEXTURE = 0x884E
	GL_COMPILE = 0x1300
	GL_COMPILE_AND_EXECUTE = 0x1301
	GL_COMPILE_STATUS = 0x8B81
	GL_COMPRESSED_ALPHA = 0x84E9
	GL_COMPRESSED_INTENSITY = 0x84EC
	GL_COMPRESSED_LUMINANCE = 0x84EA
	GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB
	GL_COMPRESSED_RGB = 0x84ED
	GL_COMPRESSED_RGBA = 0x84EE
	GL_COMPRESSED_SLUMINANCE = 0x8C4A
	GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B
	GL_COMPRESSED_SRGB = 0x8C48
	GL_COMPRESSED_SRGB_ALPHA = 0x8C49
	GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3
	GL_CONSTANT = 0x8576
	GL_CONSTANT_ALPHA = 0x8003
	GL_CONSTANT_ATTENUATION = 0x1207
	GL_CONSTANT_COLOR = 0x8001
	GL_COORD_REPLACE = 0x8862
	GL_COPY = 0x1503
	GL_COPY_INVERTED = 0x150C
	GL_COPY_PIXEL_TOKEN = 0x0706
	GL_CULL_FACE = 0x0B44
	GL_CULL_FACE_MODE = 0x0B45
	GL_CURRENT_BIT = 0x00000001
	GL_CURRENT_COLOR = 0x0B00
	GL_CURRENT_FOG_COORD = 0x8453
	GL_CURRENT_FOG_COORDINATE = 0x8453
	GL_CURRENT_INDEX = 0x0B01
	GL_CURRENT_NORMAL = 0x0B02
	GL_CURRENT_PROGRAM = 0x8B8D
	GL_CURRENT_QUERY = 0x8865
	GL_CURRENT_RASTER_COLOR = 0x0B04
	GL_CURRENT_RASTER_DISTANCE = 0x0B09
	GL_CURRENT_RASTER_INDEX = 0x0B05
	GL_CURRENT_RASTER_POSITION = 0x0B07
	GL_CURRENT_RASTER_POSITION_VALID = 0x0B08
	GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F
	GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06
	GL_CURRENT_SECONDARY_COLOR = 0x8459
	GL_CURRENT_TEXTURE_COORDS = 0x0B03
	GL_CURRENT_VERTEX_ATTRIB = 0x8626
	GL_CW = 0x0900
	GL_DECAL = 0x2101
	GL_DECR = 0x1E03
	GL_DECR_WRAP = 0x8508
	GL_DELETE_STATUS = 0x8B80
	GL_DEPTH = 0x1801
	GL_DEPTH_BIAS = 0x0D1F
	GL_DEPTH_BITS = 0x0D56
	GL_DEPTH_BUFFER_BIT = 0x00000100
	GL_DEPTH_CLEAR_VALUE = 0x0B73
	GL_DEPTH_COMPONENT = 0x1902
	GL_DEPTH_COMPONENT16 = 0x81A5
	GL_DEPTH_COMPONENT24 = 0x81A6
	GL_DEPTH_COMPONENT32 = 0x81A7
	GL_DEPTH_FUNC = 0x0B74
	GL_DEPTH_RANGE = 0x0B70
	GL_DEPTH_SCALE = 0x0D1E
	GL_DEPTH_TEST = 0x0B71
	GL_DEPTH_TEXTURE_MODE = 0x884B
	GL_DEPTH_WRITEMASK = 0x0B72
	GL_DIFFUSE = 0x1201
	GL_DITHER = 0x0BD0
	GL_DOMAIN = 0x0A02
	GL_DONT_CARE = 0x1100
	GL_DOT3_RGB = 0x86AE
	GL_DOT3_RGBA = 0x86AF
	GL_DOUBLE = 0x140A
	GL_DOUBLEBUFFER = 0x0C32
	GL_DRAW_BUFFER = 0x0C01
	GL_DRAW_BUFFER0 = 0x8825
	GL_DRAW_BUFFER1 = 0x8826
	GL_DRAW_BUFFER10 = 0x882F
	GL_DRAW_BUFFER11 = 0x8830
	GL_DRAW_BUFFER12 = 0x8831
	GL_DRAW_BUFFER13 = 0x8832
	GL_DRAW_BUFFER14 = 0x8833
	GL_DRAW_BUFFER15 = 0x8834
	GL_DRAW_BUFFER2 = 0x8827
	GL_DRAW_BUFFER3 = 0x8828
	GL_DRAW_BUFFER4 = 0x8829
	GL_DRAW_BUFFER5 = 0x882A
	GL_DRAW_BUFFER6 = 0x882B
	GL_DRAW_BUFFER7 = 0x882C
	GL_DRAW_BUFFER8 = 0x882D
	GL_DRAW_BUFFER9 = 0x882E
	GL_DRAW_PIXEL_TOKEN = 0x0705
	GL_DST_ALPHA = 0x0304
	GL_DST_COLOR = 0x0306
	GL_DYNAMIC_COPY = 0x88EA
	GL_DYNAMIC_DRAW = 0x88E8
	GL_DYNAMIC_READ = 0x88E9
	GL_EDGE_FLAG = 0x0B43
	GL_EDGE_FLAG_ARRAY = 0x8079
	GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B
	GL_EDGE_FLAG_ARRAY_POINTER = 0x8093
	GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C
	GL_ELEMENT_ARRAY_BUFFER = 0x8893
	GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895
	GL_EMISSION = 0x1600
	GL_ENABLE_BIT = 0x00002000
	GL_EQUAL = 0x0202
	GL_EQUIV = 0x1509
	GL_EVAL_BIT = 0x00010000
	GL_EXP = 0x0800
	GL_EXP2 = 0x0801
	GL_EXTENSIONS = 0x1F03
	GL_EYE_LINEAR = 0x2400
	GL_EYE_PLANE = 0x2502
	GL_FALSE = 0
	GL_FASTEST = 0x1101
	GL_FEEDBACK = 0x1C01
	GL_FEEDBACK_BUFFER_POINTER = 0x0DF0
	GL_FEEDBACK_BUFFER_SIZE = 0x0DF1
	GL_FEEDBACK_BUFFER_TYPE = 0x0DF2
	GL_FILL = 0x1B02
	GL_FLAT = 0x1D00
	GL_FLOAT = 0x1406
	GL_FLOAT_MAT2 = 0x8B5A
	GL_FLOAT_MAT2x3 = 0x8B65
	GL_FLOAT_MAT2x4 = 0x8B66
	GL_FLOAT_MAT3 = 0x8B5B
	GL_FLOAT_MAT3x2 = 0x8B67
	GL_FLOAT_MAT3x4 = 0x8B68
	GL_FLOAT_MAT4 = 0x8B5C
	GL_FLOAT_MAT4x2 = 0x8B69
	GL_FLOAT_MAT4x3 = 0x8B6A
	GL_FLOAT_VEC2 = 0x8B50
	GL_FLOAT_VEC3 = 0x8B51
	GL_FLOAT_VEC4 = 0x8B52
	GL_FOG = 0x0B60
	GL_FOG_BIT = 0x00000080
	GL_FOG_COLOR = 0x0B66
	GL_FOG_COORD = 0x8451
	GL_FOG_COORDINATE = 0x8451
	GL_FOG_COORDINATE_ARRAY = 0x8457
	GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D
	GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456
	GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455
	GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454
	GL_FOG_COORDINATE_SOURCE = 0x8450
	GL_FOG_COORD_ARRAY = 0x8457
	GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D
	GL_FOG_COORD_ARRAY_POINTER = 0x8456
	GL_FOG_COORD_ARRAY_STRIDE = 0x8455
	GL_FOG_COORD_ARRAY_TYPE = 0x8454
	GL_FOG_COORD_SRC = 0x8450
	GL_FOG_DENSITY = 0x0B62
	GL_FOG_END = 0x0B64
	GL_FOG_HINT = 0x0C54
	GL_FOG_INDEX = 0x0B61
	GL_FOG_MODE = 0x0B65
	GL_FOG_START = 0x0B63
	GL_FRAGMENT_DEPTH = 0x8452
	GL_FRAGMENT_SHADER = 0x8B30
	GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B
	GL_FRONT = 0x0404
	GL_FRONT_AND_BACK = 0x0408
	GL_FRONT_FACE = 0x0B46
	GL_FRONT_LEFT = 0x0400
	GL_FRONT_RIGHT = 0x0401
	GL_FUNC_ADD = 0x8006
	GL_FUNC_REVERSE_SUBTRACT = 0x800B
	GL_FUNC_SUBTRACT = 0x800A
	GL_GENERATE_MIPMAP = 0x8191
	GL_GENERATE_MIPMAP_HINT = 0x8192
	GL_GEQUAL = 0x0206
	GL_GREATER = 0x0204
	GL_GREEN = 0x1904
	GL_GREEN_BIAS = 0x0D19
	GL_GREEN_BITS = 0x0D53
	GL_GREEN_SCALE = 0x0D18
	GL_HINT_BIT = 0x00008000
	GL_INCR = 0x1E02
	GL_INCR_WRAP = 0x8507
	GL_INDEX_ARRAY = 0x8077
	GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899
	GL_INDEX_ARRAY_POINTER = 0x8091
	GL_INDEX_ARRAY_STRIDE = 0x8086
	GL_INDEX_ARRAY_TYPE = 0x8085
	GL_INDEX_BITS = 0x0D51
	GL_INDEX_CLEAR_VALUE = 0x0C20
	GL_INDEX_LOGIC_OP = 0x0BF1
	GL_INDEX_MODE = 0x0C30
	GL_INDEX_OFFSET = 0x0D13
	GL_INDEX_SHIFT = 0x0D12
	GL_INDEX_WRITEMASK = 0x0C21
	GL_INFO_LOG_LENGTH = 0x8B84
	GL_INT = 0x1404
	GL_INTENSITY = 0x8049
	GL_INTENSITY12 = 0x804C
	GL_INTENSITY16 = 0x804D
	GL_INTENSITY4 = 0x804A
	GL_INTENSITY8 = 0x804B
	GL_INTERPOLATE = 0x8575
	GL_INT_VEC2 = 0x8B53
	GL_INT_VEC3 = 0x8B54
	GL_INT_VEC4 = 0x8B55
	GL_INVALID_ENUM = 0x0500
	GL_INVALID_OPERATION = 0x0502
	GL_INVALID_VALUE = 0x0501
	GL_INVERT = 0x150A
	GL_KEEP = 0x1E00
	GL_LEFT = 0x0406
	GL_LEQUAL = 0x0203
	GL_LESS = 0x0201
	GL_LIGHT0 = 0x4000
	GL_LIGHT1 = 0x4001
	GL_LIGHT2 = 0x4002
	GL_LIGHT3 = 0x4003
	GL_LIGHT4 = 0x4004
	GL_LIGHT5 = 0x4005
	GL_LIGHT6 = 0x4006
	GL_LIGHT7 = 0x4007
	GL_LIGHTING = 0x0B50
	GL_LIGHTING_BIT = 0x00000040
	GL_LIGHT_MODEL_AMBIENT = 0x0B53
	GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8
	GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51
	GL_LIGHT_MODEL_TWO_SIDE = 0x0B52
	GL_LINE = 0x1B01
	GL_LINEAR = 0x2601
	GL_LINEAR_ATTENUATION = 0x1208
	GL_LINEAR_MIPMAP_LINEAR = 0x2703
	GL_LINEAR_MIPMAP_NEAREST = 0x2701
	GL_LINES = 0x0001
	GL_LINE_BIT = 0x00000004
	GL_LINE_LOOP = 0x0002
	GL_LINE_RESET_TOKEN = 0x0707
	GL_LINE_SMOOTH = 0x0B20
	GL_LINE_SMOOTH_HINT = 0x0C52
	GL_LINE_STIPPLE = 0x0B24
	GL_LINE_STIPPLE_PATTERN = 0x0B25
	GL_LINE_STIPPLE_REPEAT = 0x0B26
	GL_LINE_STRIP = 0x0003
	GL_LINE_TOKEN = 0x0702
	GL_LINE_WIDTH = 0x0B21
	GL_LINE_WIDTH_GRANULARITY = 0x0B23
	GL_LINE_WIDTH_RANGE = 0x0B22
	GL_LINK_STATUS = 0x8B82
	GL_LIST_BASE = 0x0B32
	GL_LIST_BIT = 0x00020000
	GL_LIST_INDEX = 0x0B33
	GL_LIST_MODE = 0x0B30
	GL_LOAD = 0x0101
	GL_LOGIC_OP = 0x0BF1
	GL_LOGIC_OP_MODE = 0x0BF0
	GL_LOWER_LEFT = 0x8CA1
	GL_LUMINANCE = 0x1909
	GL_LUMINANCE12 = 0x8041
	GL_LUMINANCE12_ALPHA12 = 0x8047
	GL_LUMINANCE12_ALPHA4 = 0x8046
	GL_LUMINANCE16 = 0x8042
	GL_LUMINANCE16_ALPHA16 = 0x8048
	GL_LUMINANCE4 = 0x803F
	GL_LUMINANCE4_ALPHA4 = 0x8043
	GL_LUMINANCE6_ALPHA2 = 0x8044
	GL_LUMINANCE8 = 0x8040
	GL_LUMINANCE8_ALPHA8 = 0x8045
	GL_LUMINANCE_ALPHA = 0x190A
	GL_MAP1_COLOR_4 = 0x0D90
	GL_MAP1_GRID_DOMAIN = 0x0DD0
	GL_MAP1_GRID_SEGMENTS = 0x0DD1
	GL_MAP1_INDEX = 0x0D91
	GL_MAP1_NORMAL = 0x0D92
	GL_MAP1_TEXTURE_COORD_1 = 0x0D93
	GL_MAP1_TEXTURE_COORD_2 = 0x0D94
	GL_MAP1_TEXTURE_COORD_3 = 0x0D95
	GL_MAP1_TEXTURE_COORD_4 = 0x0D96
	GL_MAP1_VERTEX_3 = 0x0D97
	GL_MAP1_VERTEX_4 = 0x0D98
	GL_MAP2_COLOR_4 = 0x0DB0
	GL_MAP2_GRID_DOMAIN = 0x0DD2
	GL_MAP2_GRID_SEGMENTS = 0x0DD3
	GL_MAP2_INDEX = 0x0DB1
	GL_MAP2_NORMAL = 0x0DB2
	GL_MAP2_TEXTURE_COORD_1 = 0x0DB3
	GL_MAP2_TEXTURE_COORD_2 = 0x0DB4
	GL_MAP2_TEXTURE_COORD_3 = 0x0DB5
	GL_MAP2_TEXTURE_COORD_4 = 0x0DB6
	GL_MAP2_VERTEX_3 = 0x0DB7
	GL_MAP2_VERTEX_4 = 0x0DB8
	GL_MAP_COLOR = 0x0D10
	GL_MAP_STENCIL = 0x0D11
	GL_MATRIX_MODE = 0x0BA0
	GL_MAX = 0x8008
	GL_MAX_3D_TEXTURE_SIZE = 0x8073
	GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35
	GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B
	GL_MAX_CLIP_PLANES = 0x0D32
	GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D
	GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C
	GL_MAX_DRAW_BUFFERS = 0x8824
	GL_MAX_ELEMENTS_INDICES = 0x80E9
	GL_MAX_ELEMENTS_VERTICES = 0x80E8
	GL_MAX_EVAL_ORDER = 0x0D30
	GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49
	GL_MAX_LIGHTS = 0x0D31
	GL_MAX_LIST_NESTING = 0x0B31
	GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36
	GL_MAX_NAME_STACK_DEPTH = 0x0D37
	GL_MAX_PIXEL_MAP_TABLE = 0x0D34
	GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38
	GL_MAX_TEXTURE_COORDS = 0x8871
	GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872
	GL_MAX_TEXTURE_LOD_BIAS = 0x84FD
	GL_MAX_TEXTURE_SIZE = 0x0D33
	GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39
	GL_MAX_TEXTURE_UNITS = 0x84E2
	GL_MAX_VARYING_FLOATS = 0x8B4B
	GL_MAX_VERTEX_ATTRIBS = 0x8869
	GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C
	GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A
	GL_MAX_VIEWPORT_DIMS = 0x0D3A
	GL_MIN = 0x8007
	GL_MIRRORED_REPEAT = 0x8370
	GL_MODELVIEW = 0x1700
	GL_MODELVIEW_MATRIX = 0x0BA6
	GL_MODELVIEW_STACK_DEPTH = 0x0BA3
	GL_MODULATE = 0x2100
	GL_MULT = 0x0103
	GL_MULTISAMPLE = 0x809D
	GL_MULTISAMPLE_BIT = 0x20000000
	GL_N3F_V3F = 0x2A25
	GL_NAME_STACK_DEPTH = 0x0D70
	GL_NAND = 0x150E
	GL_NEAREST = 0x2600
	GL_NEAREST_MIPMAP_LINEAR = 0x2702
	GL_NEAREST_MIPMAP_NEAREST = 0x2700
	GL_NEVER = 0x0200
	GL_NICEST = 0x1102
	GL_NONE = 0
	GL_NOOP = 0x1505
	GL_NOR = 0x1508
	GL_NORMALIZE = 0x0BA1
	GL_NORMAL_ARRAY = 0x8075
	GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897
	GL_NORMAL_ARRAY_POINTER = 0x808F
	GL_NORMAL_ARRAY_STRIDE = 0x807F
	GL_NORMAL_ARRAY_TYPE = 0x807E
	GL_NORMAL_MAP = 0x8511
	GL_NOTEQUAL = 0x0205
	GL_NO_ERROR = 0
	GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2
	GL_OBJECT_LINEAR = 0x2401
	GL_OBJECT_PLANE = 0x2501
	GL_ONE = 1
	GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004
	GL_ONE_MINUS_CONSTANT_COLOR = 0x8002
	GL_ONE_MINUS_DST_ALPHA = 0x0305
	GL_ONE_MINUS_DST_COLOR = 0x0307
	GL_ONE_MINUS_SRC_ALPHA = 0x0303
	GL_ONE_MINUS_SRC_COLOR = 0x0301
	GL_OPERAND0_ALPHA = 0x8598
	GL_OPERAND0_RGB = 0x8590
	GL_OPERAND1_ALPHA = 0x8599
	GL_OPERAND1_RGB = 0x8591
	GL_OPERAND2_ALPHA = 0x859A
	GL_OPERAND2_RGB = 0x8592
	GL_OR = 0x1507
	GL_ORDER = 0x0A01
	GL_OR_INVERTED = 0x150D
	GL_OR_REVERSE = 0x150B
	GL_OUT_OF_MEMORY = 0x0505
	GL_PACK_ALIGNMENT = 0x0D05
	GL_PACK_IMAGE_HEIGHT = 0x806C
	GL_PACK_LSB_FIRST = 0x0D01
	GL_PACK_ROW_LENGTH = 0x0D02
	GL_PACK_SKIP_IMAGES = 0x806B
	GL_PACK_SKIP_PIXELS = 0x0D04
	GL_PACK_SKIP_ROWS = 0x0D03
	GL_PACK_SWAP_BYTES = 0x0D00
	GL_PASS_THROUGH_TOKEN = 0x0700
	GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50
	GL_PIXEL_MAP_A_TO_A = 0x0C79
	GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9
	GL_PIXEL_MAP_B_TO_B = 0x0C78
	GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8
	GL_PIXEL_MAP_G_TO_G = 0x0C77
	GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7
	GL_PIXEL_MAP_I_TO_A = 0x0C75
	GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5
	GL_PIXEL_MAP_I_TO_B = 0x0C74
	GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4
	GL_PIXEL_MAP_I_TO_G = 0x0C73
	GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3
	GL_PIXEL_MAP_I_TO_I = 0x0C70
	GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0
	GL_PIXEL_MAP_I_TO_R = 0x0C72
	GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2
	GL_PIXEL_MAP_R_TO_R = 0x0C76
	GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6
	GL_PIXEL_MAP_S_TO_S = 0x0C71
	GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1
	GL_PIXEL_MODE_BIT = 0x00000020
	GL_PIXEL_PACK_BUFFER = 0x88EB
	GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED
	GL_PIXEL_UNPACK_BUFFER = 0x88EC
	GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF
	GL_POINT = 0x1B00
	GL_POINTS = 0x0000
	GL_POINT_BIT = 0x00000002
	GL_POINT_DISTANCE_ATTENUATION = 0x8129
	GL_POINT_FADE_THRESHOLD_SIZE = 0x8128
	GL_POINT_SIZE = 0x0B11
	GL_POINT_SIZE_GRANULARITY = 0x0B13
	GL_POINT_SIZE_MAX = 0x8127
	GL_POINT_SIZE_MIN = 0x8126
	GL_POINT_SIZE_RANGE = 0x0B12
	GL_POINT_SMOOTH = 0x0B10
	GL_POINT_SMOOTH_HINT = 0x0C51
	GL_POINT_SPRITE = 0x8861
	GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0
	GL_POINT_TOKEN = 0x0701
	GL_POLYGON = 0x0009
	GL_POLYGON_BIT = 0x00000008
	GL_POLYGON_MODE = 0x0B40
	GL_POLYGON_OFFSET_FACTOR = 0x8038
	GL_POLYGON_OFFSET_FILL = 0x8037
	GL_POLYGON_OFFSET_LINE = 0x2A02
	GL_POLYGON_OFFSET_POINT = 0x2A01
	GL_POLYGON_OFFSET_UNITS = 0x2A00
	GL_POLYGON_SMOOTH = 0x0B41
	GL_POLYGON_SMOOTH_HINT = 0x0C53
	GL_POLYGON_STIPPLE = 0x0B42
	GL_POLYGON_STIPPLE_BIT = 0x00000010
	GL_POLYGON_TOKEN = 0x0703
	GL_POSITION = 0x1203
	GL_PREVIOUS = 0x8578
	GL_PRIMARY_COLOR = 0x8577
	GL_PROJECTION = 0x1701
	GL_PROJECTION_MATRIX = 0x0BA7
	GL_PROJECTION_STACK_DEPTH = 0x0BA4
	GL_PROXY_TEXTURE_1D = 0x8063
	GL_PROXY_TEXTURE_2D = 0x8064
	GL_PROXY_TEXTURE_3D = 0x8070
	GL_PROXY_TEXTURE_CUBE_MAP = 0x851B
	GL_Q = 0x2003
	GL_QUADRATIC_ATTENUATION = 0x1209
	GL_QUADS = 0x0007
	GL_QUAD_STRIP = 0x0008
	GL_QUERY_COUNTER_BITS = 0x8864
	GL_QUERY_RESULT = 0x8866
	GL_QUERY_RESULT_AVAILABLE = 0x8867
	GL_R = 0x2002
	GL_R3_G3_B2 = 0x2A10
	GL_READ_BUFFER = 0x0C02
	GL_READ_ONLY = 0x88B8
	GL_READ_WRITE = 0x88BA
	GL_RED = 0x1903
	GL_RED_BIAS = 0x0D15
	GL_RED_BITS = 0x0D52
	GL_RED_SCALE = 0x0D14
	GL_REFLECTION_MAP = 0x8512
	GL_RENDER = 0x1C00
	GL_RENDERER = 0x1F01
	GL_RENDER_MODE = 0x0C40
	GL_REPEAT = 0x2901
	GL_REPLACE = 0x1E01
	GL_RESCALE_NORMAL = 0x803A
	GL_RETURN = 0x0102
	GL_RGB = 0x1907
	GL_RGB10 = 0x8052
	GL_RGB10_A2 = 0x8059
	GL_RGB12 = 0x8053
	GL_RGB16 = 0x8054
	GL_RGB4 = 0x804F
	GL_RGB5 = 0x8050
	GL_RGB5_A1 = 0x8057
	GL_RGB8 = 0x8051
	GL_RGBA = 0x1908
	GL_RGBA12 = 0x805A
	GL_RGBA16 = 0x805B
	GL_RGBA2 = 0x8055
	GL_RGBA4 = 0x8056
	GL_RGBA8 = 0x8058
	GL_RGBA_MODE = 0x0C31
	GL_RGB_SCALE = 0x8573
	GL_RIGHT = 0x0407
	GL_S = 0x2000
	GL_SAMPLER_1D = 0x8B5D
	GL_SAMPLER_1D_SHADOW = 0x8B61
	GL_SAMPLER_2D = 0x8B5E
	GL_SAMPLER_2D_SHADOW = 0x8B62
	GL_SAMPLER_3D = 0x8B5F
	GL_SAMPLER_CUBE = 0x8B60
	GL_SAMPLES = 0x80A9
	GL_SAMPLES_PASSED = 0x8914
	GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E
	GL_SAMPLE_ALPHA_TO_ONE = 0x809F
	GL_SAMPLE_BUFFERS = 0x80A8
	GL_SAMPLE_COVERAGE = 0x80A0
	GL_SAMPLE_COVERAGE_INVERT = 0x80AB
	GL_SAMPLE_COVERAGE_VALUE = 0x80AA
	GL_SCISSOR_BIT = 0x00080000
	GL_SCISSOR_BOX = 0x0C10
	GL_SCISSOR_TEST = 0x0C11
	GL_SECONDARY_COLOR_ARRAY = 0x845E
	GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C
	GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D
	GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A
	GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C
	GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B
	GL_SELECT = 0x1C02
	GL_SELECTION_BUFFER_POINTER = 0x0DF3
	GL_SELECTION_BUFFER_SIZE = 0x0DF4
	GL_SEPARATE_SPECULAR_COLOR = 0x81FA
	GL_SET = 0x150F
	GL_SHADER_SOURCE_LENGTH = 0x8B88
	GL_SHADER_TYPE = 0x8B4F
	GL_SHADE_MODEL = 0x0B54
	GL_SHADING_LANGUAGE_VERSION = 0x8B8C
	GL_SHININESS = 0x1601
	GL_SHORT = 0x1402
	GL_SINGLE_COLOR = 0x81F9
	GL_SLUMINANCE = 0x8C46
	GL_SLUMINANCE8 = 0x8C47
	GL_SLUMINANCE8_ALPHA8 = 0x8C45
	GL_SLUMINANCE_ALPHA = 0x8C44
	GL_SMOOTH = 0x1D01
	GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23
	GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22
	GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13
	GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12
	GL_SOURCE0_ALPHA = 0x8588
	GL_SOURCE0_RGB = 0x8580
	GL_SOURCE1_ALPHA = 0x8589
	GL_SOURCE1_RGB = 0x8581
	GL_SOURCE2_ALPHA = 0x858A
	GL_SOURCE2_RGB = 0x8582
	GL_SPECULAR = 0x1202
	GL_SPHERE_MAP = 0x2402
	GL_SPOT_CUTOFF = 0x1206
	GL_SPOT_DIRECTION = 0x1204
	GL_SPOT_EXPONENT = 0x1205
	GL_SRC0_ALPHA = 0x8588
	GL_SRC0_RGB = 0x8580
	GL_SRC1_ALPHA = 0x8589
	GL_SRC1_RGB = 0x8581
	GL_SRC2_ALPHA = 0x858A
	GL_SRC2_RGB = 0x8582
	GL_SRC_ALPHA = 0x0302
	GL_SRC_ALPHA_SATURATE = 0x0308
	GL_SRC_COLOR = 0x0300
	GL_SRGB = 0x8C40
	GL_SRGB8 = 0x8C41
	GL_SRGB8_ALPHA8 = 0x8C43
	GL_SRGB_ALPHA = 0x8C42
	GL_STACK_OVERFLOW = 0x0503
	GL_STACK_UNDERFLOW = 0x0504
	GL_STATIC_COPY = 0x88E6
	GL_STATIC_DRAW = 0x88E4
	GL_STATIC_READ = 0x88E5
	GL_STENCIL = 0x1802
	GL_STENCIL_BACK_FAIL = 0x8801
	GL_STENCIL_BACK_FUNC = 0x8800
	GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802
	GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803
	GL_STENCIL_BACK_REF = 0x8CA3
	GL_STENCIL_BACK_VALUE_MASK = 0x8CA4
	GL_STENCIL_BACK_WRITEMASK = 0x8CA5
	GL_STENCIL_BITS = 0x0D57
	GL_STENCIL_BUFFER_BIT = 0x00000400
	GL_STENCIL_CLEAR_VALUE = 0x0B91
	GL_STENCIL_FAIL = 0x0B94
	GL_STENCIL_FUNC = 0x0B92
	GL_STENCIL_INDEX = 0x1901
	GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95
	GL_STENCIL_PASS_DEPTH_PASS = 0x0B96
	GL_STENCIL_REF = 0x0B97
	GL_STENCIL_TEST = 0x0B90
	GL_STENCIL_VALUE_MASK = 0x0B93
	GL_STENCIL_WRITEMASK = 0x0B98
	GL_STEREO = 0x0C33
	GL_STREAM_COPY = 0x88E2
	GL_STREAM_DRAW = 0x88E0
	GL_STREAM_READ = 0x88E1
	GL_SUBPIXEL_BITS = 0x0D50
	GL_SUBTRACT = 0x84E7
	GL_T = 0x2001
	GL_T2F_C3F_V3F = 0x2A2A
	GL_T2F_C4F_N3F_V3F = 0x2A2C
	GL_T2F_C4UB_V3F = 0x2A29
	GL_T2F_N3F_V3F = 0x2A2B
	GL_T2F_V3F = 0x2A27
	GL_T4F_C4F_N3F_V4F = 0x2A2D
	GL_T4F_V4F = 0x2A28
	GL_TEXTURE = 0x1702
	GL_TEXTURE0 = 0x84C0
	GL_TEXTURE1 = 0x84C1
	GL_TEXTURE10 = 0x84CA
	GL_TEXTURE11 = 0x84CB
	GL_TEXTURE12 = 0x84CC
	GL_TEXTURE13 = 0x84CD
	GL_TEXTURE14 = 0x84CE
	GL_TEXTURE15 = 0x84CF
	GL_TEXTURE16 = 0x84D0
	GL_TEXTURE17 = 0x84D1
	GL_TEXTURE18 = 0x84D2
	GL_TEXTURE19 = 0x84D3
	GL_TEXTURE2 = 0x84C2
	GL_TEXTURE20 = 0x84D4
	GL_TEXTURE21 = 0x84D5
	GL_TEXTURE22 = 0x84D6
	GL_TEXTURE23 = 0x84D7
	GL_TEXTURE24 = 0x84D8
	GL_TEXTURE25 = 0x84D9
	GL_TEXTURE26 = 0x84DA
	GL_TEXTURE27 = 0x84DB
	GL_TEXTURE28 = 0x84DC
	GL_TEXTURE29 = 0x84DD
	GL_TEXTURE3 = 0x84C3
	GL_TEXTURE30 = 0x84DE
	GL_TEXTURE31 = 0x84DF
	GL_TEXTURE4 = 0x84C4
	GL_TEXTURE5 = 0x84C5
	GL_TEXTURE6 = 0x84C6
	GL_TEXTURE7 = 0x84C7
	GL_TEXTURE8 = 0x84C8
	GL_TEXTURE9 = 0x84C9
	GL_TEXTURE_1D = 0x0DE0
	GL_TEXTURE_2D = 0x0DE1
	GL_TEXTURE_3D = 0x806F
	GL_TEXTURE_ALPHA_SIZE = 0x805F
	GL_TEXTURE_BASE_LEVEL = 0x813C
	GL_TEXTURE_BINDING_1D = 0x8068
	GL_TEXTURE_BINDING_2D = 0x8069
	GL_TEXTURE_BINDING_3D = 0x806A
	GL_TEXTURE_BINDING_CUBE_MAP = 0x8514
	GL_TEXTURE_BIT = 0x00040000
	GL_TEXTURE_BLUE_SIZE = 0x805E
	GL_TEXTURE_BORDER = 0x1005
	GL_TEXTURE_BORDER_COLOR = 0x1004
	GL_TEXTURE_COMPARE_FUNC = 0x884D
	GL_TEXTURE_COMPARE_MODE = 0x884C
	GL_TEXTURE_COMPONENTS = 0x1003
	GL_TEXTURE_COMPRESSED = 0x86A1
	GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0
	GL_TEXTURE_COMPRESSION_HINT = 0x84EF
	GL_TEXTURE_COORD_ARRAY = 0x8078
	GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A
	GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092
	GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088
	GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A
	GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089
	GL_TEXTURE_CUBE_MAP = 0x8513
	GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516
	GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518
	GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A
	GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515
	GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517
	GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519
	GL_TEXTURE_DEPTH = 0x8071
	GL_TEXTURE_DEPTH_SIZE = 0x884A
	GL_TEXTURE_ENV = 0x2300
	GL_TEXTURE_ENV_COLOR = 0x2201
	GL_TEXTURE_ENV_MODE = 0x2200
	GL_TEXTURE_FILTER_CONTROL = 0x8500
	GL_TEXTURE_GEN_MODE = 0x2500
	GL_TEXTURE_GEN_Q = 0x0C63
	GL_TEXTURE_GEN_R = 0x0C62
	GL_TEXTURE_GEN_S = 0x0C60
	GL_TEXTURE_GEN_T = 0x0C61
	GL_TEXTURE_GREEN_SIZE = 0x805D
	GL_TEXTURE_HEIGHT = 0x1001
	GL_TEXTURE_INTENSITY_SIZE = 0x8061
	GL_TEXTURE_INTERNAL_FORMAT = 0x1003
	GL_TEXTURE_LOD_BIAS = 0x8501
	GL_TEXTURE_LUMINANCE_SIZE = 0x8060
	GL_TEXTURE_MAG_FILTER = 0x2800
	GL_TEXTURE_MATRIX = 0x0BA8
	GL_TEXTURE_MAX_LEVEL = 0x813D
	GL_TEXTURE_MAX_LOD = 0x813B
	GL_TEXTURE_MIN_FILTER = 0x2801
	GL_TEXTURE_MIN_LOD = 0x813A
	GL_TEXTURE_PRIORITY = 0x8066
	GL_TEXTURE_RED_SIZE = 0x805C
	GL_TEXTURE_RESIDENT = 0x8067
	GL_TEXTURE_STACK_DEPTH = 0x0BA5
	GL_TEXTURE_WIDTH = 0x1000
	GL_TEXTURE_WRAP_R = 0x8072
	GL_TEXTURE_WRAP_S = 0x2802
	GL_TEXTURE_WRAP_T = 0x2803
	GL_TRANSFORM_BIT = 0x00001000
	GL_TRANSPOSE_COLOR_MATRIX = 0x84E6
	GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3
	GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4
	GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5
	GL_TRIANGLES = 0x0004
	GL_TRIANGLE_FAN = 0x0006
	GL_TRIANGLE_STRIP = 0x0005
	GL_TRUE = 1
	GL_UNPACK_ALIGNMENT = 0x0CF5
	GL_UNPACK_IMAGE_HEIGHT = 0x806E
	GL_UNPACK_LSB_FIRST = 0x0CF1
	GL_UNPACK_ROW_LENGTH = 0x0CF2
	GL_UNPACK_SKIP_IMAGES = 0x806D
	GL_UNPACK_SKIP_PIXELS = 0x0CF4
	GL_UNPACK_SKIP_ROWS = 0x0CF3
	GL_UNPACK_SWAP_BYTES = 0x0CF0
	GL_UNSIGNED_BYTE = 0x1401
	GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362
	GL_UNSIGNED_BYTE_3_3_2 = 0x8032
	GL_UNSIGNED_INT = 0x1405
	GL_UNSIGNED_INT_10_10_10_2 = 0x8036
	GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368
	GL_UNSIGNED_INT_8_8_8_8 = 0x8035
	GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367
	GL_UNSIGNED_SHORT = 0x1403
	GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366
	GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033
	GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365
	GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034
	GL_UNSIGNED_SHORT_5_6_5 = 0x8363
	GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364
	GL_UPPER_LEFT = 0x8CA2
	GL_V2F = 0x2A20
	GL_V3F = 0x2A21
	GL_VALIDATE_STATUS = 0x8B83
	GL_VENDOR = 0x1F00
	GL_VERSION = 0x1F02
	GL_VERTEX_ARRAY = 0x8074
	GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896
	GL_VERTEX_ARRAY_POINTER = 0x808E
	GL_VERTEX_ARRAY_SIZE = 0x807A
	GL_VERTEX_ARRAY_STRIDE = 0x807C
	GL_VERTEX_ARRAY_TYPE = 0x807B
	GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F
	GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622
	GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A
	GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645
	GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623
	GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624
	GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625
	GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642
	GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643
	GL_VERTEX_SHADER = 0x8B31
	GL_VIEWPORT = 0x0BA2
	GL_VIEWPORT_BIT = 0x00000800
	GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E
	GL_WRITE_ONLY = 0x88B9
	GL_XOR = 0x1506
	GL_ZERO = 0
	GL_ZOOM_X = 0x0D16
	GL_ZOOM_Y = 0x0D17
)

// GL Functions
//

func Accum(op uint32, value float32)  {
    C.gogl_glAccum(C.GLenum(op), C.GLfloat(value))
}

func AlphaFunc(func_ uint32, ref float32)  {
    C.gogl_glAlphaFunc(C.GLenum(func_), C.GLfloat(ref))
}

func Begin(mode uint32)  {
    C.gogl_glBegin(C.GLenum(mode))
}

func Bitmap(width int32, height int32, xorig float32, yorig float32, xmove float32, ymove float32, bitmap *uint8)  {
    C.gogl_glBitmap(C.GLsizei(width), C.GLsizei(height), C.GLfloat(xorig), C.GLfloat(yorig), C.GLfloat(xmove), C.GLfloat(ymove), (*C.GLubyte)(unsafe.Pointer(bitmap)))
}

func BlendFunc(sfactor uint32, dfactor uint32)  {
    C.gogl_glBlendFunc(C.GLenum(sfactor), C.GLenum(dfactor))
}

func CallList(list uint32)  {
    C.gogl_glCallList(C.GLuint(list))
}

func CallLists(n int32, type_ uint32, lists unsafe.Pointer)  {
    C.gogl_glCallLists(C.GLsizei(n), C.GLenum(type_), lists)
}

func Clear(mask uint32)  {
    C.gogl_glClear(C.GLbitfield(mask))
}

func ClearAccum(red float32, green float32, blue float32, alpha float32)  {
    C.gogl_glClearAccum(C.GLfloat(red), C.GLfloat(green), C.GLfloat(blue), C.GLfloat(alpha))
}

func ClearColor(red float32, green float32, blue float32, alpha float32)  {
    C.gogl_glClearColor(C.GLfloat(red), C.GLfloat(green), C.GLfloat(blue), C.GLfloat(alpha))
}

func ClearDepth(depth float64)  {
    C.gogl_glClearDepth(C.GLdouble(depth))
}

func ClearIndex(c float32)  {
    C.gogl_glClearIndex(C.GLfloat(c))
}

func ClearStencil(s int32)  {
    C.gogl_glClearStencil(C.GLint(s))
}

func ClipPlane(plane uint32, equation *float64)  {
    C.gogl_glClipPlane(C.GLenum(plane), (*C.GLdouble)(unsafe.Pointer(equation)))
}

func Color3b(red int8, green int8, blue int8)  {
    C.gogl_glColor3b(C.GLbyte(red), C.GLbyte(green), C.GLbyte(blue))
}

func Color3bv(v *int8)  {
    C.gogl_glColor3bv((*C.GLbyte)(unsafe.Pointer(v)))
}

func Color3d(red float64, green float64, blue float64)  {
    C.gogl_glColor3d(C.GLdouble(red), C.GLdouble(green), C.GLdouble(blue))
}

func Color3dv(v *float64)  {
    C.gogl_glColor3dv((*C.GLdouble)(unsafe.Pointer(v)))
}

func Color3f(red float32, green float32, blue float32)  {
    C.gogl_glColor3f(C.GLfloat(red), C.GLfloat(green), C.GLfloat(blue))
}

func Color3fv(v *float32)  {
    C.gogl_glColor3fv((*C.GLfloat)(unsafe.Pointer(v)))
}

func Color3i(red int32, green int32, blue int32)  {
    C.gogl_glColor3i(C.GLint(red), C.GLint(green), C.GLint(blue))
}

func Color3iv(v *int32)  {
    C.gogl_glColor3iv((*C.GLint)(unsafe.Pointer(v)))
}

func Color3s(red int16, green int16, blue int16)  {
    C.gogl_glColor3s(C.GLshort(red), C.GLshort(green), C.GLshort(blue))
}

func Color3sv(v *int16)  {
    C.gogl_glColor3sv((*C.GLshort)(unsafe.Pointer(v)))
}

func Color3ub(red uint8, green uint8, blue uint8)  {
    C.gogl_glColor3ub(C.GLubyte(red), C.GLubyte(green), C.GLubyte(blue))
}

func Color3ubv(v *uint8)  {
    C.gogl_glColor3ubv((*C.GLubyte)(unsafe.Pointer(v)))
}

func Color3ui(red uint32, green uint32, blue uint32)  {
    C.gogl_glColor3ui(C.GLuint(red), C.GLuint(green), C.GLuint(blue))
}

func Color3uiv(v *uint32)  {
    C.gogl_glColor3uiv((*C.GLuint)(unsafe.Pointer(v)))
}

func Color3us(red uint16, green uint16, blue uint16)  {
    C.gogl_glColor3us(C.GLushort(red), C.GLushort(green), C.GLushort(blue))
}

func Color3usv(v *uint16)  {
    C.gogl_glColor3usv((*C.GLushort)(unsafe.Pointer(v)))
}

func Color4b(red int8, green int8, blue int8, alpha int8)  {
    C.gogl_glColor4b(C.GLbyte(red), C.GLbyte(green), C.GLbyte(blue), C.GLbyte(alpha))
}

func Color4bv(v *int8)  {
    C.gogl_glColor4bv((*C.GLbyte)(unsafe.Pointer(v)))
}

func Color4d(red float64, green float64, blue float64, alpha float64)  {
    C.gogl_glColor4d(C.GLdouble(red), C.GLdouble(green), C.GLdouble(blue), C.GLdouble(alpha))
}

func Color4dv(v *float64)  {
    C.gogl_glColor4dv((*C.GLdouble)(unsafe.Pointer(v)))
}

func Color4f(red float32, green float32, blue float32, alpha float32)  {
    C.gogl_glColor4f(C.GLfloat(red), C.GLfloat(green), C.GLfloat(blue), C.GLfloat(alpha))
}

func Color4fv(v *float32)  {
    C.gogl_glColor4fv((*C.GLfloat)(unsafe.Pointer(v)))
}

func Color4i(red int32, green int32, blue int32, alpha int32)  {
    C.gogl_glColor4i(C.GLint(red), C.GLint(green), C.GLint(blue), C.GLint(alpha))
}

func Color4iv(v *int32)  {
    C.gogl_glColor4iv((*C.GLint)(unsafe.Pointer(v)))
}

func Color4s(red int16, green int16, blue int16, alpha int16)  {
    C.gogl_glColor4s(C.GLshort(red), C.GLshort(green), C.GLshort(blue), C.GLshort(alpha))
}

func Color4sv(v *int16)  {
    C.gogl_glColor4sv((*C.GLshort)(unsafe.Pointer(v)))
}

func Color4ub(red uint8, green uint8, blue uint8, alpha uint8)  {
    C.gogl_glColor4ub(C.GLubyte(red), C.GLubyte(green), C.GLubyte(blue), C.GLubyte(alpha))
}

func Color4ubv(v *uint8)  {
    C.gogl_glColor4ubv((*C.GLubyte)(unsafe.Pointer(v)))
}

func Color4ui(red uint32, green uint32, blue uint32, alpha uint32)  {
    C.gogl_glColor4ui(C.GLuint(red), C.GLuint(green), C.GLuint(blue), C.GLuint(alpha))
}

func Color4uiv(v *uint32)  {
    C.gogl_glColor4uiv((*C.GLuint)(unsafe.Pointer(v)))
}

func Color4us(red uint16, green uint16, blue uint16, alpha uint16)  {
    C.gogl_glColor4us(C.GLushort(red), C.GLushort(green), C.GLushort(blue), C.GLushort(alpha))
}

func Color4usv(v *uint16)  {
    C.gogl_glColor4usv((*C.GLushort)(unsafe.Pointer(v)))
}

func ColorMask(red byte, green byte, blue byte, alpha byte)  {
    C.gogl_glColorMask(C.GLboolean(red), C.GLboolean(green), C.GLboolean(blue), C.GLboolean(alpha))
}

func ColorMaterial(face uint32, mode uint32)  {
    C.gogl_glColorMaterial(C.GLenum(face), C.GLenum(mode))
}

func CopyPixels(x int32, y int32, width int32, height int32, type_ uint32)  {
    C.gogl_glCopyPixels(C.GLint(x), C.GLint(y), C.GLsizei(width), C.GLsizei(height), C.GLenum(type_))
}

func CullFace(mode uint32)  {
    C.gogl_glCullFace(C.GLenum(mode))
}

func DeleteLists(list uint32, range_ int32)  {
    C.gogl_glDeleteLists(C.GLuint(list), C.GLsizei(range_))
}

func DepthFunc(func_ uint32)  {
    C.gogl_glDepthFunc(C.GLenum(func_))
}

func DepthMask(flag byte)  {
    C.gogl_glDepthMask(C.GLboolean(flag))
}

func DepthRange(n float64, f float64)  {
    C.gogl_glDepthRange(C.GLdouble(n), C.GLdouble(f))
}

func Disable(cap uint32)  {
    C.gogl_glDisable(C.GLenum(cap))
}

func DrawBuffer(buf uint32)  {
    C.gogl_glDrawBuffer(C.GLenum(buf))
}

func DrawPixels(width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)  {
    C.gogl_glDrawPixels(C.GLsizei(width), C.GLsizei(height), C.GLenum(format), C.GLenum(type_), pixels)
}

func EdgeFlag(flag byte)  {
    C.gogl_glEdgeFlag(C.GLboolean(flag))
}

func EdgeFlagv(flag *byte)  {
    C.gogl_glEdgeFlagv((*C.GLboolean)(unsafe.Pointer(flag)))
}

func Enable(cap uint32)  {
    C.gogl_glEnable(C.GLenum(cap))
}

func End()  {
    C.gogl_glEnd()
}

func EndList()  {
    C.gogl_glEndList()
}

func EvalCoord1d(u float64)  {
    C.gogl_glEvalCoord1d(C.GLdouble(u))
}

func EvalCoord1dv(u *float64)  {
    C.gogl_glEvalCoord1dv((*C.GLdouble)(unsafe.Pointer(u)))
}

func EvalCoord1f(u float32)  {
    C.gogl_glEvalCoord1f(C.GLfloat(u))
}

func EvalCoord1fv(u *float32)  {
    C.gogl_glEvalCoord1fv((*C.GLfloat)(unsafe.Pointer(u)))
}

func EvalCoord2d(u float64, v float64)  {
    C.gogl_glEvalCoord2d(C.GLdouble(u), C.GLdouble(v))
}

func EvalCoord2dv(u *float64)  {
    C.gogl_glEvalCoord2dv((*C.GLdouble)(unsafe.Pointer(u)))
}

func EvalCoord2f(u float32, v float32)  {
    C.gogl_glEvalCoord2f(C.GLfloat(u), C.GLfloat(v))
}

func EvalCoord2fv(u *float32)  {
    C.gogl_glEvalCoord2fv((*C.GLfloat)(unsafe.Pointer(u)))
}

func EvalMesh1(mode uint32, i1 int32, i2 int32)  {
    C.gogl_glEvalMesh1(C.GLenum(mode), C.GLint(i1), C.GLint(i2))
}

func EvalMesh2(mode uint32, i1 int32, i2 int32, j1 int32, j2 int32)  {
    C.gogl_glEvalMesh2(C.GLenum(mode), C.GLint(i1), C.GLint(i2), C.GLint(j1), C.GLint(j2))
}

func EvalPoint1(i int32)  {
    C.gogl_glEvalPoint1(C.GLint(i))
}

func EvalPoint2(i int32, j int32)  {
    C.gogl_glEvalPoint2(C.GLint(i), C.GLint(j))
}

func FeedbackBuffer(size int32, type_ uint32, buffer *float32)  {
    C.gogl_glFeedbackBuffer(C.GLsizei(size), C.GLenum(type_), (*C.GLfloat)(unsafe.Pointer(buffer)))
}

func Finish()  {
    C.gogl_glFinish()
}

func Flush()  {
    C.gogl_glFlush()
}

func Fogf(pname uint32, param float32)  {
    C.gogl_glFogf(C.GLenum(pname), C.GLfloat(param))
}

func Fogfv(pname uint32, params *float32)  {
    C.gogl_glFogfv(C.GLenum(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}

func Fogi(pname uint32, param int32)  {
    C.gogl_glFogi(C.GLenum(pname), C.GLint(param))
}

func Fogiv(pname uint32, params *int32)  {
    C.gogl_glFogiv(C.GLenum(pname), (*C.GLint)(unsafe.Pointer(params)))
}

func FrontFace(mode uint32)  {
    C.gogl_glFrontFace(C.GLenum(mode))
}

func Frustum(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)  {
    C.gogl_glFrustum(C.GLdouble(left), C.GLdouble(right), C.GLdouble(bottom), C.GLdouble(top), C.GLdouble(zNear), C.GLdouble(zFar))
}

func GenLists(range_ int32) uint32 {
    ret := C.gogl_glGenLists(C.GLsizei(range_))
    return uint32(ret)
}

func GetBooleanv(pname uint32, data *byte)  {
    C.gogl_glGetBooleanv(C.GLenum(pname), (*C.GLboolean)(unsafe.Pointer(data)))
}

func GetClipPlane(plane uint32, equation *float64)  {
    C.gogl_glGetClipPlane(C.GLenum(plane), (*C.GLdouble)(unsafe.Pointer(equation)))
}

func GetDoublev(pname uint32, data *float64)  {
    C.gogl_glGetDoublev(C.GLenum(pname), (*C.GLdouble)(unsafe.Pointer(data)))
}

func GetError() uint32 {
    ret := C.gogl_glGetError()
    return uint32(ret)
}

func GetFloatv(pname uint32, data *float32)  {
    C.gogl_glGetFloatv(C.GLenum(pname), (*C.GLfloat)(unsafe.Pointer(data)))
}

func GetIntegerv(pname uint32, data *int32)  {
    C.gogl_glGetIntegerv(C.GLenum(pname), (*C.GLint)(unsafe.Pointer(data)))
}

func GetLightfv(light uint32, pname uint32, params *float32)  {
    C.gogl_glGetLightfv(C.GLenum(light), C.GLenum(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}

func GetLightiv(light uint32, pname uint32, params *int32)  {
    C.gogl_glGetLightiv(C.GLenum(light), C.GLenum(pname), (*C.GLint)(unsafe.Pointer(params)))
}

func GetMapdv(target uint32, query uint32, v *float64)  {
    C.gogl_glGetMapdv(C.GLenum(target), C.GLenum(query), (*C.GLdouble)(unsafe.Pointer(v)))
}

func GetMapfv(target uint32, query uint32, v *float32)  {
    C.gogl_glGetMapfv(C.GLenum(target), C.GLenum(query), (*C.GLfloat)(unsafe.Pointer(v)))
}

func GetMapiv(target uint32, query uint32, v *int32)  {
    C.gogl_glGetMapiv(C.GLenum(target), C.GLenum(query), (*C.GLint)(unsafe.Pointer(v)))
}

func GetMaterialfv(face uint32, pname uint32, params *float32)  {
    C.gogl_glGetMaterialfv(C.GLenum(face), C.GLenum(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}

func GetMaterialiv(face uint32, pname uint32, params *int32)  {
    C.gogl_glGetMaterialiv(C.GLenum(face), C.GLenum(pname), (*C.GLint)(unsafe.Pointer(params)))
}

func GetPixelMapfv(map_ uint32, values *float32)  {
    C.gogl_glGetPixelMapfv(C.GLenum(map_), (*C.GLfloat)(unsafe.Pointer(values)))
}

func GetPixelMapuiv(map_ uint32, values *uint32)  {
    C.gogl_glGetPixelMapuiv(C.GLenum(map_), (*C.GLuint)(unsafe.Pointer(values)))
}

func GetPixelMapusv(map_ uint32, values *uint16)  {
    C.gogl_glGetPixelMapusv(C.GLenum(map_), (*C.GLushort)(unsafe.Pointer(values)))
}

func GetPolygonStipple(mask *uint8)  {
    C.gogl_glGetPolygonStipple((*C.GLubyte)(unsafe.Pointer(mask)))
}

func GetString(name uint32) *uint8 {
    ret := C.gogl_glGetString(C.GLenum(name))
    return (*uint8)(ret)
}

func GetTexEnvfv(target uint32, pname uint32, params *float32)  {
    C.gogl_glGetTexEnvfv(C.GLenum(target), C.GLenum(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}

func GetTexEnviv(target uint32, pname uint32, params *int32)  {
    C.gogl_glGetTexEnviv(C.GLenum(target), C.GLenum(pname), (*C.GLint)(unsafe.Pointer(params)))
}

func GetTexGendv(coord uint32, pname uint32, params *float64)  {
    C.gogl_glGetTexGendv(C.GLenum(coord), C.GLenum(pname), (*C.GLdouble)(unsafe.Pointer(params)))
}

func GetTexGenfv(coord uint32, pname uint32, params *float32)  {
    C.gogl_glGetTexGenfv(C.GLenum(coord), C.GLenum(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}

func GetTexGeniv(coord uint32, pname uint32, params *int32)  {
    C.gogl_glGetTexGeniv(C.GLenum(coord), C.GLenum(pname), (*C.GLint)(unsafe.Pointer(params)))
}

func GetTexImage(target uint32, level int32, format uint32, type_ uint32, pixels unsafe.Pointer)  {
    C.gogl_glGetTexImage(C.GLenum(target), C.GLint(level), C.GLenum(format), C.GLenum(type_), pixels)
}

func GetTexLevelParameterfv(target uint32, level int32, pname uint32, params *float32)  {
    C.gogl_glGetTexLevelParameterfv(C.GLenum(target), C.GLint(level), C.GLenum(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}

func GetTexLevelParameteriv(target uint32, level int32, pname uint32, params *int32)  {
    C.gogl_glGetTexLevelParameteriv(C.GLenum(target), C.GLint(level), C.GLenum(pname), (*C.GLint)(unsafe.Pointer(params)))
}

func GetTexParameterfv(target uint32, pname uint32, params *float32)  {
    C.gogl_glGetTexParameterfv(C.GLenum(target), C.GLenum(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}

func GetTexParameteriv(target uint32, pname uint32, params *int32)  {
    C.gogl_glGetTexParameteriv(C.GLenum(target), C.GLenum(pname), (*C.GLint)(unsafe.Pointer(params)))
}

func Hint(target uint32, mode uint32)  {
    C.gogl_glHint(C.GLenum(target), C.GLenum(mode))
}

func IndexMask(mask uint32)  {
    C.gogl_glIndexMask(C.GLuint(mask))
}

func Indexd(c float64)  {
    C.gogl_glIndexd(C.GLdouble(c))
}

func Indexdv(c *float64)  {
    C.gogl_glIndexdv((*C.GLdouble)(unsafe.Pointer(c)))
}

func Indexf(c float32)  {
    C.gogl_glIndexf(C.GLfloat(c))
}

func Indexfv(c *float32)  {
    C.gogl_glIndexfv((*C.GLfloat)(unsafe.Pointer(c)))
}

func Indexi(c int32)  {
    C.gogl_glIndexi(C.GLint(c))
}

func Indexiv(c *int32)  {
    C.gogl_glIndexiv((*C.GLint)(unsafe.Pointer(c)))
}

func Indexs(c int16)  {
    C.gogl_glIndexs(C.GLshort(c))
}

func Indexsv(c *int16)  {
    C.gogl_glIndexsv((*C.GLshort)(unsafe.Pointer(c)))
}

func InitNames()  {
    C.gogl_glInitNames()
}

func IsEnabled(cap uint32) byte {
    ret := C.gogl_glIsEnabled(C.GLenum(cap))
    return byte(ret)
}

func IsList(list uint32) byte {
    ret := C.gogl_glIsList(C.GLuint(list))
    return byte(ret)
}

func LightModelf(pname uint32, param float32)  {
    C.gogl_glLightModelf(C.GLenum(pname), C.GLfloat(param))
}

func LightModelfv(pname uint32, params *float32)  {
    C.gogl_glLightModelfv(C.GLenum(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}

func LightModeli(pname uint32, param int32)  {
    C.gogl_glLightModeli(C.GLenum(pname), C.GLint(param))
}

func LightModeliv(pname uint32, params *int32)  {
    C.gogl_glLightModeliv(C.GLenum(pname), (*C.GLint)(unsafe.Pointer(params)))
}

func Lightf(light uint32, pname uint32, param float32)  {
    C.gogl_glLightf(C.GLenum(light), C.GLenum(pname), C.GLfloat(param))
}

func Lightfv(light uint32, pname uint32, params *float32)  {
    C.gogl_glLightfv(C.GLenum(light), C.GLenum(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}

func Lighti(light uint32, pname uint32, param int32)  {
    C.gogl_glLighti(C.GLenum(light), C.GLenum(pname), C.GLint(param))
}

func Lightiv(light uint32, pname uint32, params *int32)  {
    C.gogl_glLightiv(C.GLenum(light), C.GLenum(pname), (*C.GLint)(unsafe.Pointer(params)))
}

func LineStipple(factor int32, pattern uint16)  {
    C.gogl_glLineStipple(C.GLint(factor), C.GLushort(pattern))
}

func LineWidth(width float32)  {
    C.gogl_glLineWidth(C.GLfloat(width))
}

func ListBase(base uint32)  {
    C.gogl_glListBase(C.GLuint(base))
}

func LoadIdentity()  {
    C.gogl_glLoadIdentity()
}

func LoadMatrixd(m *float64)  {
    C.gogl_glLoadMatrixd((*C.GLdouble)(unsafe.Pointer(m)))
}

func LoadMatrixf(m *float32)  {
    C.gogl_glLoadMatrixf((*C.GLfloat)(unsafe.Pointer(m)))
}

func LoadName(name uint32)  {
    C.gogl_glLoadName(C.GLuint(name))
}

func LogicOp(opcode uint32)  {
    C.gogl_glLogicOp(C.GLenum(opcode))
}

func Map1d(target uint32, u1 float64, u2 float64, stride int32, order int32, points *float64)  {
    C.gogl_glMap1d(C.GLenum(target), C.GLdouble(u1), C.GLdouble(u2), C.GLint(stride), C.GLint(order), (*C.GLdouble)(unsafe.Pointer(points)))
}

func Map1f(target uint32, u1 float32, u2 float32, stride int32, order int32, points *float32)  {
    C.gogl_glMap1f(C.GLenum(target), C.GLfloat(u1), C.GLfloat(u2), C.GLint(stride), C.GLint(order), (*C.GLfloat)(unsafe.Pointer(points)))
}

func Map2d(target uint32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, points *float64)  {
    C.gogl_glMap2d(C.GLenum(target), C.GLdouble(u1), C.GLdouble(u2), C.GLint(ustride), C.GLint(uorder), C.GLdouble(v1), C.GLdouble(v2), C.GLint(vstride), C.GLint(vorder), (*C.GLdouble)(unsafe.Pointer(points)))
}

func Map2f(target uint32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, points *float32)  {
    C.gogl_glMap2f(C.GLenum(target), C.GLfloat(u1), C.GLfloat(u2), C.GLint(ustride), C.GLint(uorder), C.GLfloat(v1), C.GLfloat(v2), C.GLint(vstride), C.GLint(vorder), (*C.GLfloat)(unsafe.Pointer(points)))
}

func MapGrid1d(un int32, u1 float64, u2 float64)  {
    C.gogl_glMapGrid1d(C.GLint(un), C.GLdouble(u1), C.GLdouble(u2))
}

func MapGrid1f(un int32, u1 float32, u2 float32)  {
    C.gogl_glMapGrid1f(C.GLint(un), C.GLfloat(u1), C.GLfloat(u2))
}

func MapGrid2d(un int32, u1 float64, u2 float64, vn int32, v1 float64, v2 float64)  {
    C.gogl_glMapGrid2d(C.GLint(un), C.GLdouble(u1), C.GLdouble(u2), C.GLint(vn), C.GLdouble(v1), C.GLdouble(v2))
}

func MapGrid2f(un int32, u1 float32, u2 float32, vn int32, v1 float32, v2 float32)  {
    C.gogl_glMapGrid2f(C.GLint(un), C.GLfloat(u1), C.GLfloat(u2), C.GLint(vn), C.GLfloat(v1), C.GLfloat(v2))
}

func Materialf(face uint32, pname uint32, param float32)  {
    C.gogl_glMaterialf(C.GLenum(face), C.GLenum(pname), C.GLfloat(param))
}

func Materialfv(face uint32, pname uint32, params *float32)  {
    C.gogl_glMaterialfv(C.GLenum(face), C.GLenum(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}

func Materiali(face uint32, pname uint32, param int32)  {
    C.gogl_glMateriali(C.GLenum(face), C.GLenum(pname), C.GLint(param))
}

func Materialiv(face uint32, pname uint32, params *int32)  {
    C.gogl_glMaterialiv(C.GLenum(face), C.GLenum(pname), (*C.GLint)(unsafe.Pointer(params)))
}

func MatrixMode(mode uint32)  {
    C.gogl_glMatrixMode(C.GLenum(mode))
}

func MultMatrixd(m *float64)  {
    C.gogl_glMultMatrixd((*C.GLdouble)(unsafe.Pointer(m)))
}

func MultMatrixf(m *float32)  {
    C.gogl_glMultMatrixf((*C.GLfloat)(unsafe.Pointer(m)))
}

func NewList(list uint32, mode uint32)  {
    C.gogl_glNewList(C.GLuint(list), C.GLenum(mode))
}

func Normal3b(nx int8, ny int8, nz int8)  {
    C.gogl_glNormal3b(C.GLbyte(nx), C.GLbyte(ny), C.GLbyte(nz))
}

func Normal3bv(v *int8)  {
    C.gogl_glNormal3bv((*C.GLbyte)(unsafe.Pointer(v)))
}

func Normal3d(nx float64, ny float64, nz float64)  {
    C.gogl_glNormal3d(C.GLdouble(nx), C.GLdouble(ny), C.GLdouble(nz))
}

func Normal3dv(v *float64)  {
    C.gogl_glNormal3dv((*C.GLdouble)(unsafe.Pointer(v)))
}

func Normal3f(nx float32, ny float32, nz float32)  {
    C.gogl_glNormal3f(C.GLfloat(nx), C.GLfloat(ny), C.GLfloat(nz))
}

func Normal3fv(v *float32)  {
    C.gogl_glNormal3fv((*C.GLfloat)(unsafe.Pointer(v)))
}

func Normal3i(nx int32, ny int32, nz int32)  {
    C.gogl_glNormal3i(C.GLint(nx), C.GLint(ny), C.GLint(nz))
}

func Normal3iv(v *int32)  {
    C.gogl_glNormal3iv((*C.GLint)(unsafe.Pointer(v)))
}

func Normal3s(nx int16, ny int16, nz int16)  {
    C.gogl_glNormal3s(C.GLshort(nx), C.GLshort(ny), C.GLshort(nz))
}

func Normal3sv(v *int16)  {
    C.gogl_glNormal3sv((*C.GLshort)(unsafe.Pointer(v)))
}

func Ortho(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)  {
    C.gogl_glOrtho(C.GLdouble(left), C.GLdouble(right), C.GLdouble(bottom), C.GLdouble(top), C.GLdouble(zNear), C.GLdouble(zFar))
}

func PassThrough(token float32)  {
    C.gogl_glPassThrough(C.GLfloat(token))
}

func PixelMapfv(map_ uint32, mapsize int32, values *float32)  {
    C.gogl_glPixelMapfv(C.GLenum(map_), C.GLsizei(mapsize), (*C.GLfloat)(unsafe.Pointer(values)))
}

func PixelMapuiv(map_ uint32, mapsize int32, values *uint32)  {
    C.gogl_glPixelMapuiv(C.GLenum(map_), C.GLsizei(mapsize), (*C.GLuint)(unsafe.Pointer(values)))
}

func PixelMapusv(map_ uint32, mapsize int32, values *uint16)  {
    C.gogl_glPixelMapusv(C.GLenum(map_), C.GLsizei(mapsize), (*C.GLushort)(unsafe.Pointer(values)))
}

func PixelStoref(pname uint32, param float32)  {
    C.gogl_glPixelStoref(C.GLenum(pname), C.GLfloat(param))
}

func PixelStorei(pname uint32, param int32)  {
    C.gogl_glPixelStorei(C.GLenum(pname), C.GLint(param))
}

func PixelTransferf(pname uint32, param float32)  {
    C.gogl_glPixelTransferf(C.GLenum(pname), C.GLfloat(param))
}

func PixelTransferi(pname uint32, param int32)  {
    C.gogl_glPixelTransferi(C.GLenum(pname), C.GLint(param))
}

func PixelZoom(xfactor float32, yfactor float32)  {
    C.gogl_glPixelZoom(C.GLfloat(xfactor), C.GLfloat(yfactor))
}

func PointSize(size float32)  {
    C.gogl_glPointSize(C.GLfloat(size))
}

func PolygonMode(face uint32, mode uint32)  {
    C.gogl_glPolygonMode(C.GLenum(face), C.GLenum(mode))
}

func PolygonStipple(mask *uint8)  {
    C.gogl_glPolygonStipple((*C.GLubyte)(unsafe.Pointer(mask)))
}

func PopAttrib()  {
    C.gogl_glPopAttrib()
}

func PopMatrix()  {
    C.gogl_glPopMatrix()
}

func PopName()  {
    C.gogl_glPopName()
}

func PushAttrib(mask uint32)  {
    C.gogl_glPushAttrib(C.GLbitfield(mask))
}

func PushMatrix()  {
    C.gogl_glPushMatrix()
}

func PushName(name uint32)  {
    C.gogl_glPushName(C.GLuint(name))
}

func RasterPos2d(x float64, y float64)  {
    C.gogl_glRasterPos2d(C.GLdouble(x), C.GLdouble(y))
}

func RasterPos2dv(v *float64)  {
    C.gogl_glRasterPos2dv((*C.GLdouble)(unsafe.Pointer(v)))
}

func RasterPos2f(x float32, y float32)  {
    C.gogl_glRasterPos2f(C.GLfloat(x), C.GLfloat(y))
}

func RasterPos2fv(v *float32)  {
    C.gogl_glRasterPos2fv((*C.GLfloat)(unsafe.Pointer(v)))
}

func RasterPos2i(x int32, y int32)  {
    C.gogl_glRasterPos2i(C.GLint(x), C.GLint(y))
}

func RasterPos2iv(v *int32)  {
    C.gogl_glRasterPos2iv((*C.GLint)(unsafe.Pointer(v)))
}

func RasterPos2s(x int16, y int16)  {
    C.gogl_glRasterPos2s(C.GLshort(x), C.GLshort(y))
}

func RasterPos2sv(v *int16)  {
    C.gogl_glRasterPos2sv((*C.GLshort)(unsafe.Pointer(v)))
}

func RasterPos3d(x float64, y float64, z float64)  {
    C.gogl_glRasterPos3d(C.GLdouble(x), C.GLdouble(y), C.GLdouble(z))
}

func RasterPos3dv(v *float64)  {
    C.gogl_glRasterPos3dv((*C.GLdouble)(unsafe.Pointer(v)))
}

func RasterPos3f(x float32, y float32, z float32)  {
    C.gogl_glRasterPos3f(C.GLfloat(x), C.GLfloat(y), C.GLfloat(z))
}

func RasterPos3fv(v *float32)  {
    C.gogl_glRasterPos3fv((*C.GLfloat)(unsafe.Pointer(v)))
}

func RasterPos3i(x int32, y int32, z int32)  {
    C.gogl_glRasterPos3i(C.GLint(x), C.GLint(y), C.GLint(z))
}

func RasterPos3iv(v *int32)  {
    C.gogl_glRasterPos3iv((*C.GLint)(unsafe.Pointer(v)))
}

func RasterPos3s(x int16, y int16, z int16)  {
    C.gogl_glRasterPos3s(C.GLshort(x), C.GLshort(y), C.GLshort(z))
}

func RasterPos3sv(v *int16)  {
    C.gogl_glRasterPos3sv((*C.GLshort)(unsafe.Pointer(v)))
}

func RasterPos4d(x float64, y float64, z float64, w float64)  {
    C.gogl_glRasterPos4d(C.GLdouble(x), C.GLdouble(y), C.GLdouble(z), C.GLdouble(w))
}

func RasterPos4dv(v *float64)  {
    C.gogl_glRasterPos4dv((*C.GLdouble)(unsafe.Pointer(v)))
}

func RasterPos4f(x float32, y float32, z float32, w float32)  {
    C.gogl_glRasterPos4f(C.GLfloat(x), C.GLfloat(y), C.GLfloat(z), C.GLfloat(w))
}

func RasterPos4fv(v *float32)  {
    C.gogl_glRasterPos4fv((*C.GLfloat)(unsafe.Pointer(v)))
}

func RasterPos4i(x int32, y int32, z int32, w int32)  {
    C.gogl_glRasterPos4i(C.GLint(x), C.GLint(y), C.GLint(z), C.GLint(w))
}

func RasterPos4iv(v *int32)  {
    C.gogl_glRasterPos4iv((*C.GLint)(unsafe.Pointer(v)))
}

func RasterPos4s(x int16, y int16, z int16, w int16)  {
    C.gogl_glRasterPos4s(C.GLshort(x), C.GLshort(y), C.GLshort(z), C.GLshort(w))
}

func RasterPos4sv(v *int16)  {
    C.gogl_glRasterPos4sv((*C.GLshort)(unsafe.Pointer(v)))
}

func ReadBuffer(src uint32)  {
    C.gogl_glReadBuffer(C.GLenum(src))
}

func ReadPixels(x int32, y int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)  {
    C.gogl_glReadPixels(C.GLint(x), C.GLint(y), C.GLsizei(width), C.GLsizei(height), C.GLenum(format), C.GLenum(type_), pixels)
}

func Rectd(x1 float64, y1 float64, x2 float64, y2 float64)  {
    C.gogl_glRectd(C.GLdouble(x1), C.GLdouble(y1), C.GLdouble(x2), C.GLdouble(y2))
}

func Rectdv(v1 *float64, v2 *float64)  {
    C.gogl_glRectdv((*C.GLdouble)(unsafe.Pointer(v1)), (*C.GLdouble)(unsafe.Pointer(v2)))
}

func Rectf(x1 float32, y1 float32, x2 float32, y2 float32)  {
    C.gogl_glRectf(C.GLfloat(x1), C.GLfloat(y1), C.GLfloat(x2), C.GLfloat(y2))
}

func Rectfv(v1 *float32, v2 *float32)  {
    C.gogl_glRectfv((*C.GLfloat)(unsafe.Pointer(v1)), (*C.GLfloat)(unsafe.Pointer(v2)))
}

func Recti(x1 int32, y1 int32, x2 int32, y2 int32)  {
    C.gogl_glRecti(C.GLint(x1), C.GLint(y1), C.GLint(x2), C.GLint(y2))
}

func Rectiv(v1 *int32, v2 *int32)  {
    C.gogl_glRectiv((*C.GLint)(unsafe.Pointer(v1)), (*C.GLint)(unsafe.Pointer(v2)))
}

func Rects(x1 int16, y1 int16, x2 int16, y2 int16)  {
    C.gogl_glRects(C.GLshort(x1), C.GLshort(y1), C.GLshort(x2), C.GLshort(y2))
}

func Rectsv(v1 *int16, v2 *int16)  {
    C.gogl_glRectsv((*C.GLshort)(unsafe.Pointer(v1)), (*C.GLshort)(unsafe.Pointer(v2)))
}

func RenderMode(mode uint32) int32 {
    ret := C.gogl_glRenderMode(C.GLenum(mode))
    return int32(ret)
}

func Rotated(angle float64, x float64, y float64, z float64)  {
    C.gogl_glRotated(C.GLdouble(angle), C.GLdouble(x), C.GLdouble(y), C.GLdouble(z))
}

func Rotatef(angle float32, x float32, y float32, z float32)  {
    C.gogl_glRotatef(C.GLfloat(angle), C.GLfloat(x), C.GLfloat(y), C.GLfloat(z))
}

func Scaled(x float64, y float64, z float64)  {
    C.gogl_glScaled(C.GLdouble(x), C.GLdouble(y), C.GLdouble(z))
}

func Scalef(x float32, y float32, z float32)  {
    C.gogl_glScalef(C.GLfloat(x), C.GLfloat(y), C.GLfloat(z))
}

func Scissor(x int32, y int32, width int32, height int32)  {
    C.gogl_glScissor(C.GLint(x), C.GLint(y), C.GLsizei(width), C.GLsizei(height))
}

func SelectBuffer(size int32, buffer *uint32)  {
    C.gogl_glSelectBuffer(C.GLsizei(size), (*C.GLuint)(unsafe.Pointer(buffer)))
}

func ShadeModel(mode uint32)  {
    C.gogl_glShadeModel(C.GLenum(mode))
}

func StencilFunc(func_ uint32, ref int32, mask uint32)  {
    C.gogl_glStencilFunc(C.GLenum(func_), C.GLint(ref), C.GLuint(mask))
}

func StencilMask(mask uint32)  {
    C.gogl_glStencilMask(C.GLuint(mask))
}

func StencilOp(fail uint32, zfail uint32, zpass uint32)  {
    C.gogl_glStencilOp(C.GLenum(fail), C.GLenum(zfail), C.GLenum(zpass))
}

func TexCoord1d(s float64)  {
    C.gogl_glTexCoord1d(C.GLdouble(s))
}

func TexCoord1dv(v *float64)  {
    C.gogl_glTexCoord1dv((*C.GLdouble)(unsafe.Pointer(v)))
}

func TexCoord1f(s float32)  {
    C.gogl_glTexCoord1f(C.GLfloat(s))
}

func TexCoord1fv(v *float32)  {
    C.gogl_glTexCoord1fv((*C.GLfloat)(unsafe.Pointer(v)))
}

func TexCoord1i(s int32)  {
    C.gogl_glTexCoord1i(C.GLint(s))
}

func TexCoord1iv(v *int32)  {
    C.gogl_glTexCoord1iv((*C.GLint)(unsafe.Pointer(v)))
}

func TexCoord1s(s int16)  {
    C.gogl_glTexCoord1s(C.GLshort(s))
}

func TexCoord1sv(v *int16)  {
    C.gogl_glTexCoord1sv((*C.GLshort)(unsafe.Pointer(v)))
}

func TexCoord2d(s float64, t float64)  {
    C.gogl_glTexCoord2d(C.GLdouble(s), C.GLdouble(t))
}

func TexCoord2dv(v *float64)  {
    C.gogl_glTexCoord2dv((*C.GLdouble)(unsafe.Pointer(v)))
}

func TexCoord2f(s float32, t float32)  {
    C.gogl_glTexCoord2f(C.GLfloat(s), C.GLfloat(t))
}

func TexCoord2fv(v *float32)  {
    C.gogl_glTexCoord2fv((*C.GLfloat)(unsafe.Pointer(v)))
}

func TexCoord2i(s int32, t int32)  {
    C.gogl_glTexCoord2i(C.GLint(s), C.GLint(t))
}

func TexCoord2iv(v *int32)  {
    C.gogl_glTexCoord2iv((*C.GLint)(unsafe.Pointer(v)))
}

func TexCoord2s(s int16, t int16)  {
    C.gogl_glTexCoord2s(C.GLshort(s), C.GLshort(t))
}

func TexCoord2sv(v *int16)  {
    C.gogl_glTexCoord2sv((*C.GLshort)(unsafe.Pointer(v)))
}

func TexCoord3d(s float64, t float64, r float64)  {
    C.gogl_glTexCoord3d(C.GLdouble(s), C.GLdouble(t), C.GLdouble(r))
}

func TexCoord3dv(v *float64)  {
    C.gogl_glTexCoord3dv((*C.GLdouble)(unsafe.Pointer(v)))
}

func TexCoord3f(s float32, t float32, r float32)  {
    C.gogl_glTexCoord3f(C.GLfloat(s), C.GLfloat(t), C.GLfloat(r))
}

func TexCoord3fv(v *float32)  {
    C.gogl_glTexCoord3fv((*C.GLfloat)(unsafe.Pointer(v)))
}

func TexCoord3i(s int32, t int32, r int32)  {
    C.gogl_glTexCoord3i(C.GLint(s), C.GLint(t), C.GLint(r))
}

func TexCoord3iv(v *int32)  {
    C.gogl_glTexCoord3iv((*C.GLint)(unsafe.Pointer(v)))
}

func TexCoord3s(s int16, t int16, r int16)  {
    C.gogl_glTexCoord3s(C.GLshort(s), C.GLshort(t), C.GLshort(r))
}

func TexCoord3sv(v *int16)  {
    C.gogl_glTexCoord3sv((*C.GLshort)(unsafe.Pointer(v)))
}

func TexCoord4d(s float64, t float64, r float64, q float64)  {
    C.gogl_glTexCoord4d(C.GLdouble(s), C.GLdouble(t), C.GLdouble(r), C.GLdouble(q))
}

func TexCoord4dv(v *float64)  {
    C.gogl_glTexCoord4dv((*C.GLdouble)(unsafe.Pointer(v)))
}

func TexCoord4f(s float32, t float32, r float32, q float32)  {
    C.gogl_glTexCoord4f(C.GLfloat(s), C.GLfloat(t), C.GLfloat(r), C.GLfloat(q))
}

func TexCoord4fv(v *float32)  {
    C.gogl_glTexCoord4fv((*C.GLfloat)(unsafe.Pointer(v)))
}

func TexCoord4i(s int32, t int32, r int32, q int32)  {
    C.gogl_glTexCoord4i(C.GLint(s), C.GLint(t), C.GLint(r), C.GLint(q))
}

func TexCoord4iv(v *int32)  {
    C.gogl_glTexCoord4iv((*C.GLint)(unsafe.Pointer(v)))
}

func TexCoord4s(s int16, t int16, r int16, q int16)  {
    C.gogl_glTexCoord4s(C.GLshort(s), C.GLshort(t), C.GLshort(r), C.GLshort(q))
}

func TexCoord4sv(v *int16)  {
    C.gogl_glTexCoord4sv((*C.GLshort)(unsafe.Pointer(v)))
}

func TexEnvf(target uint32, pname uint32, param float32)  {
    C.gogl_glTexEnvf(C.GLenum(target), C.GLenum(pname), C.GLfloat(param))
}

func TexEnvfv(target uint32, pname uint32, params *float32)  {
    C.gogl_glTexEnvfv(C.GLenum(target), C.GLenum(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}

func TexEnvi(target uint32, pname uint32, param int32)  {
    C.gogl_glTexEnvi(C.GLenum(target), C.GLenum(pname), C.GLint(param))
}

func TexEnviv(target uint32, pname uint32, params *int32)  {
    C.gogl_glTexEnviv(C.GLenum(target), C.GLenum(pname), (*C.GLint)(unsafe.Pointer(params)))
}

func TexGend(coord uint32, pname uint32, param float64)  {
    C.gogl_glTexGend(C.GLenum(coord), C.GLenum(pname), C.GLdouble(param))
}

func TexGendv(coord uint32, pname uint32, params *float64)  {
    C.gogl_glTexGendv(C.GLenum(coord), C.GLenum(pname), (*C.GLdouble)(unsafe.Pointer(params)))
}

func TexGenf(coord uint32, pname uint32, param float32)  {
    C.gogl_glTexGenf(C.GLenum(coord), C.GLenum(pname), C.GLfloat(param))
}

func TexGenfv(coord uint32, pname uint32, params *float32)  {
    C.gogl_glTexGenfv(C.GLenum(coord), C.GLenum(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}

func TexGeni(coord uint32, pname uint32, param int32)  {
    C.gogl_glTexGeni(C.GLenum(coord), C.GLenum(pname), C.GLint(param))
}

func TexGeniv(coord uint32, pname uint32, params *int32)  {
    C.gogl_glTexGeniv(C.GLenum(coord), C.GLenum(pname), (*C.GLint)(unsafe.Pointer(params)))
}

func TexImage1D(target uint32, level int32, internalformat int32, width int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)  {
    C.gogl_glTexImage1D(C.GLenum(target), C.GLint(level), C.GLint(internalformat), C.GLsizei(width), C.GLint(border), C.GLenum(format), C.GLenum(type_), pixels)
}

func TexImage2D(target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)  {
    C.gogl_glTexImage2D(C.GLenum(target), C.GLint(level), C.GLint(internalformat), C.GLsizei(width), C.GLsizei(height), C.GLint(border), C.GLenum(format), C.GLenum(type_), pixels)
}

func TexParameterf(target uint32, pname uint32, param float32)  {
    C.gogl_glTexParameterf(C.GLenum(target), C.GLenum(pname), C.GLfloat(param))
}

func TexParameterfv(target uint32, pname uint32, params *float32)  {
    C.gogl_glTexParameterfv(C.GLenum(target), C.GLenum(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}

func TexParameteri(target uint32, pname uint32, param int32)  {
    C.gogl_glTexParameteri(C.GLenum(target), C.GLenum(pname), C.GLint(param))
}

func TexParameteriv(target uint32, pname uint32, params *int32)  {
    C.gogl_glTexParameteriv(C.GLenum(target), C.GLenum(pname), (*C.GLint)(unsafe.Pointer(params)))
}

func Translated(x float64, y float64, z float64)  {
    C.gogl_glTranslated(C.GLdouble(x), C.GLdouble(y), C.GLdouble(z))
}

func Translatef(x float32, y float32, z float32)  {
    C.gogl_glTranslatef(C.GLfloat(x), C.GLfloat(y), C.GLfloat(z))
}

func Vertex2d(x float64, y float64)  {
    C.gogl_glVertex2d(C.GLdouble(x), C.GLdouble(y))
}

func Vertex2dv(v *float64)  {
    C.gogl_glVertex2dv((*C.GLdouble)(unsafe.Pointer(v)))
}

func Vertex2f(x float32, y float32)  {
    C.gogl_glVertex2f(C.GLfloat(x), C.GLfloat(y))
}

func Vertex2fv(v *float32)  {
    C.gogl_glVertex2fv((*C.GLfloat)(unsafe.Pointer(v)))
}

func Vertex2i(x int32, y int32)  {
    C.gogl_glVertex2i(C.GLint(x), C.GLint(y))
}

func Vertex2iv(v *int32)  {
    C.gogl_glVertex2iv((*C.GLint)(unsafe.Pointer(v)))
}

func Vertex2s(x int16, y int16)  {
    C.gogl_glVertex2s(C.GLshort(x), C.GLshort(y))
}

func Vertex2sv(v *int16)  {
    C.gogl_glVertex2sv((*C.GLshort)(unsafe.Pointer(v)))
}

func Vertex3d(x float64, y float64, z float64)  {
    C.gogl_glVertex3d(C.GLdouble(x), C.GLdouble(y), C.GLdouble(z))
}

func Vertex3dv(v *float64)  {
    C.gogl_glVertex3dv((*C.GLdouble)(unsafe.Pointer(v)))
}

func Vertex3f(x float32, y float32, z float32)  {
    C.gogl_glVertex3f(C.GLfloat(x), C.GLfloat(y), C.GLfloat(z))
}

func Vertex3fv(v *float32)  {
    C.gogl_glVertex3fv((*C.GLfloat)(unsafe.Pointer(v)))
}

func Vertex3i(x int32, y int32, z int32)  {
    C.gogl_glVertex3i(C.GLint(x), C.GLint(y), C.GLint(z))
}

func Vertex3iv(v *int32)  {
    C.gogl_glVertex3iv((*C.GLint)(unsafe.Pointer(v)))
}

func Vertex3s(x int16, y int16, z int16)  {
    C.gogl_glVertex3s(C.GLshort(x), C.GLshort(y), C.GLshort(z))
}

func Vertex3sv(v *int16)  {
    C.gogl_glVertex3sv((*C.GLshort)(unsafe.Pointer(v)))
}

func Vertex4d(x float64, y float64, z float64, w float64)  {
    C.gogl_glVertex4d(C.GLdouble(x), C.GLdouble(y), C.GLdouble(z), C.GLdouble(w))
}

func Vertex4dv(v *float64)  {
    C.gogl_glVertex4dv((*C.GLdouble)(unsafe.Pointer(v)))
}

func Vertex4f(x float32, y float32, z float32, w float32)  {
    C.gogl_glVertex4f(C.GLfloat(x), C.GLfloat(y), C.GLfloat(z), C.GLfloat(w))
}

func Vertex4fv(v *float32)  {
    C.gogl_glVertex4fv((*C.GLfloat)(unsafe.Pointer(v)))
}

func Vertex4i(x int32, y int32, z int32, w int32)  {
    C.gogl_glVertex4i(C.GLint(x), C.GLint(y), C.GLint(z), C.GLint(w))
}

func Vertex4iv(v *int32)  {
    C.gogl_glVertex4iv((*C.GLint)(unsafe.Pointer(v)))
}

func Vertex4s(x int16, y int16, z int16, w int16)  {
    C.gogl_glVertex4s(C.GLshort(x), C.GLshort(y), C.GLshort(z), C.GLshort(w))
}

func Vertex4sv(v *int16)  {
    C.gogl_glVertex4sv((*C.GLshort)(unsafe.Pointer(v)))
}

func Viewport(x int32, y int32, width int32, height int32)  {
    C.gogl_glViewport(C.GLint(x), C.GLint(y), C.GLsizei(width), C.GLsizei(height))
}

func AreTexturesResident(n int32, textures *uint32, residences *byte) byte {
    ret := C.gogl_glAreTexturesResident(C.GLsizei(n), (*C.GLuint)(unsafe.Pointer(textures)), (*C.GLboolean)(unsafe.Pointer(residences)))
    return byte(ret)
}

func ArrayElement(i int32)  {
    C.gogl_glArrayElement(C.GLint(i))
}

func BindTexture(target uint32, texture uint32)  {
    C.gogl_glBindTexture(C.GLenum(target), C.GLuint(texture))
}

func ColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)  {
    C.gogl_glColorPointer(C.GLint(size), C.GLenum(type_), C.GLsizei(stride), pointer)
}

func CopyTexImage1D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32)  {
    C.gogl_glCopyTexImage1D(C.GLenum(target), C.GLint(level), C.GLenum(internalformat), C.GLint(x), C.GLint(y), C.GLsizei(width), C.GLint(border))
}

func CopyTexImage2D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32)  {
    C.gogl_glCopyTexImage2D(C.GLenum(target), C.GLint(level), C.GLenum(internalformat), C.GLint(x), C.GLint(y), C.GLsizei(width), C.GLsizei(height), C.GLint(border))
}

func CopyTexSubImage1D(target uint32, level int32, xoffset int32, x int32, y int32, width int32)  {
    C.gogl_glCopyTexSubImage1D(C.GLenum(target), C.GLint(level), C.GLint(xoffset), C.GLint(x), C.GLint(y), C.GLsizei(width))
}

func CopyTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32)  {
    C.gogl_glCopyTexSubImage2D(C.GLenum(target), C.GLint(level), C.GLint(xoffset), C.GLint(yoffset), C.GLint(x), C.GLint(y), C.GLsizei(width), C.GLsizei(height))
}

func DeleteTextures(n int32, textures *uint32)  {
    C.gogl_glDeleteTextures(C.GLsizei(n), (*C.GLuint)(unsafe.Pointer(textures)))
}

func DisableClientState(array uint32)  {
    C.gogl_glDisableClientState(C.GLenum(array))
}

func DrawArrays(mode uint32, first int32, count int32)  {
    C.gogl_glDrawArrays(C.GLenum(mode), C.GLint(first), C.GLsizei(count))
}

func DrawElements(mode uint32, count int32, type_ uint32, indices unsafe.Pointer)  {
    C.gogl_glDrawElements(C.GLenum(mode), C.GLsizei(count), C.GLenum(type_), indices)
}

func EdgeFlagPointer(stride int32, pointer unsafe.Pointer)  {
    C.gogl_glEdgeFlagPointer(C.GLsizei(stride), pointer)
}

func EnableClientState(array uint32)  {
    C.gogl_glEnableClientState(C.GLenum(array))
}

func GenTextures(n int32, textures *uint32)  {
    C.gogl_glGenTextures(C.GLsizei(n), (*C.GLuint)(unsafe.Pointer(textures)))
}

func GetPointerv(pname uint32, params *unsafe.Pointer)  {
    C.gogl_glGetPointerv(C.GLenum(pname), params)
}

func IndexPointer(type_ uint32, stride int32, pointer unsafe.Pointer)  {
    C.gogl_glIndexPointer(C.GLenum(type_), C.GLsizei(stride), pointer)
}

func Indexub(c uint8)  {
    C.gogl_glIndexub(C.GLubyte(c))
}

func Indexubv(c *uint8)  {
    C.gogl_glIndexubv((*C.GLubyte)(unsafe.Pointer(c)))
}

func InterleavedArrays(format uint32, stride int32, pointer unsafe.Pointer)  {
    C.gogl_glInterleavedArrays(C.GLenum(format), C.GLsizei(stride), pointer)
}

func IsTexture(texture uint32) byte {
    ret := C.gogl_glIsTexture(C.GLuint(texture))
    return byte(ret)
}

func NormalPointer(type_ uint32, stride int32, pointer unsafe.Pointer)  {
    C.gogl_glNormalPointer(C.GLenum(type_), C.GLsizei(stride), pointer)
}

func PolygonOffset(factor float32, units float32)  {
    C.gogl_glPolygonOffset(C.GLfloat(factor), C.GLfloat(units))
}

func PopClientAttrib()  {
    C.gogl_glPopClientAttrib()
}

func PrioritizeTextures(n int32, textures *uint32, priorities *float32)  {
    C.gogl_glPrioritizeTextures(C.GLsizei(n), (*C.GLuint)(unsafe.Pointer(textures)), (*C.GLfloat)(unsafe.Pointer(priorities)))
}

func PushClientAttrib(mask uint32)  {
    C.gogl_glPushClientAttrib(C.GLbitfield(mask))
}

func TexCoordPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)  {
    C.gogl_glTexCoordPointer(C.GLint(size), C.GLenum(type_), C.GLsizei(stride), pointer)
}

func TexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, type_ uint32, pixels unsafe.Pointer)  {
    C.gogl_glTexSubImage1D(C.GLenum(target), C.GLint(level), C.GLint(xoffset), C.GLsizei(width), C.GLenum(format), C.GLenum(type_), pixels)
}

func TexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)  {
    C.gogl_glTexSubImage2D(C.GLenum(target), C.GLint(level), C.GLint(xoffset), C.GLint(yoffset), C.GLsizei(width), C.GLsizei(height), C.GLenum(format), C.GLenum(type_), pixels)
}

func VertexPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)  {
    C.gogl_glVertexPointer(C.GLint(size), C.GLenum(type_), C.GLsizei(stride), pointer)
}

func CopyTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32)  {
    C.gogl_glCopyTexSubImage3D(C.GLenum(target), C.GLint(level), C.GLint(xoffset), C.GLint(yoffset), C.GLint(zoffset), C.GLint(x), C.GLint(y), C.GLsizei(width), C.GLsizei(height))
}

func DrawRangeElements(mode uint32, start uint32, end uint32, count int32, type_ uint32, indices unsafe.Pointer)  {
    C.gogl_glDrawRangeElements(C.GLenum(mode), C.GLuint(start), C.GLuint(end), C.GLsizei(count), C.GLenum(type_), indices)
}

func TexImage3D(target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)  {
    C.gogl_glTexImage3D(C.GLenum(target), C.GLint(level), C.GLint(internalformat), C.GLsizei(width), C.GLsizei(height), C.GLsizei(depth), C.GLint(border), C.GLenum(format), C.GLenum(type_), pixels)
}

func TexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, type_ uint32, pixels unsafe.Pointer)  {
    C.gogl_glTexSubImage3D(C.GLenum(target), C.GLint(level), C.GLint(xoffset), C.GLint(yoffset), C.GLint(zoffset), C.GLsizei(width), C.GLsizei(height), C.GLsizei(depth), C.GLenum(format), C.GLenum(type_), pixels)
}

func ActiveTexture(texture uint32)  {
    C.gogl_glActiveTexture(C.GLenum(texture))
}

func ClientActiveTexture(texture uint32)  {
    C.gogl_glClientActiveTexture(C.GLenum(texture))
}

func CompressedTexImage1D(target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, data unsafe.Pointer)  {
    C.gogl_glCompressedTexImage1D(C.GLenum(target), C.GLint(level), C.GLenum(internalformat), C.GLsizei(width), C.GLint(border), C.GLsizei(imageSize), data)
}

func CompressedTexImage2D(target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, data unsafe.Pointer)  {
    C.gogl_glCompressedTexImage2D(C.GLenum(target), C.GLint(level), C.GLenum(internalformat), C.GLsizei(width), C.GLsizei(height), C.GLint(border), C.GLsizei(imageSize), data)
}

func CompressedTexImage3D(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, data unsafe.Pointer)  {
    C.gogl_glCompressedTexImage3D(C.GLenum(target), C.GLint(level), C.GLenum(internalformat), C.GLsizei(width), C.GLsizei(height), C.GLsizei(depth), C.GLint(border), C.GLsizei(imageSize), data)
}

func CompressedTexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, data unsafe.Pointer)  {
    C.gogl_glCompressedTexSubImage1D(C.GLenum(target), C.GLint(level), C.GLint(xoffset), C.GLsizei(width), C.GLenum(format), C.GLsizei(imageSize), data)
}

func CompressedTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer)  {
    C.gogl_glCompressedTexSubImage2D(C.GLenum(target), C.GLint(level), C.GLint(xoffset), C.GLint(yoffset), C.GLsizei(width), C.GLsizei(height), C.GLenum(format), C.GLsizei(imageSize), data)
}

func CompressedTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer)  {
    C.gogl_glCompressedTexSubImage3D(C.GLenum(target), C.GLint(level), C.GLint(xoffset), C.GLint(yoffset), C.GLint(zoffset), C.GLsizei(width), C.GLsizei(height), C.GLsizei(depth), C.GLenum(format), C.GLsizei(imageSize), data)
}

func GetCompressedTexImage(target uint32, level int32, img unsafe.Pointer)  {
    C.gogl_glGetCompressedTexImage(C.GLenum(target), C.GLint(level), img)
}

func LoadTransposeMatrixd(m *float64)  {
    C.gogl_glLoadTransposeMatrixd((*C.GLdouble)(unsafe.Pointer(m)))
}

func LoadTransposeMatrixf(m *float32)  {
    C.gogl_glLoadTransposeMatrixf((*C.GLfloat)(unsafe.Pointer(m)))
}

func MultTransposeMatrixd(m *float64)  {
    C.gogl_glMultTransposeMatrixd((*C.GLdouble)(unsafe.Pointer(m)))
}

func MultTransposeMatrixf(m *float32)  {
    C.gogl_glMultTransposeMatrixf((*C.GLfloat)(unsafe.Pointer(m)))
}

func MultiTexCoord1d(target uint32, s float64)  {
    C.gogl_glMultiTexCoord1d(C.GLenum(target), C.GLdouble(s))
}

func MultiTexCoord1dv(target uint32, v *float64)  {
    C.gogl_glMultiTexCoord1dv(C.GLenum(target), (*C.GLdouble)(unsafe.Pointer(v)))
}

func MultiTexCoord1f(target uint32, s float32)  {
    C.gogl_glMultiTexCoord1f(C.GLenum(target), C.GLfloat(s))
}

func MultiTexCoord1fv(target uint32, v *float32)  {
    C.gogl_glMultiTexCoord1fv(C.GLenum(target), (*C.GLfloat)(unsafe.Pointer(v)))
}

func MultiTexCoord1i(target uint32, s int32)  {
    C.gogl_glMultiTexCoord1i(C.GLenum(target), C.GLint(s))
}

func MultiTexCoord1iv(target uint32, v *int32)  {
    C.gogl_glMultiTexCoord1iv(C.GLenum(target), (*C.GLint)(unsafe.Pointer(v)))
}

func MultiTexCoord1s(target uint32, s int16)  {
    C.gogl_glMultiTexCoord1s(C.GLenum(target), C.GLshort(s))
}

func MultiTexCoord1sv(target uint32, v *int16)  {
    C.gogl_glMultiTexCoord1sv(C.GLenum(target), (*C.GLshort)(unsafe.Pointer(v)))
}

func MultiTexCoord2d(target uint32, s float64, t float64)  {
    C.gogl_glMultiTexCoord2d(C.GLenum(target), C.GLdouble(s), C.GLdouble(t))
}

func MultiTexCoord2dv(target uint32, v *float64)  {
    C.gogl_glMultiTexCoord2dv(C.GLenum(target), (*C.GLdouble)(unsafe.Pointer(v)))
}

func MultiTexCoord2f(target uint32, s float32, t float32)  {
    C.gogl_glMultiTexCoord2f(C.GLenum(target), C.GLfloat(s), C.GLfloat(t))
}

func MultiTexCoord2fv(target uint32, v *float32)  {
    C.gogl_glMultiTexCoord2fv(C.GLenum(target), (*C.GLfloat)(unsafe.Pointer(v)))
}

func MultiTexCoord2i(target uint32, s int32, t int32)  {
    C.gogl_glMultiTexCoord2i(C.GLenum(target), C.GLint(s), C.GLint(t))
}

func MultiTexCoord2iv(target uint32, v *int32)  {
    C.gogl_glMultiTexCoord2iv(C.GLenum(target), (*C.GLint)(unsafe.Pointer(v)))
}

func MultiTexCoord2s(target uint32, s int16, t int16)  {
    C.gogl_glMultiTexCoord2s(C.GLenum(target), C.GLshort(s), C.GLshort(t))
}

func MultiTexCoord2sv(target uint32, v *int16)  {
    C.gogl_glMultiTexCoord2sv(C.GLenum(target), (*C.GLshort)(unsafe.Pointer(v)))
}

func MultiTexCoord3d(target uint32, s float64, t float64, r float64)  {
    C.gogl_glMultiTexCoord3d(C.GLenum(target), C.GLdouble(s), C.GLdouble(t), C.GLdouble(r))
}

func MultiTexCoord3dv(target uint32, v *float64)  {
    C.gogl_glMultiTexCoord3dv(C.GLenum(target), (*C.GLdouble)(unsafe.Pointer(v)))
}

func MultiTexCoord3f(target uint32, s float32, t float32, r float32)  {
    C.gogl_glMultiTexCoord3f(C.GLenum(target), C.GLfloat(s), C.GLfloat(t), C.GLfloat(r))
}

func MultiTexCoord3fv(target uint32, v *float32)  {
    C.gogl_glMultiTexCoord3fv(C.GLenum(target), (*C.GLfloat)(unsafe.Pointer(v)))
}

func MultiTexCoord3i(target uint32, s int32, t int32, r int32)  {
    C.gogl_glMultiTexCoord3i(C.GLenum(target), C.GLint(s), C.GLint(t), C.GLint(r))
}

func MultiTexCoord3iv(target uint32, v *int32)  {
    C.gogl_glMultiTexCoord3iv(C.GLenum(target), (*C.GLint)(unsafe.Pointer(v)))
}

func MultiTexCoord3s(target uint32, s int16, t int16, r int16)  {
    C.gogl_glMultiTexCoord3s(C.GLenum(target), C.GLshort(s), C.GLshort(t), C.GLshort(r))
}

func MultiTexCoord3sv(target uint32, v *int16)  {
    C.gogl_glMultiTexCoord3sv(C.GLenum(target), (*C.GLshort)(unsafe.Pointer(v)))
}

func MultiTexCoord4d(target uint32, s float64, t float64, r float64, q float64)  {
    C.gogl_glMultiTexCoord4d(C.GLenum(target), C.GLdouble(s), C.GLdouble(t), C.GLdouble(r), C.GLdouble(q))
}

func MultiTexCoord4dv(target uint32, v *float64)  {
    C.gogl_glMultiTexCoord4dv(C.GLenum(target), (*C.GLdouble)(unsafe.Pointer(v)))
}

func MultiTexCoord4f(target uint32, s float32, t float32, r float32, q float32)  {
    C.gogl_glMultiTexCoord4f(C.GLenum(target), C.GLfloat(s), C.GLfloat(t), C.GLfloat(r), C.GLfloat(q))
}

func MultiTexCoord4fv(target uint32, v *float32)  {
    C.gogl_glMultiTexCoord4fv(C.GLenum(target), (*C.GLfloat)(unsafe.Pointer(v)))
}

func MultiTexCoord4i(target uint32, s int32, t int32, r int32, q int32)  {
    C.gogl_glMultiTexCoord4i(C.GLenum(target), C.GLint(s), C.GLint(t), C.GLint(r), C.GLint(q))
}

func MultiTexCoord4iv(target uint32, v *int32)  {
    C.gogl_glMultiTexCoord4iv(C.GLenum(target), (*C.GLint)(unsafe.Pointer(v)))
}

func MultiTexCoord4s(target uint32, s int16, t int16, r int16, q int16)  {
    C.gogl_glMultiTexCoord4s(C.GLenum(target), C.GLshort(s), C.GLshort(t), C.GLshort(r), C.GLshort(q))
}

func MultiTexCoord4sv(target uint32, v *int16)  {
    C.gogl_glMultiTexCoord4sv(C.GLenum(target), (*C.GLshort)(unsafe.Pointer(v)))
}

func SampleCoverage(value float32, invert byte)  {
    C.gogl_glSampleCoverage(C.GLfloat(value), C.GLboolean(invert))
}

func BlendColor(red float32, green float32, blue float32, alpha float32)  {
    C.gogl_glBlendColor(C.GLfloat(red), C.GLfloat(green), C.GLfloat(blue), C.GLfloat(alpha))
}

func BlendEquation(mode uint32)  {
    C.gogl_glBlendEquation(C.GLenum(mode))
}

func BlendFuncSeparate(sfactorRGB uint32, dfactorRGB uint32, sfactorAlpha uint32, dfactorAlpha uint32)  {
    C.gogl_glBlendFuncSeparate(C.GLenum(sfactorRGB), C.GLenum(dfactorRGB), C.GLenum(sfactorAlpha), C.GLenum(dfactorAlpha))
}

func FogCoordPointer(type_ uint32, stride int32, pointer unsafe.Pointer)  {
    C.gogl_glFogCoordPointer(C.GLenum(type_), C.GLsizei(stride), pointer)
}

func FogCoordd(coord float64)  {
    C.gogl_glFogCoordd(C.GLdouble(coord))
}

func FogCoorddv(coord *float64)  {
    C.gogl_glFogCoorddv((*C.GLdouble)(unsafe.Pointer(coord)))
}

func FogCoordf(coord float32)  {
    C.gogl_glFogCoordf(C.GLfloat(coord))
}

func FogCoordfv(coord *float32)  {
    C.gogl_glFogCoordfv((*C.GLfloat)(unsafe.Pointer(coord)))
}

func MultiDrawArrays(mode uint32, first *int32, count *int32, drawcount int32)  {
    C.gogl_glMultiDrawArrays(C.GLenum(mode), (*C.GLint)(unsafe.Pointer(first)), (*C.GLsizei)(unsafe.Pointer(count)), C.GLsizei(drawcount))
}

func MultiDrawElements(mode uint32, count *int32, type_ uint32, indices *unsafe.Pointer, drawcount int32)  {
    C.gogl_glMultiDrawElements(C.GLenum(mode), (*C.GLsizei)(unsafe.Pointer(count)), C.GLenum(type_), indices, C.GLsizei(drawcount))
}

func PointParameterf(pname uint32, param float32)  {
    C.gogl_glPointParameterf(C.GLenum(pname), C.GLfloat(param))
}

func PointParameterfv(pname uint32, params *float32)  {
    C.gogl_glPointParameterfv(C.GLenum(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}

func PointParameteri(pname uint32, param int32)  {
    C.gogl_glPointParameteri(C.GLenum(pname), C.GLint(param))
}

func PointParameteriv(pname uint32, params *int32)  {
    C.gogl_glPointParameteriv(C.GLenum(pname), (*C.GLint)(unsafe.Pointer(params)))
}

func SecondaryColor3b(red int8, green int8, blue int8)  {
    C.gogl_glSecondaryColor3b(C.GLbyte(red), C.GLbyte(green), C.GLbyte(blue))
}

func SecondaryColor3bv(v *int8)  {
    C.gogl_glSecondaryColor3bv((*C.GLbyte)(unsafe.Pointer(v)))
}

func SecondaryColor3d(red float64, green float64, blue float64)  {
    C.gogl_glSecondaryColor3d(C.GLdouble(red), C.GLdouble(green), C.GLdouble(blue))
}

func SecondaryColor3dv(v *float64)  {
    C.gogl_glSecondaryColor3dv((*C.GLdouble)(unsafe.Pointer(v)))
}

func SecondaryColor3f(red float32, green float32, blue float32)  {
    C.gogl_glSecondaryColor3f(C.GLfloat(red), C.GLfloat(green), C.GLfloat(blue))
}

func SecondaryColor3fv(v *float32)  {
    C.gogl_glSecondaryColor3fv((*C.GLfloat)(unsafe.Pointer(v)))
}

func SecondaryColor3i(red int32, green int32, blue int32)  {
    C.gogl_glSecondaryColor3i(C.GLint(red), C.GLint(green), C.GLint(blue))
}

func SecondaryColor3iv(v *int32)  {
    C.gogl_glSecondaryColor3iv((*C.GLint)(unsafe.Pointer(v)))
}

func SecondaryColor3s(red int16, green int16, blue int16)  {
    C.gogl_glSecondaryColor3s(C.GLshort(red), C.GLshort(green), C.GLshort(blue))
}

func SecondaryColor3sv(v *int16)  {
    C.gogl_glSecondaryColor3sv((*C.GLshort)(unsafe.Pointer(v)))
}

func SecondaryColor3ub(red uint8, green uint8, blue uint8)  {
    C.gogl_glSecondaryColor3ub(C.GLubyte(red), C.GLubyte(green), C.GLubyte(blue))
}

func SecondaryColor3ubv(v *uint8)  {
    C.gogl_glSecondaryColor3ubv((*C.GLubyte)(unsafe.Pointer(v)))
}

func SecondaryColor3ui(red uint32, green uint32, blue uint32)  {
    C.gogl_glSecondaryColor3ui(C.GLuint(red), C.GLuint(green), C.GLuint(blue))
}

func SecondaryColor3uiv(v *uint32)  {
    C.gogl_glSecondaryColor3uiv((*C.GLuint)(unsafe.Pointer(v)))
}

func SecondaryColor3us(red uint16, green uint16, blue uint16)  {
    C.gogl_glSecondaryColor3us(C.GLushort(red), C.GLushort(green), C.GLushort(blue))
}

func SecondaryColor3usv(v *uint16)  {
    C.gogl_glSecondaryColor3usv((*C.GLushort)(unsafe.Pointer(v)))
}

func SecondaryColorPointer(size int32, type_ uint32, stride int32, pointer unsafe.Pointer)  {
    C.gogl_glSecondaryColorPointer(C.GLint(size), C.GLenum(type_), C.GLsizei(stride), pointer)
}

func WindowPos2d(x float64, y float64)  {
    C.gogl_glWindowPos2d(C.GLdouble(x), C.GLdouble(y))
}

func WindowPos2dv(v *float64)  {
    C.gogl_glWindowPos2dv((*C.GLdouble)(unsafe.Pointer(v)))
}

func WindowPos2f(x float32, y float32)  {
    C.gogl_glWindowPos2f(C.GLfloat(x), C.GLfloat(y))
}

func WindowPos2fv(v *float32)  {
    C.gogl_glWindowPos2fv((*C.GLfloat)(unsafe.Pointer(v)))
}

func WindowPos2i(x int32, y int32)  {
    C.gogl_glWindowPos2i(C.GLint(x), C.GLint(y))
}

func WindowPos2iv(v *int32)  {
    C.gogl_glWindowPos2iv((*C.GLint)(unsafe.Pointer(v)))
}

func WindowPos2s(x int16, y int16)  {
    C.gogl_glWindowPos2s(C.GLshort(x), C.GLshort(y))
}

func WindowPos2sv(v *int16)  {
    C.gogl_glWindowPos2sv((*C.GLshort)(unsafe.Pointer(v)))
}

func WindowPos3d(x float64, y float64, z float64)  {
    C.gogl_glWindowPos3d(C.GLdouble(x), C.GLdouble(y), C.GLdouble(z))
}

func WindowPos3dv(v *float64)  {
    C.gogl_glWindowPos3dv((*C.GLdouble)(unsafe.Pointer(v)))
}

func WindowPos3f(x float32, y float32, z float32)  {
    C.gogl_glWindowPos3f(C.GLfloat(x), C.GLfloat(y), C.GLfloat(z))
}

func WindowPos3fv(v *float32)  {
    C.gogl_glWindowPos3fv((*C.GLfloat)(unsafe.Pointer(v)))
}

func WindowPos3i(x int32, y int32, z int32)  {
    C.gogl_glWindowPos3i(C.GLint(x), C.GLint(y), C.GLint(z))
}

func WindowPos3iv(v *int32)  {
    C.gogl_glWindowPos3iv((*C.GLint)(unsafe.Pointer(v)))
}

func WindowPos3s(x int16, y int16, z int16)  {
    C.gogl_glWindowPos3s(C.GLshort(x), C.GLshort(y), C.GLshort(z))
}

func WindowPos3sv(v *int16)  {
    C.gogl_glWindowPos3sv((*C.GLshort)(unsafe.Pointer(v)))
}

func BeginQuery(target uint32, id uint32)  {
    C.gogl_glBeginQuery(C.GLenum(target), C.GLuint(id))
}

func BindBuffer(target uint32, buffer uint32)  {
    C.gogl_glBindBuffer(C.GLenum(target), C.GLuint(buffer))
}

func BufferData(target uint32, size int, data unsafe.Pointer, usage uint32)  {
    C.gogl_glBufferData(C.GLenum(target), C.GLsizeiptr(size), data, C.GLenum(usage))
}

func BufferSubData(target uint32, offset int, size int, data unsafe.Pointer)  {
    C.gogl_glBufferSubData(C.GLenum(target), C.GLintptr(offset), C.GLsizeiptr(size), data)
}

func DeleteBuffers(n int32, buffers *uint32)  {
    C.gogl_glDeleteBuffers(C.GLsizei(n), (*C.GLuint)(unsafe.Pointer(buffers)))
}

func DeleteQueries(n int32, ids *uint32)  {
    C.gogl_glDeleteQueries(C.GLsizei(n), (*C.GLuint)(unsafe.Pointer(ids)))
}

func EndQuery(target uint32)  {
    C.gogl_glEndQuery(C.GLenum(target))
}

func GenBuffers(n int32, buffers *uint32)  {
    C.gogl_glGenBuffers(C.GLsizei(n), (*C.GLuint)(unsafe.Pointer(buffers)))
}

func GenQueries(n int32, ids *uint32)  {
    C.gogl_glGenQueries(C.GLsizei(n), (*C.GLuint)(unsafe.Pointer(ids)))
}

func GetBufferParameteriv(target uint32, pname uint32, params *int32)  {
    C.gogl_glGetBufferParameteriv(C.GLenum(target), C.GLenum(pname), (*C.GLint)(unsafe.Pointer(params)))
}

func GetBufferPointerv(target uint32, pname uint32, params *unsafe.Pointer)  {
    C.gogl_glGetBufferPointerv(C.GLenum(target), C.GLenum(pname), params)
}

func GetBufferSubData(target uint32, offset int, size int, data unsafe.Pointer)  {
    C.gogl_glGetBufferSubData(C.GLenum(target), C.GLintptr(offset), C.GLsizeiptr(size), data)
}

func GetQueryObjectiv(id uint32, pname uint32, params *int32)  {
    C.gogl_glGetQueryObjectiv(C.GLuint(id), C.GLenum(pname), (*C.GLint)(unsafe.Pointer(params)))
}

func GetQueryObjectuiv(id uint32, pname uint32, params *uint32)  {
    C.gogl_glGetQueryObjectuiv(C.GLuint(id), C.GLenum(pname), (*C.GLuint)(unsafe.Pointer(params)))
}

func GetQueryiv(target uint32, pname uint32, params *int32)  {
    C.gogl_glGetQueryiv(C.GLenum(target), C.GLenum(pname), (*C.GLint)(unsafe.Pointer(params)))
}

func IsBuffer(buffer uint32) byte {
    ret := C.gogl_glIsBuffer(C.GLuint(buffer))
    return byte(ret)
}

func IsQuery(id uint32) byte {
    ret := C.gogl_glIsQuery(C.GLuint(id))
    return byte(ret)
}

func MapBuffer(target uint32, access uint32)  {
    C.gogl_glMapBuffer(C.GLenum(target), C.GLenum(access))
}

func UnmapBuffer(target uint32) byte {
    ret := C.gogl_glUnmapBuffer(C.GLenum(target))
    return byte(ret)
}

func AttachShader(program uint32, shader uint32)  {
    C.gogl_glAttachShader(C.GLuint(program), C.GLuint(shader))
}

func BindAttribLocation(program uint32, index uint32, name *int8)  {
    C.gogl_glBindAttribLocation(C.GLuint(program), C.GLuint(index), (*C.GLchar)(unsafe.Pointer(name)))
}

func BlendEquationSeparate(modeRGB uint32, modeAlpha uint32)  {
    C.gogl_glBlendEquationSeparate(C.GLenum(modeRGB), C.GLenum(modeAlpha))
}

func CompileShader(shader uint32)  {
    C.gogl_glCompileShader(C.GLuint(shader))
}

func CreateProgram() uint32 {
    ret := C.gogl_glCreateProgram()
    return uint32(ret)
}

func CreateShader(type_ uint32) uint32 {
    ret := C.gogl_glCreateShader(C.GLenum(type_))
    return uint32(ret)
}

func DeleteProgram(program uint32)  {
    C.gogl_glDeleteProgram(C.GLuint(program))
}

func DeleteShader(shader uint32)  {
    C.gogl_glDeleteShader(C.GLuint(shader))
}

func DetachShader(program uint32, shader uint32)  {
    C.gogl_glDetachShader(C.GLuint(program), C.GLuint(shader))
}

func DisableVertexAttribArray(index uint32)  {
    C.gogl_glDisableVertexAttribArray(C.GLuint(index))
}

func DrawBuffers(n int32, bufs *uint32)  {
    C.gogl_glDrawBuffers(C.GLsizei(n), (*C.GLenum)(unsafe.Pointer(bufs)))
}

func EnableVertexAttribArray(index uint32)  {
    C.gogl_glEnableVertexAttribArray(C.GLuint(index))
}

func GetActiveAttrib(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *int8)  {
    C.gogl_glGetActiveAttrib(C.GLuint(program), C.GLuint(index), C.GLsizei(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLint)(unsafe.Pointer(size)), (*C.GLenum)(unsafe.Pointer(type_)), (*C.GLchar)(unsafe.Pointer(name)))
}

func GetActiveUniform(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *int8)  {
    C.gogl_glGetActiveUniform(C.GLuint(program), C.GLuint(index), C.GLsizei(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLint)(unsafe.Pointer(size)), (*C.GLenum)(unsafe.Pointer(type_)), (*C.GLchar)(unsafe.Pointer(name)))
}

func GetAttachedShaders(program uint32, maxCount int32, count *int32, shaders *uint32)  {
    C.gogl_glGetAttachedShaders(C.GLuint(program), C.GLsizei(maxCount), (*C.GLsizei)(unsafe.Pointer(count)), (*C.GLuint)(unsafe.Pointer(shaders)))
}

func GetAttribLocation(program uint32, name *int8) int32 {
    ret := C.gogl_glGetAttribLocation(C.GLuint(program), (*C.GLchar)(unsafe.Pointer(name)))
    return int32(ret)
}

func GetProgramInfoLog(program uint32, bufSize int32, length *int32, infoLog *int8)  {
    C.gogl_glGetProgramInfoLog(C.GLuint(program), C.GLsizei(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(infoLog)))
}

func GetProgramiv(program uint32, pname uint32, params *int32)  {
    C.gogl_glGetProgramiv(C.GLuint(program), C.GLenum(pname), (*C.GLint)(unsafe.Pointer(params)))
}

func GetShaderInfoLog(shader uint32, bufSize int32, length *int32, infoLog *int8)  {
    C.gogl_glGetShaderInfoLog(C.GLuint(shader), C.GLsizei(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(infoLog)))
}

func GetShaderSource(shader uint32, bufSize int32, length *int32, source *int8)  {
    C.gogl_glGetShaderSource(C.GLuint(shader), C.GLsizei(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(source)))
}

func GetShaderiv(shader uint32, pname uint32, params *int32)  {
    C.gogl_glGetShaderiv(C.GLuint(shader), C.GLenum(pname), (*C.GLint)(unsafe.Pointer(params)))
}

func GetUniformLocation(program uint32, name *int8) int32 {
    ret := C.gogl_glGetUniformLocation(C.GLuint(program), (*C.GLchar)(unsafe.Pointer(name)))
    return int32(ret)
}

func GetUniformfv(program uint32, location int32, params *float32)  {
    C.gogl_glGetUniformfv(C.GLuint(program), C.GLint(location), (*C.GLfloat)(unsafe.Pointer(params)))
}

func GetUniformiv(program uint32, location int32, params *int32)  {
    C.gogl_glGetUniformiv(C.GLuint(program), C.GLint(location), (*C.GLint)(unsafe.Pointer(params)))
}

func GetVertexAttribPointerv(index uint32, pname uint32, pointer *unsafe.Pointer)  {
    C.gogl_glGetVertexAttribPointerv(C.GLuint(index), C.GLenum(pname), pointer)
}

func GetVertexAttribdv(index uint32, pname uint32, params *float64)  {
    C.gogl_glGetVertexAttribdv(C.GLuint(index), C.GLenum(pname), (*C.GLdouble)(unsafe.Pointer(params)))
}

func GetVertexAttribfv(index uint32, pname uint32, params *float32)  {
    C.gogl_glGetVertexAttribfv(C.GLuint(index), C.GLenum(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}

func GetVertexAttribiv(index uint32, pname uint32, params *int32)  {
    C.gogl_glGetVertexAttribiv(C.GLuint(index), C.GLenum(pname), (*C.GLint)(unsafe.Pointer(params)))
}

func IsProgram(program uint32) byte {
    ret := C.gogl_glIsProgram(C.GLuint(program))
    return byte(ret)
}

func IsShader(shader uint32) byte {
    ret := C.gogl_glIsShader(C.GLuint(shader))
    return byte(ret)
}

func LinkProgram(program uint32)  {
    C.gogl_glLinkProgram(C.GLuint(program))
}

func ShaderSource(shader uint32, count int32, string_ **int8, length *int32)  {
    C.gogl_glShaderSource(C.GLuint(shader), C.GLsizei(count), (**C.GLchar)(unsafe.Pointer(string_)), (*C.GLint)(unsafe.Pointer(length)))
}

func StencilFuncSeparate(face uint32, func_ uint32, ref int32, mask uint32)  {
    C.gogl_glStencilFuncSeparate(C.GLenum(face), C.GLenum(func_), C.GLint(ref), C.GLuint(mask))
}

func StencilMaskSeparate(face uint32, mask uint32)  {
    C.gogl_glStencilMaskSeparate(C.GLenum(face), C.GLuint(mask))
}

func StencilOpSeparate(face uint32, sfail uint32, dpfail uint32, dppass uint32)  {
    C.gogl_glStencilOpSeparate(C.GLenum(face), C.GLenum(sfail), C.GLenum(dpfail), C.GLenum(dppass))
}

func Uniform1f(location int32, v0 float32)  {
    C.gogl_glUniform1f(C.GLint(location), C.GLfloat(v0))
}

func Uniform1fv(location int32, count int32, value *float32)  {
    C.gogl_glUniform1fv(C.GLint(location), C.GLsizei(count), (*C.GLfloat)(unsafe.Pointer(value)))
}

func Uniform1i(location int32, v0 int32)  {
    C.gogl_glUniform1i(C.GLint(location), C.GLint(v0))
}

func Uniform1iv(location int32, count int32, value *int32)  {
    C.gogl_glUniform1iv(C.GLint(location), C.GLsizei(count), (*C.GLint)(unsafe.Pointer(value)))
}

func Uniform2f(location int32, v0 float32, v1 float32)  {
    C.gogl_glUniform2f(C.GLint(location), C.GLfloat(v0), C.GLfloat(v1))
}

func Uniform2fv(location int32, count int32, value *float32)  {
    C.gogl_glUniform2fv(C.GLint(location), C.GLsizei(count), (*C.GLfloat)(unsafe.Pointer(value)))
}

func Uniform2i(location int32, v0 int32, v1 int32)  {
    C.gogl_glUniform2i(C.GLint(location), C.GLint(v0), C.GLint(v1))
}

func Uniform2iv(location int32, count int32, value *int32)  {
    C.gogl_glUniform2iv(C.GLint(location), C.GLsizei(count), (*C.GLint)(unsafe.Pointer(value)))
}

func Uniform3f(location int32, v0 float32, v1 float32, v2 float32)  {
    C.gogl_glUniform3f(C.GLint(location), C.GLfloat(v0), C.GLfloat(v1), C.GLfloat(v2))
}

func Uniform3fv(location int32, count int32, value *float32)  {
    C.gogl_glUniform3fv(C.GLint(location), C.GLsizei(count), (*C.GLfloat)(unsafe.Pointer(value)))
}

func Uniform3i(location int32, v0 int32, v1 int32, v2 int32)  {
    C.gogl_glUniform3i(C.GLint(location), C.GLint(v0), C.GLint(v1), C.GLint(v2))
}

func Uniform3iv(location int32, count int32, value *int32)  {
    C.gogl_glUniform3iv(C.GLint(location), C.GLsizei(count), (*C.GLint)(unsafe.Pointer(value)))
}

func Uniform4f(location int32, v0 float32, v1 float32, v2 float32, v3 float32)  {
    C.gogl_glUniform4f(C.GLint(location), C.GLfloat(v0), C.GLfloat(v1), C.GLfloat(v2), C.GLfloat(v3))
}

func Uniform4fv(location int32, count int32, value *float32)  {
    C.gogl_glUniform4fv(C.GLint(location), C.GLsizei(count), (*C.GLfloat)(unsafe.Pointer(value)))
}

func Uniform4i(location int32, v0 int32, v1 int32, v2 int32, v3 int32)  {
    C.gogl_glUniform4i(C.GLint(location), C.GLint(v0), C.GLint(v1), C.GLint(v2), C.GLint(v3))
}

func Uniform4iv(location int32, count int32, value *int32)  {
    C.gogl_glUniform4iv(C.GLint(location), C.GLsizei(count), (*C.GLint)(unsafe.Pointer(value)))
}

func UniformMatrix2fv(location int32, count int32, transpose byte, value *float32)  {
    C.gogl_glUniformMatrix2fv(C.GLint(location), C.GLsizei(count), C.GLboolean(transpose), (*C.GLfloat)(unsafe.Pointer(value)))
}

func UniformMatrix3fv(location int32, count int32, transpose byte, value *float32)  {
    C.gogl_glUniformMatrix3fv(C.GLint(location), C.GLsizei(count), C.GLboolean(transpose), (*C.GLfloat)(unsafe.Pointer(value)))
}

func UniformMatrix4fv(location int32, count int32, transpose byte, value *float32)  {
    C.gogl_glUniformMatrix4fv(C.GLint(location), C.GLsizei(count), C.GLboolean(transpose), (*C.GLfloat)(unsafe.Pointer(value)))
}

func UseProgram(program uint32)  {
    C.gogl_glUseProgram(C.GLuint(program))
}

func ValidateProgram(program uint32)  {
    C.gogl_glValidateProgram(C.GLuint(program))
}

func VertexAttrib1d(index uint32, x float64)  {
    C.gogl_glVertexAttrib1d(C.GLuint(index), C.GLdouble(x))
}

func VertexAttrib1dv(index uint32, v *float64)  {
    C.gogl_glVertexAttrib1dv(C.GLuint(index), (*C.GLdouble)(unsafe.Pointer(v)))
}

func VertexAttrib1f(index uint32, x float32)  {
    C.gogl_glVertexAttrib1f(C.GLuint(index), C.GLfloat(x))
}

func VertexAttrib1fv(index uint32, v *float32)  {
    C.gogl_glVertexAttrib1fv(C.GLuint(index), (*C.GLfloat)(unsafe.Pointer(v)))
}

func VertexAttrib1s(index uint32, x int16)  {
    C.gogl_glVertexAttrib1s(C.GLuint(index), C.GLshort(x))
}

func VertexAttrib1sv(index uint32, v *int16)  {
    C.gogl_glVertexAttrib1sv(C.GLuint(index), (*C.GLshort)(unsafe.Pointer(v)))
}

func VertexAttrib2d(index uint32, x float64, y float64)  {
    C.gogl_glVertexAttrib2d(C.GLuint(index), C.GLdouble(x), C.GLdouble(y))
}

func VertexAttrib2dv(index uint32, v *float64)  {
    C.gogl_glVertexAttrib2dv(C.GLuint(index), (*C.GLdouble)(unsafe.Pointer(v)))
}

func VertexAttrib2f(index uint32, x float32, y float32)  {
    C.gogl_glVertexAttrib2f(C.GLuint(index), C.GLfloat(x), C.GLfloat(y))
}

func VertexAttrib2fv(index uint32, v *float32)  {
    C.gogl_glVertexAttrib2fv(C.GLuint(index), (*C.GLfloat)(unsafe.Pointer(v)))
}

func VertexAttrib2s(index uint32, x int16, y int16)  {
    C.gogl_glVertexAttrib2s(C.GLuint(index), C.GLshort(x), C.GLshort(y))
}

func VertexAttrib2sv(index uint32, v *int16)  {
    C.gogl_glVertexAttrib2sv(C.GLuint(index), (*C.GLshort)(unsafe.Pointer(v)))
}

func VertexAttrib3d(index uint32, x float64, y float64, z float64)  {
    C.gogl_glVertexAttrib3d(C.GLuint(index), C.GLdouble(x), C.GLdouble(y), C.GLdouble(z))
}

func VertexAttrib3dv(index uint32, v *float64)  {
    C.gogl_glVertexAttrib3dv(C.GLuint(index), (*C.GLdouble)(unsafe.Pointer(v)))
}

func VertexAttrib3f(index uint32, x float32, y float32, z float32)  {
    C.gogl_glVertexAttrib3f(C.GLuint(index), C.GLfloat(x), C.GLfloat(y), C.GLfloat(z))
}

func VertexAttrib3fv(index uint32, v *float32)  {
    C.gogl_glVertexAttrib3fv(C.GLuint(index), (*C.GLfloat)(unsafe.Pointer(v)))
}

func VertexAttrib3s(index uint32, x int16, y int16, z int16)  {
    C.gogl_glVertexAttrib3s(C.GLuint(index), C.GLshort(x), C.GLshort(y), C.GLshort(z))
}

func VertexAttrib3sv(index uint32, v *int16)  {
    C.gogl_glVertexAttrib3sv(C.GLuint(index), (*C.GLshort)(unsafe.Pointer(v)))
}

func VertexAttrib4Nbv(index uint32, v *int8)  {
    C.gogl_glVertexAttrib4Nbv(C.GLuint(index), (*C.GLbyte)(unsafe.Pointer(v)))
}

func VertexAttrib4Niv(index uint32, v *int32)  {
    C.gogl_glVertexAttrib4Niv(C.GLuint(index), (*C.GLint)(unsafe.Pointer(v)))
}

func VertexAttrib4Nsv(index uint32, v *int16)  {
    C.gogl_glVertexAttrib4Nsv(C.GLuint(index), (*C.GLshort)(unsafe.Pointer(v)))
}

func VertexAttrib4Nub(index uint32, x uint8, y uint8, z uint8, w uint8)  {
    C.gogl_glVertexAttrib4Nub(C.GLuint(index), C.GLubyte(x), C.GLubyte(y), C.GLubyte(z), C.GLubyte(w))
}

func VertexAttrib4Nubv(index uint32, v *uint8)  {
    C.gogl_glVertexAttrib4Nubv(C.GLuint(index), (*C.GLubyte)(unsafe.Pointer(v)))
}

func VertexAttrib4Nuiv(index uint32, v *uint32)  {
    C.gogl_glVertexAttrib4Nuiv(C.GLuint(index), (*C.GLuint)(unsafe.Pointer(v)))
}

func VertexAttrib4Nusv(index uint32, v *uint16)  {
    C.gogl_glVertexAttrib4Nusv(C.GLuint(index), (*C.GLushort)(unsafe.Pointer(v)))
}

func VertexAttrib4bv(index uint32, v *int8)  {
    C.gogl_glVertexAttrib4bv(C.GLuint(index), (*C.GLbyte)(unsafe.Pointer(v)))
}

func VertexAttrib4d(index uint32, x float64, y float64, z float64, w float64)  {
    C.gogl_glVertexAttrib4d(C.GLuint(index), C.GLdouble(x), C.GLdouble(y), C.GLdouble(z), C.GLdouble(w))
}

func VertexAttrib4dv(index uint32, v *float64)  {
    C.gogl_glVertexAttrib4dv(C.GLuint(index), (*C.GLdouble)(unsafe.Pointer(v)))
}

func VertexAttrib4f(index uint32, x float32, y float32, z float32, w float32)  {
    C.gogl_glVertexAttrib4f(C.GLuint(index), C.GLfloat(x), C.GLfloat(y), C.GLfloat(z), C.GLfloat(w))
}

func VertexAttrib4fv(index uint32, v *float32)  {
    C.gogl_glVertexAttrib4fv(C.GLuint(index), (*C.GLfloat)(unsafe.Pointer(v)))
}

func VertexAttrib4iv(index uint32, v *int32)  {
    C.gogl_glVertexAttrib4iv(C.GLuint(index), (*C.GLint)(unsafe.Pointer(v)))
}

func VertexAttrib4s(index uint32, x int16, y int16, z int16, w int16)  {
    C.gogl_glVertexAttrib4s(C.GLuint(index), C.GLshort(x), C.GLshort(y), C.GLshort(z), C.GLshort(w))
}

func VertexAttrib4sv(index uint32, v *int16)  {
    C.gogl_glVertexAttrib4sv(C.GLuint(index), (*C.GLshort)(unsafe.Pointer(v)))
}

func VertexAttrib4ubv(index uint32, v *uint8)  {
    C.gogl_glVertexAttrib4ubv(C.GLuint(index), (*C.GLubyte)(unsafe.Pointer(v)))
}

func VertexAttrib4uiv(index uint32, v *uint32)  {
    C.gogl_glVertexAttrib4uiv(C.GLuint(index), (*C.GLuint)(unsafe.Pointer(v)))
}

func VertexAttrib4usv(index uint32, v *uint16)  {
    C.gogl_glVertexAttrib4usv(C.GLuint(index), (*C.GLushort)(unsafe.Pointer(v)))
}

func VertexAttribPointer(index uint32, size int32, type_ uint32, normalized byte, stride int32, pointer unsafe.Pointer)  {
    C.gogl_glVertexAttribPointer(C.GLuint(index), C.GLint(size), C.GLenum(type_), C.GLboolean(normalized), C.GLsizei(stride), pointer)
}

func UniformMatrix2x3fv(location int32, count int32, transpose byte, value *float32)  {
    C.gogl_glUniformMatrix2x3fv(C.GLint(location), C.GLsizei(count), C.GLboolean(transpose), (*C.GLfloat)(unsafe.Pointer(value)))
}

func UniformMatrix2x4fv(location int32, count int32, transpose byte, value *float32)  {
    C.gogl_glUniformMatrix2x4fv(C.GLint(location), C.GLsizei(count), C.GLboolean(transpose), (*C.GLfloat)(unsafe.Pointer(value)))
}

func UniformMatrix3x2fv(location int32, count int32, transpose byte, value *float32)  {
    C.gogl_glUniformMatrix3x2fv(C.GLint(location), C.GLsizei(count), C.GLboolean(transpose), (*C.GLfloat)(unsafe.Pointer(value)))
}

func UniformMatrix3x4fv(location int32, count int32, transpose byte, value *float32)  {
    C.gogl_glUniformMatrix3x4fv(C.GLint(location), C.GLsizei(count), C.GLboolean(transpose), (*C.GLfloat)(unsafe.Pointer(value)))
}

func UniformMatrix4x2fv(location int32, count int32, transpose byte, value *float32)  {
    C.gogl_glUniformMatrix4x2fv(C.GLint(location), C.GLsizei(count), C.GLboolean(transpose), (*C.GLfloat)(unsafe.Pointer(value)))
}

func UniformMatrix4x3fv(location int32, count int32, transpose byte, value *float32)  {
    C.gogl_glUniformMatrix4x3fv(C.GLint(location), C.GLsizei(count), C.GLboolean(transpose), (*C.GLfloat)(unsafe.Pointer(value)))
}
