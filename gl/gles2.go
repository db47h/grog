// Code generated by gogl (https://github.com/db47h/gogl); DO NOT EDIT

// +build gles2,!darwin

package gl

/*
#cgo linux freebsd    pkg-config: glesv2
#cgo                  CFLAGS: -DGOTAG_gles2

#include "gl.h"
#include <stdio.h>

struct Version_ GLVersion;

*/
import "C"
import (
    "fmt"
    "strings"
    "unsafe"
)

// CoreProfile is true if the API was configured for the OpenGL core profile.
// This is always false if API is GLES2.
//
const CoreProfile = false

// API type: OpenGL or OpenGLES.
//
type API int

// API Values.
//
const (
    OpenGL API = iota
    OpenGLES
)

func (a API) String() string {
    if a == OpenGL {
        return "OpenGL"
    }
    return "OpenGLES"
}

// Version represents an API version.
//
type Version struct {
    API   API
    Major int
    Minor int
}

// GE returns true if version v is greater or equal to Version{api, major, minor}
// and v.API is equal to the api argument.
//
// The following example shows how to use it in compatibility checks:
//
//  ver := gl.RuntimeVersion()
//  switch ver {
//  case ver.GE(OpenGL, 4, 0) || ver.GE(OpenGLES, 3, 1):
//      // call glDrawArraysIndirect
//  case ver.GE(OpenGL, 3, 1) || ver.GE(OpenGLES, 3, 0):
//      // call glDrawArraysInstanced
//  default:
//      // fallback
//  }
//
func (v Version) GE(api API, major, minor int) bool {
    return v.API == api && (v.Major > major || v.Major == major && v.Minor >= minor)
}

// APIVersion returns the OpenGL or OpenGLES version supported by the package.
//
func APIVersion() Version {
    return Version{OpenGLES, 2, 0}
}

// RuntimeVersion returns the OpenGL or OpenGLES version available at runtime,
// which may differ from APIVersion.
//
func RuntimeVersion() Version {
    return Version{OpenGLES, int(C.GLVersion.major), int(C.GLVersion.minor)}
}

// InitC initializes OpenGL. loader is a function pointer to a C function of type
//
//  typedef void *(*loader) (const char *funcName)
//
// If API is GLES2, it is safe to pass a nil pointer to this function.
//
func InitC(loader unsafe.Pointer) error {
	InitGo(nil)
    return nil
}

// InitGo initializes OpenGL. The recommended value for loader is glfw.GetProcAddress.
// The loader function must panic on error.
//
// If API is GLES2, it is safe to pass a nil pointer to this function.
//
func InitGo(loader func(string) unsafe.Pointer) {
    var (
        major = -1
        minor = -1
    )
	ver := C.GoString((*C.char)(unsafe.Pointer(C.glGetString(GL_VERSION))))
    i := strings.IndexFunc(ver, func(r rune) bool {
        return r >= '0' && r <= '9'
    })
    if i >= 0 {
        fmt.Sscanf(ver[i:], "%d.%d", &major, &minor)
    }
    if major < 0 || minor < 0 {
        panic("failed to identify OpenGLES version")
    }
    C.GLVersion.major = C.int(major)
    C.GLVersion.minor = C.int(minor)
}

// GL Constants
//
const (
	GL_ACTIVE_ATTRIBUTES = 0x8B89
	GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A
	GL_ACTIVE_TEXTURE = 0x84E0
	GL_ACTIVE_UNIFORMS = 0x8B86
	GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87
	GL_ALIASED_LINE_WIDTH_RANGE = 0x846E
	GL_ALIASED_POINT_SIZE_RANGE = 0x846D
	GL_ALPHA = 0x1906
	GL_ALPHA_BITS = 0x0D55
	GL_ALWAYS = 0x0207
	GL_ARRAY_BUFFER = 0x8892
	GL_ARRAY_BUFFER_BINDING = 0x8894
	GL_ATTACHED_SHADERS = 0x8B85
	GL_BACK = 0x0405
	GL_BLEND = 0x0BE2
	GL_BLEND_COLOR = 0x8005
	GL_BLEND_DST_ALPHA = 0x80CA
	GL_BLEND_DST_RGB = 0x80C8
	GL_BLEND_EQUATION = 0x8009
	GL_BLEND_EQUATION_ALPHA = 0x883D
	GL_BLEND_EQUATION_RGB = 0x8009
	GL_BLEND_SRC_ALPHA = 0x80CB
	GL_BLEND_SRC_RGB = 0x80C9
	GL_BLUE_BITS = 0x0D54
	GL_BOOL = 0x8B56
	GL_BOOL_VEC2 = 0x8B57
	GL_BOOL_VEC3 = 0x8B58
	GL_BOOL_VEC4 = 0x8B59
	GL_BUFFER_SIZE = 0x8764
	GL_BUFFER_USAGE = 0x8765
	GL_BYTE = 0x1400
	GL_CCW = 0x0901
	GL_CLAMP_TO_EDGE = 0x812F
	GL_COLOR_ATTACHMENT0 = 0x8CE0
	GL_COLOR_BUFFER_BIT = 0x00004000
	GL_COLOR_CLEAR_VALUE = 0x0C22
	GL_COLOR_WRITEMASK = 0x0C23
	GL_COMPILE_STATUS = 0x8B81
	GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3
	GL_CONSTANT_ALPHA = 0x8003
	GL_CONSTANT_COLOR = 0x8001
	GL_CULL_FACE = 0x0B44
	GL_CULL_FACE_MODE = 0x0B45
	GL_CURRENT_PROGRAM = 0x8B8D
	GL_CURRENT_VERTEX_ATTRIB = 0x8626
	GL_CW = 0x0900
	GL_DECR = 0x1E03
	GL_DECR_WRAP = 0x8508
	GL_DELETE_STATUS = 0x8B80
	GL_DEPTH_ATTACHMENT = 0x8D00
	GL_DEPTH_BITS = 0x0D56
	GL_DEPTH_BUFFER_BIT = 0x00000100
	GL_DEPTH_CLEAR_VALUE = 0x0B73
	GL_DEPTH_COMPONENT = 0x1902
	GL_DEPTH_COMPONENT16 = 0x81A5
	GL_DEPTH_FUNC = 0x0B74
	GL_DEPTH_RANGE = 0x0B70
	GL_DEPTH_TEST = 0x0B71
	GL_DEPTH_WRITEMASK = 0x0B72
	GL_DITHER = 0x0BD0
	GL_DONT_CARE = 0x1100
	GL_DST_ALPHA = 0x0304
	GL_DST_COLOR = 0x0306
	GL_DYNAMIC_DRAW = 0x88E8
	GL_ELEMENT_ARRAY_BUFFER = 0x8893
	GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895
	GL_EQUAL = 0x0202
	GL_EXTENSIONS = 0x1F03
	GL_FALSE = 0
	GL_FASTEST = 0x1101
	GL_FIXED = 0x140C
	GL_FLOAT = 0x1406
	GL_FLOAT_MAT2 = 0x8B5A
	GL_FLOAT_MAT3 = 0x8B5B
	GL_FLOAT_MAT4 = 0x8B5C
	GL_FLOAT_VEC2 = 0x8B50
	GL_FLOAT_VEC3 = 0x8B51
	GL_FLOAT_VEC4 = 0x8B52
	GL_FRAGMENT_SHADER = 0x8B30
	GL_FRAMEBUFFER = 0x8D40
	GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1
	GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0
	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3
	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2
	GL_FRAMEBUFFER_BINDING = 0x8CA6
	GL_FRAMEBUFFER_COMPLETE = 0x8CD5
	GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6
	GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9
	GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7
	GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD
	GL_FRONT = 0x0404
	GL_FRONT_AND_BACK = 0x0408
	GL_FRONT_FACE = 0x0B46
	GL_FUNC_ADD = 0x8006
	GL_FUNC_REVERSE_SUBTRACT = 0x800B
	GL_FUNC_SUBTRACT = 0x800A
	GL_GENERATE_MIPMAP_HINT = 0x8192
	GL_GEQUAL = 0x0206
	GL_GREATER = 0x0204
	GL_GREEN_BITS = 0x0D53
	GL_HIGH_FLOAT = 0x8DF2
	GL_HIGH_INT = 0x8DF5
	GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B
	GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A
	GL_INCR = 0x1E02
	GL_INCR_WRAP = 0x8507
	GL_INFO_LOG_LENGTH = 0x8B84
	GL_INT = 0x1404
	GL_INT_VEC2 = 0x8B53
	GL_INT_VEC3 = 0x8B54
	GL_INT_VEC4 = 0x8B55
	GL_INVALID_ENUM = 0x0500
	GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506
	GL_INVALID_OPERATION = 0x0502
	GL_INVALID_VALUE = 0x0501
	GL_INVERT = 0x150A
	GL_KEEP = 0x1E00
	GL_LEQUAL = 0x0203
	GL_LESS = 0x0201
	GL_LINEAR = 0x2601
	GL_LINEAR_MIPMAP_LINEAR = 0x2703
	GL_LINEAR_MIPMAP_NEAREST = 0x2701
	GL_LINES = 0x0001
	GL_LINE_LOOP = 0x0002
	GL_LINE_STRIP = 0x0003
	GL_LINE_WIDTH = 0x0B21
	GL_LINK_STATUS = 0x8B82
	GL_LOW_FLOAT = 0x8DF0
	GL_LOW_INT = 0x8DF3
	GL_LUMINANCE = 0x1909
	GL_LUMINANCE_ALPHA = 0x190A
	GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D
	GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C
	GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD
	GL_MAX_RENDERBUFFER_SIZE = 0x84E8
	GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872
	GL_MAX_TEXTURE_SIZE = 0x0D33
	GL_MAX_VARYING_VECTORS = 0x8DFC
	GL_MAX_VERTEX_ATTRIBS = 0x8869
	GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C
	GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB
	GL_MAX_VIEWPORT_DIMS = 0x0D3A
	GL_MEDIUM_FLOAT = 0x8DF1
	GL_MEDIUM_INT = 0x8DF4
	GL_MIRRORED_REPEAT = 0x8370
	GL_NEAREST = 0x2600
	GL_NEAREST_MIPMAP_LINEAR = 0x2702
	GL_NEAREST_MIPMAP_NEAREST = 0x2700
	GL_NEVER = 0x0200
	GL_NICEST = 0x1102
	GL_NONE = 0
	GL_NOTEQUAL = 0x0205
	GL_NO_ERROR = 0
	GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2
	GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9
	GL_ONE = 1
	GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004
	GL_ONE_MINUS_CONSTANT_COLOR = 0x8002
	GL_ONE_MINUS_DST_ALPHA = 0x0305
	GL_ONE_MINUS_DST_COLOR = 0x0307
	GL_ONE_MINUS_SRC_ALPHA = 0x0303
	GL_ONE_MINUS_SRC_COLOR = 0x0301
	GL_OUT_OF_MEMORY = 0x0505
	GL_PACK_ALIGNMENT = 0x0D05
	GL_POINTS = 0x0000
	GL_POLYGON_OFFSET_FACTOR = 0x8038
	GL_POLYGON_OFFSET_FILL = 0x8037
	GL_POLYGON_OFFSET_UNITS = 0x2A00
	GL_RED_BITS = 0x0D52
	GL_RENDERBUFFER = 0x8D41
	GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53
	GL_RENDERBUFFER_BINDING = 0x8CA7
	GL_RENDERBUFFER_BLUE_SIZE = 0x8D52
	GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54
	GL_RENDERBUFFER_GREEN_SIZE = 0x8D51
	GL_RENDERBUFFER_HEIGHT = 0x8D43
	GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44
	GL_RENDERBUFFER_RED_SIZE = 0x8D50
	GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55
	GL_RENDERBUFFER_WIDTH = 0x8D42
	GL_RENDERER = 0x1F01
	GL_REPEAT = 0x2901
	GL_REPLACE = 0x1E01
	GL_RGB = 0x1907
	GL_RGB565 = 0x8D62
	GL_RGB5_A1 = 0x8057
	GL_RGBA = 0x1908
	GL_RGBA4 = 0x8056
	GL_SAMPLER_2D = 0x8B5E
	GL_SAMPLER_CUBE = 0x8B60
	GL_SAMPLES = 0x80A9
	GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E
	GL_SAMPLE_BUFFERS = 0x80A8
	GL_SAMPLE_COVERAGE = 0x80A0
	GL_SAMPLE_COVERAGE_INVERT = 0x80AB
	GL_SAMPLE_COVERAGE_VALUE = 0x80AA
	GL_SCISSOR_BOX = 0x0C10
	GL_SCISSOR_TEST = 0x0C11
	GL_SHADER_BINARY_FORMATS = 0x8DF8
	GL_SHADER_COMPILER = 0x8DFA
	GL_SHADER_SOURCE_LENGTH = 0x8B88
	GL_SHADER_TYPE = 0x8B4F
	GL_SHADING_LANGUAGE_VERSION = 0x8B8C
	GL_SHORT = 0x1402
	GL_SRC_ALPHA = 0x0302
	GL_SRC_ALPHA_SATURATE = 0x0308
	GL_SRC_COLOR = 0x0300
	GL_STATIC_DRAW = 0x88E4
	GL_STENCIL_ATTACHMENT = 0x8D20
	GL_STENCIL_BACK_FAIL = 0x8801
	GL_STENCIL_BACK_FUNC = 0x8800
	GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802
	GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803
	GL_STENCIL_BACK_REF = 0x8CA3
	GL_STENCIL_BACK_VALUE_MASK = 0x8CA4
	GL_STENCIL_BACK_WRITEMASK = 0x8CA5
	GL_STENCIL_BITS = 0x0D57
	GL_STENCIL_BUFFER_BIT = 0x00000400
	GL_STENCIL_CLEAR_VALUE = 0x0B91
	GL_STENCIL_FAIL = 0x0B94
	GL_STENCIL_FUNC = 0x0B92
	GL_STENCIL_INDEX8 = 0x8D48
	GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95
	GL_STENCIL_PASS_DEPTH_PASS = 0x0B96
	GL_STENCIL_REF = 0x0B97
	GL_STENCIL_TEST = 0x0B90
	GL_STENCIL_VALUE_MASK = 0x0B93
	GL_STENCIL_WRITEMASK = 0x0B98
	GL_STREAM_DRAW = 0x88E0
	GL_SUBPIXEL_BITS = 0x0D50
	GL_TEXTURE = 0x1702
	GL_TEXTURE0 = 0x84C0
	GL_TEXTURE1 = 0x84C1
	GL_TEXTURE10 = 0x84CA
	GL_TEXTURE11 = 0x84CB
	GL_TEXTURE12 = 0x84CC
	GL_TEXTURE13 = 0x84CD
	GL_TEXTURE14 = 0x84CE
	GL_TEXTURE15 = 0x84CF
	GL_TEXTURE16 = 0x84D0
	GL_TEXTURE17 = 0x84D1
	GL_TEXTURE18 = 0x84D2
	GL_TEXTURE19 = 0x84D3
	GL_TEXTURE2 = 0x84C2
	GL_TEXTURE20 = 0x84D4
	GL_TEXTURE21 = 0x84D5
	GL_TEXTURE22 = 0x84D6
	GL_TEXTURE23 = 0x84D7
	GL_TEXTURE24 = 0x84D8
	GL_TEXTURE25 = 0x84D9
	GL_TEXTURE26 = 0x84DA
	GL_TEXTURE27 = 0x84DB
	GL_TEXTURE28 = 0x84DC
	GL_TEXTURE29 = 0x84DD
	GL_TEXTURE3 = 0x84C3
	GL_TEXTURE30 = 0x84DE
	GL_TEXTURE31 = 0x84DF
	GL_TEXTURE4 = 0x84C4
	GL_TEXTURE5 = 0x84C5
	GL_TEXTURE6 = 0x84C6
	GL_TEXTURE7 = 0x84C7
	GL_TEXTURE8 = 0x84C8
	GL_TEXTURE9 = 0x84C9
	GL_TEXTURE_2D = 0x0DE1
	GL_TEXTURE_BINDING_2D = 0x8069
	GL_TEXTURE_BINDING_CUBE_MAP = 0x8514
	GL_TEXTURE_CUBE_MAP = 0x8513
	GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516
	GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518
	GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A
	GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515
	GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517
	GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519
	GL_TEXTURE_MAG_FILTER = 0x2800
	GL_TEXTURE_MIN_FILTER = 0x2801
	GL_TEXTURE_WRAP_S = 0x2802
	GL_TEXTURE_WRAP_T = 0x2803
	GL_TRIANGLES = 0x0004
	GL_TRIANGLE_FAN = 0x0006
	GL_TRIANGLE_STRIP = 0x0005
	GL_TRUE = 1
	GL_UNPACK_ALIGNMENT = 0x0CF5
	GL_UNSIGNED_BYTE = 0x1401
	GL_UNSIGNED_INT = 0x1405
	GL_UNSIGNED_SHORT = 0x1403
	GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033
	GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034
	GL_UNSIGNED_SHORT_5_6_5 = 0x8363
	GL_VALIDATE_STATUS = 0x8B83
	GL_VENDOR = 0x1F00
	GL_VERSION = 0x1F02
	GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F
	GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622
	GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A
	GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645
	GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623
	GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624
	GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625
	GL_VERTEX_SHADER = 0x8B31
	GL_VIEWPORT = 0x0BA2
	GL_ZERO = 0
)

// GL Functions
//

func ActiveTexture(texture uint32)  {
    C.glActiveTexture(C.GLenum(texture))
}

func AttachShader(program uint32, shader uint32)  {
    C.glAttachShader(C.GLuint(program), C.GLuint(shader))
}

func BindAttribLocation(program uint32, index uint32, name *int8)  {
    C.glBindAttribLocation(C.GLuint(program), C.GLuint(index), (*C.GLchar)(unsafe.Pointer(name)))
}

func BindBuffer(target uint32, buffer uint32)  {
    C.glBindBuffer(C.GLenum(target), C.GLuint(buffer))
}

func BindFramebuffer(target uint32, framebuffer uint32)  {
    C.glBindFramebuffer(C.GLenum(target), C.GLuint(framebuffer))
}

func BindRenderbuffer(target uint32, renderbuffer uint32)  {
    C.glBindRenderbuffer(C.GLenum(target), C.GLuint(renderbuffer))
}

func BindTexture(target uint32, texture uint32)  {
    C.glBindTexture(C.GLenum(target), C.GLuint(texture))
}

func BlendColor(red float32, green float32, blue float32, alpha float32)  {
    C.glBlendColor(C.GLfloat(red), C.GLfloat(green), C.GLfloat(blue), C.GLfloat(alpha))
}

func BlendEquation(mode uint32)  {
    C.glBlendEquation(C.GLenum(mode))
}

func BlendEquationSeparate(modeRGB uint32, modeAlpha uint32)  {
    C.glBlendEquationSeparate(C.GLenum(modeRGB), C.GLenum(modeAlpha))
}

func BlendFunc(sfactor uint32, dfactor uint32)  {
    C.glBlendFunc(C.GLenum(sfactor), C.GLenum(dfactor))
}

func BlendFuncSeparate(sfactorRGB uint32, dfactorRGB uint32, sfactorAlpha uint32, dfactorAlpha uint32)  {
    C.glBlendFuncSeparate(C.GLenum(sfactorRGB), C.GLenum(dfactorRGB), C.GLenum(sfactorAlpha), C.GLenum(dfactorAlpha))
}

func BufferData(target uint32, size int, data unsafe.Pointer, usage uint32)  {
    C.glBufferData(C.GLenum(target), C.GLsizeiptr(size), data, C.GLenum(usage))
}

func BufferSubData(target uint32, offset int, size int, data unsafe.Pointer)  {
    C.glBufferSubData(C.GLenum(target), C.GLintptr(offset), C.GLsizeiptr(size), data)
}

func CheckFramebufferStatus(target uint32) uint32 {
    ret := C.glCheckFramebufferStatus(C.GLenum(target))
    return uint32(ret)
}

func Clear(mask uint32)  {
    C.glClear(C.GLbitfield(mask))
}

func ClearColor(red float32, green float32, blue float32, alpha float32)  {
    C.glClearColor(C.GLfloat(red), C.GLfloat(green), C.GLfloat(blue), C.GLfloat(alpha))
}

func ClearDepthf(d float32)  {
    C.glClearDepthf(C.GLfloat(d))
}

func ClearStencil(s int32)  {
    C.glClearStencil(C.GLint(s))
}

func ColorMask(red byte, green byte, blue byte, alpha byte)  {
    C.glColorMask(C.GLboolean(red), C.GLboolean(green), C.GLboolean(blue), C.GLboolean(alpha))
}

func CompileShader(shader uint32)  {
    C.glCompileShader(C.GLuint(shader))
}

func CompressedTexImage2D(target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, data unsafe.Pointer)  {
    C.glCompressedTexImage2D(C.GLenum(target), C.GLint(level), C.GLenum(internalformat), C.GLsizei(width), C.GLsizei(height), C.GLint(border), C.GLsizei(imageSize), data)
}

func CompressedTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer)  {
    C.glCompressedTexSubImage2D(C.GLenum(target), C.GLint(level), C.GLint(xoffset), C.GLint(yoffset), C.GLsizei(width), C.GLsizei(height), C.GLenum(format), C.GLsizei(imageSize), data)
}

func CopyTexImage2D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32)  {
    C.glCopyTexImage2D(C.GLenum(target), C.GLint(level), C.GLenum(internalformat), C.GLint(x), C.GLint(y), C.GLsizei(width), C.GLsizei(height), C.GLint(border))
}

func CopyTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32)  {
    C.glCopyTexSubImage2D(C.GLenum(target), C.GLint(level), C.GLint(xoffset), C.GLint(yoffset), C.GLint(x), C.GLint(y), C.GLsizei(width), C.GLsizei(height))
}

func CreateProgram() uint32 {
    ret := C.glCreateProgram()
    return uint32(ret)
}

func CreateShader(type_ uint32) uint32 {
    ret := C.glCreateShader(C.GLenum(type_))
    return uint32(ret)
}

func CullFace(mode uint32)  {
    C.glCullFace(C.GLenum(mode))
}

func DeleteBuffers(n int32, buffers *uint32)  {
    C.glDeleteBuffers(C.GLsizei(n), (*C.GLuint)(unsafe.Pointer(buffers)))
}

func DeleteFramebuffers(n int32, framebuffers *uint32)  {
    C.glDeleteFramebuffers(C.GLsizei(n), (*C.GLuint)(unsafe.Pointer(framebuffers)))
}

func DeleteProgram(program uint32)  {
    C.glDeleteProgram(C.GLuint(program))
}

func DeleteRenderbuffers(n int32, renderbuffers *uint32)  {
    C.glDeleteRenderbuffers(C.GLsizei(n), (*C.GLuint)(unsafe.Pointer(renderbuffers)))
}

func DeleteShader(shader uint32)  {
    C.glDeleteShader(C.GLuint(shader))
}

func DeleteTextures(n int32, textures *uint32)  {
    C.glDeleteTextures(C.GLsizei(n), (*C.GLuint)(unsafe.Pointer(textures)))
}

func DepthFunc(func_ uint32)  {
    C.glDepthFunc(C.GLenum(func_))
}

func DepthMask(flag byte)  {
    C.glDepthMask(C.GLboolean(flag))
}

func DepthRangef(n float32, f float32)  {
    C.glDepthRangef(C.GLfloat(n), C.GLfloat(f))
}

func DetachShader(program uint32, shader uint32)  {
    C.glDetachShader(C.GLuint(program), C.GLuint(shader))
}

func Disable(cap uint32)  {
    C.glDisable(C.GLenum(cap))
}

func DisableVertexAttribArray(index uint32)  {
    C.glDisableVertexAttribArray(C.GLuint(index))
}

func DrawArrays(mode uint32, first int32, count int32)  {
    C.glDrawArrays(C.GLenum(mode), C.GLint(first), C.GLsizei(count))
}

func DrawElements(mode uint32, count int32, type_ uint32, indices unsafe.Pointer)  {
    C.glDrawElements(C.GLenum(mode), C.GLsizei(count), C.GLenum(type_), indices)
}

func Enable(cap uint32)  {
    C.glEnable(C.GLenum(cap))
}

func EnableVertexAttribArray(index uint32)  {
    C.glEnableVertexAttribArray(C.GLuint(index))
}

func Finish()  {
    C.glFinish()
}

func Flush()  {
    C.glFlush()
}

func FramebufferRenderbuffer(target uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32)  {
    C.glFramebufferRenderbuffer(C.GLenum(target), C.GLenum(attachment), C.GLenum(renderbuffertarget), C.GLuint(renderbuffer))
}

func FramebufferTexture2D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32)  {
    C.glFramebufferTexture2D(C.GLenum(target), C.GLenum(attachment), C.GLenum(textarget), C.GLuint(texture), C.GLint(level))
}

func FrontFace(mode uint32)  {
    C.glFrontFace(C.GLenum(mode))
}

func GenBuffers(n int32, buffers *uint32)  {
    C.glGenBuffers(C.GLsizei(n), (*C.GLuint)(unsafe.Pointer(buffers)))
}

func GenFramebuffers(n int32, framebuffers *uint32)  {
    C.glGenFramebuffers(C.GLsizei(n), (*C.GLuint)(unsafe.Pointer(framebuffers)))
}

func GenRenderbuffers(n int32, renderbuffers *uint32)  {
    C.glGenRenderbuffers(C.GLsizei(n), (*C.GLuint)(unsafe.Pointer(renderbuffers)))
}

func GenTextures(n int32, textures *uint32)  {
    C.glGenTextures(C.GLsizei(n), (*C.GLuint)(unsafe.Pointer(textures)))
}

func GenerateMipmap(target uint32)  {
    C.glGenerateMipmap(C.GLenum(target))
}

func GetActiveAttrib(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *int8)  {
    C.glGetActiveAttrib(C.GLuint(program), C.GLuint(index), C.GLsizei(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLint)(unsafe.Pointer(size)), (*C.GLenum)(unsafe.Pointer(type_)), (*C.GLchar)(unsafe.Pointer(name)))
}

func GetActiveUniform(program uint32, index uint32, bufSize int32, length *int32, size *int32, type_ *uint32, name *int8)  {
    C.glGetActiveUniform(C.GLuint(program), C.GLuint(index), C.GLsizei(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLint)(unsafe.Pointer(size)), (*C.GLenum)(unsafe.Pointer(type_)), (*C.GLchar)(unsafe.Pointer(name)))
}

func GetAttachedShaders(program uint32, maxCount int32, count *int32, shaders *uint32)  {
    C.glGetAttachedShaders(C.GLuint(program), C.GLsizei(maxCount), (*C.GLsizei)(unsafe.Pointer(count)), (*C.GLuint)(unsafe.Pointer(shaders)))
}

func GetAttribLocation(program uint32, name *int8) int32 {
    ret := C.glGetAttribLocation(C.GLuint(program), (*C.GLchar)(unsafe.Pointer(name)))
    return int32(ret)
}

func GetBooleanv(pname uint32, data *byte)  {
    C.glGetBooleanv(C.GLenum(pname), (*C.GLboolean)(unsafe.Pointer(data)))
}

func GetBufferParameteriv(target uint32, pname uint32, params *int32)  {
    C.glGetBufferParameteriv(C.GLenum(target), C.GLenum(pname), (*C.GLint)(unsafe.Pointer(params)))
}

func GetError() uint32 {
    ret := C.glGetError()
    return uint32(ret)
}

func GetFloatv(pname uint32, data *float32)  {
    C.glGetFloatv(C.GLenum(pname), (*C.GLfloat)(unsafe.Pointer(data)))
}

func GetFramebufferAttachmentParameteriv(target uint32, attachment uint32, pname uint32, params *int32)  {
    C.glGetFramebufferAttachmentParameteriv(C.GLenum(target), C.GLenum(attachment), C.GLenum(pname), (*C.GLint)(unsafe.Pointer(params)))
}

func GetIntegerv(pname uint32, data *int32)  {
    C.glGetIntegerv(C.GLenum(pname), (*C.GLint)(unsafe.Pointer(data)))
}

func GetProgramInfoLog(program uint32, bufSize int32, length *int32, infoLog *int8)  {
    C.glGetProgramInfoLog(C.GLuint(program), C.GLsizei(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(infoLog)))
}

func GetProgramiv(program uint32, pname uint32, params *int32)  {
    C.glGetProgramiv(C.GLuint(program), C.GLenum(pname), (*C.GLint)(unsafe.Pointer(params)))
}

func GetRenderbufferParameteriv(target uint32, pname uint32, params *int32)  {
    C.glGetRenderbufferParameteriv(C.GLenum(target), C.GLenum(pname), (*C.GLint)(unsafe.Pointer(params)))
}

func GetShaderInfoLog(shader uint32, bufSize int32, length *int32, infoLog *int8)  {
    C.glGetShaderInfoLog(C.GLuint(shader), C.GLsizei(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(infoLog)))
}

func GetShaderPrecisionFormat(shadertype uint32, precisiontype uint32, range_ *int32, precision *int32)  {
    C.glGetShaderPrecisionFormat(C.GLenum(shadertype), C.GLenum(precisiontype), (*C.GLint)(unsafe.Pointer(range_)), (*C.GLint)(unsafe.Pointer(precision)))
}

func GetShaderSource(shader uint32, bufSize int32, length *int32, source *int8)  {
    C.glGetShaderSource(C.GLuint(shader), C.GLsizei(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(source)))
}

func GetShaderiv(shader uint32, pname uint32, params *int32)  {
    C.glGetShaderiv(C.GLuint(shader), C.GLenum(pname), (*C.GLint)(unsafe.Pointer(params)))
}

func GetString(name uint32) *uint8 {
    ret := C.glGetString(C.GLenum(name))
    return (*uint8)(ret)
}

func GetTexParameterfv(target uint32, pname uint32, params *float32)  {
    C.glGetTexParameterfv(C.GLenum(target), C.GLenum(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}

func GetTexParameteriv(target uint32, pname uint32, params *int32)  {
    C.glGetTexParameteriv(C.GLenum(target), C.GLenum(pname), (*C.GLint)(unsafe.Pointer(params)))
}

func GetUniformLocation(program uint32, name *int8) int32 {
    ret := C.glGetUniformLocation(C.GLuint(program), (*C.GLchar)(unsafe.Pointer(name)))
    return int32(ret)
}

func GetUniformfv(program uint32, location int32, params *float32)  {
    C.glGetUniformfv(C.GLuint(program), C.GLint(location), (*C.GLfloat)(unsafe.Pointer(params)))
}

func GetUniformiv(program uint32, location int32, params *int32)  {
    C.glGetUniformiv(C.GLuint(program), C.GLint(location), (*C.GLint)(unsafe.Pointer(params)))
}

func GetVertexAttribPointerv(index uint32, pname uint32, pointer *unsafe.Pointer)  {
    C.glGetVertexAttribPointerv(C.GLuint(index), C.GLenum(pname), pointer)
}

func GetVertexAttribfv(index uint32, pname uint32, params *float32)  {
    C.glGetVertexAttribfv(C.GLuint(index), C.GLenum(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}

func GetVertexAttribiv(index uint32, pname uint32, params *int32)  {
    C.glGetVertexAttribiv(C.GLuint(index), C.GLenum(pname), (*C.GLint)(unsafe.Pointer(params)))
}

func Hint(target uint32, mode uint32)  {
    C.glHint(C.GLenum(target), C.GLenum(mode))
}

func IsBuffer(buffer uint32) byte {
    ret := C.glIsBuffer(C.GLuint(buffer))
    return byte(ret)
}

func IsEnabled(cap uint32) byte {
    ret := C.glIsEnabled(C.GLenum(cap))
    return byte(ret)
}

func IsFramebuffer(framebuffer uint32) byte {
    ret := C.glIsFramebuffer(C.GLuint(framebuffer))
    return byte(ret)
}

func IsProgram(program uint32) byte {
    ret := C.glIsProgram(C.GLuint(program))
    return byte(ret)
}

func IsRenderbuffer(renderbuffer uint32) byte {
    ret := C.glIsRenderbuffer(C.GLuint(renderbuffer))
    return byte(ret)
}

func IsShader(shader uint32) byte {
    ret := C.glIsShader(C.GLuint(shader))
    return byte(ret)
}

func IsTexture(texture uint32) byte {
    ret := C.glIsTexture(C.GLuint(texture))
    return byte(ret)
}

func LineWidth(width float32)  {
    C.glLineWidth(C.GLfloat(width))
}

func LinkProgram(program uint32)  {
    C.glLinkProgram(C.GLuint(program))
}

func PixelStorei(pname uint32, param int32)  {
    C.glPixelStorei(C.GLenum(pname), C.GLint(param))
}

func PolygonOffset(factor float32, units float32)  {
    C.glPolygonOffset(C.GLfloat(factor), C.GLfloat(units))
}

func ReadPixels(x int32, y int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)  {
    C.glReadPixels(C.GLint(x), C.GLint(y), C.GLsizei(width), C.GLsizei(height), C.GLenum(format), C.GLenum(type_), pixels)
}

func ReleaseShaderCompiler()  {
    C.glReleaseShaderCompiler()
}

func RenderbufferStorage(target uint32, internalformat uint32, width int32, height int32)  {
    C.glRenderbufferStorage(C.GLenum(target), C.GLenum(internalformat), C.GLsizei(width), C.GLsizei(height))
}

func SampleCoverage(value float32, invert byte)  {
    C.glSampleCoverage(C.GLfloat(value), C.GLboolean(invert))
}

func Scissor(x int32, y int32, width int32, height int32)  {
    C.glScissor(C.GLint(x), C.GLint(y), C.GLsizei(width), C.GLsizei(height))
}

func ShaderBinary(count int32, shaders *uint32, binaryformat uint32, binary unsafe.Pointer, length int32)  {
    C.glShaderBinary(C.GLsizei(count), (*C.GLuint)(unsafe.Pointer(shaders)), C.GLenum(binaryformat), binary, C.GLsizei(length))
}

func ShaderSource(shader uint32, count int32, string_ **int8, length *int32)  {
    C.glShaderSource(C.GLuint(shader), C.GLsizei(count), (**C.GLchar)(unsafe.Pointer(string_)), (*C.GLint)(unsafe.Pointer(length)))
}

func StencilFunc(func_ uint32, ref int32, mask uint32)  {
    C.glStencilFunc(C.GLenum(func_), C.GLint(ref), C.GLuint(mask))
}

func StencilFuncSeparate(face uint32, func_ uint32, ref int32, mask uint32)  {
    C.glStencilFuncSeparate(C.GLenum(face), C.GLenum(func_), C.GLint(ref), C.GLuint(mask))
}

func StencilMask(mask uint32)  {
    C.glStencilMask(C.GLuint(mask))
}

func StencilMaskSeparate(face uint32, mask uint32)  {
    C.glStencilMaskSeparate(C.GLenum(face), C.GLuint(mask))
}

func StencilOp(fail uint32, zfail uint32, zpass uint32)  {
    C.glStencilOp(C.GLenum(fail), C.GLenum(zfail), C.GLenum(zpass))
}

func StencilOpSeparate(face uint32, sfail uint32, dpfail uint32, dppass uint32)  {
    C.glStencilOpSeparate(C.GLenum(face), C.GLenum(sfail), C.GLenum(dpfail), C.GLenum(dppass))
}

func TexImage2D(target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, type_ uint32, pixels unsafe.Pointer)  {
    C.glTexImage2D(C.GLenum(target), C.GLint(level), C.GLint(internalformat), C.GLsizei(width), C.GLsizei(height), C.GLint(border), C.GLenum(format), C.GLenum(type_), pixels)
}

func TexParameterf(target uint32, pname uint32, param float32)  {
    C.glTexParameterf(C.GLenum(target), C.GLenum(pname), C.GLfloat(param))
}

func TexParameterfv(target uint32, pname uint32, params *float32)  {
    C.glTexParameterfv(C.GLenum(target), C.GLenum(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}

func TexParameteri(target uint32, pname uint32, param int32)  {
    C.glTexParameteri(C.GLenum(target), C.GLenum(pname), C.GLint(param))
}

func TexParameteriv(target uint32, pname uint32, params *int32)  {
    C.glTexParameteriv(C.GLenum(target), C.GLenum(pname), (*C.GLint)(unsafe.Pointer(params)))
}

func TexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, type_ uint32, pixels unsafe.Pointer)  {
    C.glTexSubImage2D(C.GLenum(target), C.GLint(level), C.GLint(xoffset), C.GLint(yoffset), C.GLsizei(width), C.GLsizei(height), C.GLenum(format), C.GLenum(type_), pixels)
}

func Uniform1f(location int32, v0 float32)  {
    C.glUniform1f(C.GLint(location), C.GLfloat(v0))
}

func Uniform1fv(location int32, count int32, value *float32)  {
    C.glUniform1fv(C.GLint(location), C.GLsizei(count), (*C.GLfloat)(unsafe.Pointer(value)))
}

func Uniform1i(location int32, v0 int32)  {
    C.glUniform1i(C.GLint(location), C.GLint(v0))
}

func Uniform1iv(location int32, count int32, value *int32)  {
    C.glUniform1iv(C.GLint(location), C.GLsizei(count), (*C.GLint)(unsafe.Pointer(value)))
}

func Uniform2f(location int32, v0 float32, v1 float32)  {
    C.glUniform2f(C.GLint(location), C.GLfloat(v0), C.GLfloat(v1))
}

func Uniform2fv(location int32, count int32, value *float32)  {
    C.glUniform2fv(C.GLint(location), C.GLsizei(count), (*C.GLfloat)(unsafe.Pointer(value)))
}

func Uniform2i(location int32, v0 int32, v1 int32)  {
    C.glUniform2i(C.GLint(location), C.GLint(v0), C.GLint(v1))
}

func Uniform2iv(location int32, count int32, value *int32)  {
    C.glUniform2iv(C.GLint(location), C.GLsizei(count), (*C.GLint)(unsafe.Pointer(value)))
}

func Uniform3f(location int32, v0 float32, v1 float32, v2 float32)  {
    C.glUniform3f(C.GLint(location), C.GLfloat(v0), C.GLfloat(v1), C.GLfloat(v2))
}

func Uniform3fv(location int32, count int32, value *float32)  {
    C.glUniform3fv(C.GLint(location), C.GLsizei(count), (*C.GLfloat)(unsafe.Pointer(value)))
}

func Uniform3i(location int32, v0 int32, v1 int32, v2 int32)  {
    C.glUniform3i(C.GLint(location), C.GLint(v0), C.GLint(v1), C.GLint(v2))
}

func Uniform3iv(location int32, count int32, value *int32)  {
    C.glUniform3iv(C.GLint(location), C.GLsizei(count), (*C.GLint)(unsafe.Pointer(value)))
}

func Uniform4f(location int32, v0 float32, v1 float32, v2 float32, v3 float32)  {
    C.glUniform4f(C.GLint(location), C.GLfloat(v0), C.GLfloat(v1), C.GLfloat(v2), C.GLfloat(v3))
}

func Uniform4fv(location int32, count int32, value *float32)  {
    C.glUniform4fv(C.GLint(location), C.GLsizei(count), (*C.GLfloat)(unsafe.Pointer(value)))
}

func Uniform4i(location int32, v0 int32, v1 int32, v2 int32, v3 int32)  {
    C.glUniform4i(C.GLint(location), C.GLint(v0), C.GLint(v1), C.GLint(v2), C.GLint(v3))
}

func Uniform4iv(location int32, count int32, value *int32)  {
    C.glUniform4iv(C.GLint(location), C.GLsizei(count), (*C.GLint)(unsafe.Pointer(value)))
}

func UniformMatrix2fv(location int32, count int32, transpose byte, value *float32)  {
    C.glUniformMatrix2fv(C.GLint(location), C.GLsizei(count), C.GLboolean(transpose), (*C.GLfloat)(unsafe.Pointer(value)))
}

func UniformMatrix3fv(location int32, count int32, transpose byte, value *float32)  {
    C.glUniformMatrix3fv(C.GLint(location), C.GLsizei(count), C.GLboolean(transpose), (*C.GLfloat)(unsafe.Pointer(value)))
}

func UniformMatrix4fv(location int32, count int32, transpose byte, value *float32)  {
    C.glUniformMatrix4fv(C.GLint(location), C.GLsizei(count), C.GLboolean(transpose), (*C.GLfloat)(unsafe.Pointer(value)))
}

func UseProgram(program uint32)  {
    C.glUseProgram(C.GLuint(program))
}

func ValidateProgram(program uint32)  {
    C.glValidateProgram(C.GLuint(program))
}

func VertexAttrib1f(index uint32, x float32)  {
    C.glVertexAttrib1f(C.GLuint(index), C.GLfloat(x))
}

func VertexAttrib1fv(index uint32, v *float32)  {
    C.glVertexAttrib1fv(C.GLuint(index), (*C.GLfloat)(unsafe.Pointer(v)))
}

func VertexAttrib2f(index uint32, x float32, y float32)  {
    C.glVertexAttrib2f(C.GLuint(index), C.GLfloat(x), C.GLfloat(y))
}

func VertexAttrib2fv(index uint32, v *float32)  {
    C.glVertexAttrib2fv(C.GLuint(index), (*C.GLfloat)(unsafe.Pointer(v)))
}

func VertexAttrib3f(index uint32, x float32, y float32, z float32)  {
    C.glVertexAttrib3f(C.GLuint(index), C.GLfloat(x), C.GLfloat(y), C.GLfloat(z))
}

func VertexAttrib3fv(index uint32, v *float32)  {
    C.glVertexAttrib3fv(C.GLuint(index), (*C.GLfloat)(unsafe.Pointer(v)))
}

func VertexAttrib4f(index uint32, x float32, y float32, z float32, w float32)  {
    C.glVertexAttrib4f(C.GLuint(index), C.GLfloat(x), C.GLfloat(y), C.GLfloat(z), C.GLfloat(w))
}

func VertexAttrib4fv(index uint32, v *float32)  {
    C.glVertexAttrib4fv(C.GLuint(index), (*C.GLfloat)(unsafe.Pointer(v)))
}

func VertexAttribPointer(index uint32, size int32, type_ uint32, normalized byte, stride int32, pointer unsafe.Pointer)  {
    C.glVertexAttribPointer(C.GLuint(index), C.GLint(size), C.GLenum(type_), C.GLboolean(normalized), C.GLsizei(stride), pointer)
}

func Viewport(x int32, y int32, width int32, height int32)  {
    C.glViewport(C.GLint(x), C.GLint(y), C.GLsizei(width), C.GLsizei(height))
}
